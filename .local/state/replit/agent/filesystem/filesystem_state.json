{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Construction Cost Estimation System\n\n## Overview\n\nA full-stack web application for construction cost estimation and project management. The system allows users to create construction projects, manage work items and materials, calculate costs based on consumption norms, and export estimates to PDF/Excel formats. Built with a modern React frontend and Express.js backend, using PostgreSQL for data persistence.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nUser prefers Russian language for all interface and communication.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **UI Library**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Build Tool**: Vite with custom configuration for development and production\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database Layer**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful API with structured error handling\n- **Development**: Hot reload with Vite integration in development mode\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless configuration\n- **ORM**: Drizzle ORM with schema-first approach\n- **Migrations**: Drizzle Kit for database migrations\n- **Connection**: Connection pooling with @neondatabase/serverless\n\n### Database Schema Design\n- **Projects**: Core project entity with metadata\n- **Work Items**: Individual construction tasks linked to projects\n- **Materials**: Master materials catalog with pricing\n- **Work Materials**: Junction table linking materials to work items with consumption norms\n- **Relationships**: Proper foreign key constraints with cascade deletes\n\n### Authentication and Authorization\n- Currently no authentication system implemented\n- Session management setup prepared with connect-pg-simple for future implementation\n\n### Frontend Components Architecture\n- **Layout Components**: Header, Sidebar, Theme Provider\n- **Business Components**: Work modals, material modals, project summary\n- **Database Management**: Materials database, Works database with full CRUD\n- **Settings Interface**: Database management tabs with search and filtering\n- **UI Components**: Complete shadcn/ui component library\n- **State Management**: React Query for API state, React Context for UI state\n\n### Development Tooling\n- **Type Safety**: Shared schema validation with Zod\n- **Code Quality**: TypeScript strict mode enabled\n- **Build System**: ESBuild for production builds\n- **Development**: Vite dev server with HMR\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL serverless database connection\n- **drizzle-orm**: Type-safe database ORM\n- **drizzle-zod**: Schema validation integration\n- **@tanstack/react-query**: Server state management\n- **express**: Node.js web framework\n- **react**: Frontend framework\n- **@radix-ui/***: Headless UI component library\n\n### UI and Styling\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **clsx**: Conditional CSS class utilities\n- **lucide-react**: Icon library\n\n### Development Tools\n- **vite**: Build tool and development server\n- **typescript**: Type checking and compilation\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **tsx**: TypeScript execution for Node.js\n\n### Form and Validation\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation\n\n### Utilities\n- **date-fns**: Date manipulation utilities\n- **nanoid**: ID generation\n- **ws**: WebSocket support for database connections\n\n## Recent Changes\n\n### January 2025\n- Added Settings menu with database management interfaces\n- Implemented Materials Database with full CRUD operations\n- Implemented Works Database with cross-project work management\n- Added search and filtering capabilities to database interfaces\n- Fixed data type issues with decimal fields in API\n- Russian localization for all interface elements\n- Enhanced sidebar navigation with Settings section\n\n### January 2025 (Latest)\n- Implemented hierarchical work structure system (разделы → подразделы → работы)\n- Added PostgreSQL tables: sections, tasks with proper relationships\n- Created automatic hierarchy detection logic based on index patterns\n- Developed Excel/CSV import functionality with UTF-8 encoding support\n- Added API endpoints for hierarchical structure management (/api/hierarchy/*)\n- Created comprehensive UI for managing hierarchical work structure\n- Fixed database relation conflicts with proper relationName specification\n- Integrated hierarchical structure tab into main Settings menu\n- Resolved UTF-8 encoding issues for proper Russian text display\n- Added inline editing functionality for costPrice (себестоимость) values\n- Fixed data duplication problems and implemented proper database clearing\n- Created working CSV template download with correct UTF-8 encoding\n- Implemented bulk price update functionality with coefficient-based percentage changes\n- Added \"Коэффициент цен\" button with modal dialog for mass price adjustments\n- Created API endpoint (/api/hierarchy/bulk-update) for applying percentage changes to all work items\n- Fixed import issues with Russian number format (comma to dot conversion)\n- Enhanced automatic parent section creation for missing hierarchical relationships\n- Improved record type detection to properly handle subsections without units\n- **Comprehensive Material Prices Management**: Full Excel import/export system with error detection and filtering\n- **Performance Optimization**: Added search performance improvements with memoization and display limits\n- **Detailed Estimate Component**: Professional construction estimate interface matching industry standards with section grouping, material images, and cost breakdowns\n- **Global Undo/Redo System**: Implemented comprehensive undo functionality with Ctrl+Z support across all major operations\n- **Interactive Room Parameters**: Excel-like calculation tables with automatic area calculations for walls, openings, and surfaces\n- **Contract Management Integration**: Added contract fields (номер договора, срок выполнения, заказчик, подрядчик) to project parameters\n\n### Backup Point - January 9, 2025\nCurrent stable state before implementing automatic area-to-work-type linking system. All core functionality working:\n- Room parameters table with automatic calculations\n- Material prices management with Excel import/export\n- Hierarchical work structure with bulk operations\n- Global undo/redo system for all operations\n- Comprehensive estimate generation system","size_bytes":7007},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          dark: \"var(--primary-dark)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        error: {\n          DEFAULT: \"var(--error)\",\n          foreground: \"var(--error-foreground)\",\n        },\n        surface: {\n          DEFAULT: \"var(--surface)\",\n          dark: \"var(--surface-dark)\",\n        },\n        \"on-surface\": {\n          DEFAULT: \"var(--on-surface)\",\n          dark: \"var(--on-surface-dark)\",\n        },\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3365},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport * as XLSX from \"xlsx\";\nimport { storage } from \"./storage\";\nimport { importHierarchicalStructure } from \"./hierarchical-import\";\nimport { db } from \"./db\";\nimport { tasks } from \"@shared/schema\";\nimport { eq, isNotNull } from \"drizzle-orm\";\nimport { \n  insertProjectSchema,\n  insertMaterialSchema,\n  insertWorkItemSchema,\n  insertWorkMaterialSchema,\n  insertSectionSchema,\n  insertTaskSchema\n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Projects\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error getting projects:\", error);\n      res.status(500).json({ error: \"Failed to get projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error getting project:\", error);\n      res.status(500).json({ error: \"Failed to get project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n      res.status(201).json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(400).json({ error: \"Failed to create project\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, projectData);\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(400).json({ error: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      await storage.deleteProject(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      res.status(500).json({ error: \"Failed to delete project\" });\n    }\n  });\n\n  // Materials\n  app.get(\"/api/materials\", async (req, res) => {\n    try {\n      const materials = await storage.getMaterials();\n      res.json(materials);\n    } catch (error) {\n      console.error(\"Error getting materials:\", error);\n      res.status(500).json({ error: \"Failed to get materials\" });\n    }\n  });\n\n  // Search materials by name\n  app.get(\"/api/materials/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.json([]);\n      }\n      \n      const materials = await storage.searchMaterials(q);\n      res.json(materials);\n    } catch (error) {\n      console.error(\"Error searching materials:\", error);\n      res.status(500).json({ error: \"Failed to search materials\" });\n    }\n  });\n\n  app.post(\"/api/materials\", async (req, res) => {\n    try {\n      const materialData = insertMaterialSchema.parse(req.body);\n      const material = await storage.createMaterial(materialData);\n      res.status(201).json(material);\n    } catch (error) {\n      console.error(\"Error creating material:\", error);\n      res.status(400).json({ error: \"Failed to create material\" });\n    }\n  });\n\n  app.put(\"/api/materials/:id\", async (req, res) => {\n    try {\n      const materialData = insertMaterialSchema.partial().parse(req.body);\n      const material = await storage.updateMaterial(req.params.id, materialData);\n      res.json(material);\n    } catch (error) {\n      console.error(\"Error updating material:\", error);\n      res.status(400).json({ error: \"Failed to update material\" });\n    }\n  });\n\n  // Clear all materials (MUST be before /api/materials/:id route)\n  app.delete(\"/api/materials/clear\", async (req, res) => {\n    try {\n      const materials = await storage.getMaterials();\n      let deletedCount = 0;\n      \n      for (const material of materials) {\n        await storage.deleteMaterial(material.id);\n        deletedCount++;\n      }\n      \n      res.json({ deleted: deletedCount });\n    } catch (error) {\n      console.error(\"Error clearing materials:\", error);\n      res.status(500).json({ error: \"Failed to clear materials database\" });\n    }\n  });\n\n  app.delete(\"/api/materials/:id\", async (req, res) => {\n    try {\n      await storage.deleteMaterial(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting material:\", error);\n      res.status(500).json({ error: \"Failed to delete material\" });\n    }\n  });\n\n  // Work Items\n  app.get(\"/api/projects/:projectId/work-items\", async (req, res) => {\n    try {\n      const workItems = await storage.getWorkItems(req.params.projectId);\n      res.json(workItems);\n    } catch (error) {\n      console.error(\"Error getting work items:\", error);\n      res.status(500).json({ error: \"Failed to get work items\" });\n    }\n  });\n\n  app.get(\"/api/work-items/:id\", async (req, res) => {\n    try {\n      const workItem = await storage.getWorkItem(req.params.id);\n      if (!workItem) {\n        return res.status(404).json({ error: \"Work item not found\" });\n      }\n      res.json(workItem);\n    } catch (error) {\n      console.error(\"Error getting work item:\", error);\n      res.status(500).json({ error: \"Failed to get work item\" });\n    }\n  });\n\n  app.post(\"/api/work-items\", async (req, res) => {\n    try {\n      const workItemData = insertWorkItemSchema.parse(req.body);\n      const workItem = await storage.createWorkItem(workItemData);\n      res.status(201).json(workItem);\n    } catch (error) {\n      console.error(\"Error creating work item:\", error);\n      res.status(400).json({ error: \"Failed to create work item\" });\n    }\n  });\n\n  app.put(\"/api/work-items/:id\", async (req, res) => {\n    try {\n      const workItemData = insertWorkItemSchema.partial().parse(req.body);\n      const workItem = await storage.updateWorkItem(req.params.id, workItemData);\n      res.json(workItem);\n    } catch (error) {\n      console.error(\"Error updating work item:\", error);\n      res.status(400).json({ error: \"Failed to update work item\" });\n    }\n  });\n\n  // Clear all work items (MUST be before /api/work-items/:id route)\n  app.delete(\"/api/work-items/clear\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      let deletedCount = 0;\n      \n      for (const project of projects) {\n        const workItems = await storage.getWorkItems(project.id);\n        for (const workItem of workItems) {\n          await storage.deleteWorkItem(workItem.id);\n          deletedCount++;\n        }\n      }\n      \n      res.json({ deleted: deletedCount });\n    } catch (error) {\n      console.error(\"Error clearing work items:\", error);\n      res.status(500).json({ error: \"Failed to clear work items database\" });\n    }\n  });\n\n  // Create work material for specific work item\n  app.post(\"/api/work-items/:workItemId/materials\", async (req, res) => {\n    try {\n      const { workItemId } = req.params;\n      const workMaterialData = insertWorkMaterialSchema.parse({\n        ...req.body,\n        workItemId\n      });\n      \n      const workMaterial = await storage.createWorkMaterial(workMaterialData);\n      res.status(201).json(workMaterial);\n    } catch (error) {\n      console.error(\"Error creating work material:\", error);\n      res.status(500).json({ error: \"Failed to create work material\" });\n    }\n  });\n\n  app.delete(\"/api/work-items/:id\", async (req, res) => {\n    try {\n      await storage.deleteWorkItem(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting work item:\", error);\n      res.status(500).json({ error: \"Failed to delete work item\" });\n    }\n  });\n\n  // Work Materials\n  app.get(\"/api/work-items/:workItemId/materials\", async (req, res) => {\n    try {\n      const workMaterials = await storage.getWorkMaterials(req.params.workItemId);\n      res.json(workMaterials);\n    } catch (error) {\n      console.error(\"Error getting work materials:\", error);\n      res.status(500).json({ error: \"Failed to get work materials\" });\n    }\n  });\n\n  app.post(\"/api/work-materials\", async (req, res) => {\n    try {\n      const workMaterialData = insertWorkMaterialSchema.parse(req.body);\n      const workMaterial = await storage.createWorkMaterial(workMaterialData);\n      res.status(201).json(workMaterial);\n    } catch (error) {\n      console.error(\"Error creating work material:\", error);\n      res.status(400).json({ error: \"Failed to create work material\" });\n    }\n  });\n\n  app.put(\"/api/work-materials/:id\", async (req, res) => {\n    try {\n      const workMaterialData = insertWorkMaterialSchema.partial().parse(req.body);\n      const workMaterial = await storage.updateWorkMaterial(req.params.id, workMaterialData);\n      res.json(workMaterial);\n    } catch (error) {\n      console.error(\"Error updating work material:\", error);\n      res.status(400).json({ error: \"Failed to update work material\" });\n    }\n  });\n\n  app.delete(\"/api/work-materials/:id\", async (req, res) => {\n    try {\n      await storage.deleteWorkMaterial(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting work material:\", error);\n      res.status(500).json({ error: \"Failed to delete work material\" });\n    }\n  });\n\n  // Material Import\n  app.post(\"/api/materials/import\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const workbook = XLSX.read(req.file.buffer, { type: \"buffer\" });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      \n      // Convert to JSON, starting from row 2 (skip header)\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { \n        header: 1,\n        defval: null \n      });\n\n      // Skip header row\n      const dataRows = jsonData.slice(1);\n      \n      let importedCount = 0;\n      const errors: string[] = [];\n\n      for (let i = 0; i < dataRows.length; i++) {\n        const row = dataRows[i] as any[];\n        \n        // Skip empty rows\n        if (!row || row.length === 0 || !row[0]) continue;\n\n        try {\n          // Функция для очистки и конвертации русского формата чисел\n          const cleanPrice = (value: any): string => {\n            if (!value) return \"0\";\n            let priceStr = value.toString().trim();\n            \n            // Проверяем на текстовые значения ошибок\n            if (priceStr.toLowerCase().includes('ненайдена') || \n                priceStr.toLowerCase().includes('ошибка') ||\n                priceStr.toLowerCase().includes('error') ||\n                priceStr === '-' || priceStr === '') {\n              return \"0\";\n            }\n            \n            // Удаляем пробелы из чисел (русский формат тысяч)\n            priceStr = priceStr.replace(/\\s+/g, '');\n            // Заменяем запятую на точку (русский десятичный разделитель)\n            priceStr = priceStr.replace(',', '.');\n            \n            // Проверяем, что результат - валидное число\n            const numValue = parseFloat(priceStr);\n            if (isNaN(numValue)) {\n              return \"0\";\n            }\n            \n            return priceStr;\n          };\n\n          // Обновленная структура согласно файлу \"Цены парсер\"\n          const materialData = {\n            name: row[1]?.toString() || \"\", // Наименование (колонка B)\n            unit: row[5]?.toString() || \"шт\", // Единица измерения (колонка F)\n            pricePerUnit: cleanPrice(row[2]), // Цена (колонка C) - как строка для схемы\n            imageUrl: row[3]?.toString() || null, // Ссылка на картинку (колонка D)\n            productUrl: row[4]?.toString() || null, // Ссылка на товар (колонка E)\n            consumptionRate: cleanPrice(row[6]) || null, // Норма расхода (колонка G)\n            consumptionUnit: \"кв.м\", // По умолчанию\n            weightPerUnit: cleanPrice(row[7]) || null, // Вес на единицу (колонка H)\n            weightUnit: \"кг\", // По умолчанию\n            supplier: null,\n            notes: null,\n          };\n\n          // Validate required fields\n          if (!materialData.name || !materialData.unit || !materialData.pricePerUnit) {\n            errors.push(`Строка ${i + 2}: отсутствуют обязательные поля (название, единица измерения, цена)`);\n            continue;\n          }\n\n          const validatedData = insertMaterialSchema.parse(materialData);\n          await storage.createMaterial(validatedData);\n          importedCount++;\n        } catch (error) {\n          errors.push(`Строка ${i + 2}: ${error instanceof Error ? error.message : 'неизвестная ошибка'}`);\n        }\n      }\n\n      if (errors.length > 0) {\n        console.log(\"Import errors:\", errors);\n      }\n\n      res.json({ \n        imported: importedCount, \n        errors: errors.length > 0 ? errors : undefined \n      });\n    } catch (error) {\n      console.error(\"Error importing materials:\", error);\n      res.status(500).json({ error: \"Failed to import materials\" });\n    }\n  });\n\n  // Download template\n  app.get(\"/api/materials/template\", (req, res) => {\n    try {\n      const templateData = [\n        [\n          \"№\", \n          \"Наименование\", \n          \"Цена\", \n          \"Ссылка на картинку\", \n          \"Ссылка на товар\", \n          \"ЕД.ИЗМ\", \n          \"Норма расхода на 1кв.м.\", \n          \"Вес на единицу\"\n        ],\n        [\n          \"1\", \n          \"*1150101001 КЕНДИ КАШТАН 340ML\", \n          \"7153.50\", \n          \"https://lk.teremopt.ru/upload/resize_cache/iblock/\", \n          \"https://lk.teremopt.ru/catalogue/detail.php?ID=12202\", \n          \"шт\", \n          \"1.2\", \n          \"0.5\"\n        ],\n        [\n          \"2\", \n          \"*1160033100 КЕНДИ МОРКОВЬ Мусс\", \n          \"1189.40\", \n          \"https://lk.teremopt.ru/upload/resize_cache/iblock/\", \n          \"https://lk.teremopt.ru/catalogue/detail.php?ID=12243\", \n          \"шт\", \n          \"0.8\", \n          \"0.3\"\n        ]\n      ];\n\n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.aoa_to_sheet(templateData);\n      \n      // Set column widths  \n      worksheet['!cols'] = [\n        { width: 5 },  // №\n        { width: 40 }, // Наименование\n        { width: 15 }, // Цена\n        { width: 35 }, // Ссылка на картинку\n        { width: 35 }, // Ссылка на товар\n        { width: 12 }, // ЕД.ИЗМ\n        { width: 20 }, // Норма расхода\n        { width: 15 }, // Вес на единицу\n      ];\n\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Материалы\");\n      \n      const buffer = XLSX.write(workbook, { \n        type: \"buffer\", \n        bookType: \"xlsx\" \n      });\n\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', 'attachment; filename=template_material_prices.xlsx');\n      res.send(buffer);\n    } catch (error) {\n      console.error(\"Error creating template:\", error);\n      res.status(500).json({ error: \"Failed to create template\" });\n    }\n  });\n\n  // Quick Materials Database Import\n  app.post(\"/api/materials/import-base\", async (req, res) => {\n    try {\n      const baseMaterials = [\n        {\n          name: \"Кирпич керамический\",\n          unit: \"шт\",\n          pricePerUnit: \"12.50\",\n          supplier: \"ООО Стройматериалы\",\n          notes: \"Красный лицевой кирпич\",\n          consumptionRate: \"510\",\n          consumptionUnit: \"шт/м³\",\n          weightPerUnit: \"2.5\",\n          weightUnit: \"кг/шт\"\n        },\n        {\n          name: \"Цемент М400\",\n          unit: \"кг\",\n          pricePerUnit: \"8.50\",\n          supplier: \"Завод ЖБИ-1\",\n          notes: \"Портландцемент\",\n          consumptionRate: \"350\",\n          consumptionUnit: \"кг/м³\"\n        },\n        {\n          name: \"Песок строительный\",\n          unit: \"м³\",\n          pricePerUnit: \"850.00\",\n          supplier: \"Карьер Песок\",\n          notes: \"Мытый песок фракция 0-5мм\",\n          weightPerUnit: \"1.6\",\n          weightUnit: \"т/м³\"\n        },\n        {\n          name: \"Щебень гранитный 5-20\",\n          unit: \"м³\",\n          pricePerUnit: \"1200.00\",\n          supplier: \"Карьер Гранит\",\n          notes: \"Фракция 5-20мм\",\n          weightPerUnit: \"1.4\",\n          weightUnit: \"т/м³\"\n        },\n        {\n          name: \"Арматура А500С Ø12\",\n          unit: \"м\",\n          pricePerUnit: \"45.00\",\n          supplier: \"Металлбаза\",\n          notes: \"Рифленая арматура\",\n          weightPerUnit: \"0.888\",\n          weightUnit: \"кг/м\"\n        },\n        {\n          name: \"Доска обрезная 50×150×6000\",\n          unit: \"м³\",\n          pricePerUnit: \"15000.00\",\n          supplier: \"Лесобаза\",\n          notes: \"Сосна 1 сорт\",\n          weightPerUnit: \"500\",\n          weightUnit: \"кг/м³\"\n        },\n        {\n          name: \"Утеплитель минеральная вата\",\n          unit: \"м³\",\n          pricePerUnit: \"3500.00\",\n          supplier: \"ТеплоСтрой\",\n          notes: \"Плотность 50кг/м³\",\n          weightPerUnit: \"50\",\n          weightUnit: \"кг/м³\"\n        },\n        {\n          name: \"Гипсокартон 12.5мм\",\n          unit: \"м²\",\n          pricePerUnit: \"280.00\",\n          supplier: \"ГипсПром\",\n          notes: \"Стандартный ГКЛ\",\n          weightPerUnit: \"10\",\n          weightUnit: \"кг/м²\"\n        },\n        {\n          name: \"Краска водоэмульсионная\",\n          unit: \"л\",\n          pricePerUnit: \"320.00\",\n          supplier: \"ЛакКрас\",\n          notes: \"Белая матовая\",\n          consumptionRate: \"0.15\",\n          consumptionUnit: \"л/м²\"\n        },\n        {\n          name: \"Плитка керамическая\",\n          unit: \"м²\",\n          pricePerUnit: \"850.00\",\n          supplier: \"КерамПлюс\",\n          notes: \"Настенная 300×300мм\"\n        }\n      ];\n\n      let importedCount = 0;\n      const errors: string[] = [];\n\n      for (const materialData of baseMaterials) {\n        try {\n          const validatedData = insertMaterialSchema.parse(materialData);\n          await storage.createMaterial(validatedData);\n          importedCount++;\n        } catch (error) {\n          errors.push(`${materialData.name}: ${error instanceof Error ? error.message : 'неизвестная ошибка'}`);\n        }\n      }\n\n      res.json({ \n        imported: importedCount, \n        errors: errors.length > 0 ? errors : undefined \n      });\n    } catch (error) {\n      console.error(\"Error importing base materials:\", error);\n      res.status(500).json({ error: \"Failed to import base materials\" });\n    }\n  });\n\n\n\n  // Work Items Import\n  app.post(\"/api/work-items-import\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { projectId } = req.body;\n      if (!projectId) {\n        return res.status(400).json({ error: \"Project ID is required\" });\n      }\n\n      const workbook = XLSX.read(req.file.buffer, { type: \"buffer\" });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      \n      // Convert to JSON, starting from row 2 (skip header)\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { \n        header: 1,\n        defval: null \n      });\n\n      // Skip header row\n      const dataRows = jsonData.slice(1);\n      \n      let importedCount = 0;\n      const errors: string[] = [];\n\n      for (let i = 0; i < dataRows.length; i++) {\n        const row = dataRows[i] as any[];\n        \n        // Skip empty rows\n        if (!row || row.length === 0 || !row[0]) continue;\n\n        try {\n          const workData = {\n            projectId: projectId,\n            name: row[0]?.toString() || \"\",\n            description: row[1]?.toString() || null,\n            unit: row[2]?.toString() || \"\",\n            pricePerUnit: row[3]?.toString() || \"0\",\n            costPrice: row[4]?.toString() || null,\n            volume: row[5]?.toString() || \"0\",\n          };\n\n          // Validate required fields\n          if (!workData.name || !workData.unit || !workData.pricePerUnit) {\n            errors.push(`Строка ${i + 2}: отсутствуют обязательные поля (название, единица измерения, цена)`);\n            continue;\n          }\n\n          const validatedData = insertWorkItemSchema.parse(workData);\n          await storage.createWorkItem(validatedData);\n          importedCount++;\n        } catch (error) {\n          errors.push(`Строка ${i + 2}: ${error instanceof Error ? error.message : 'неизвестная ошибка'}`);\n        }\n      }\n\n      if (errors.length > 0) {\n        console.log(\"Work import errors:\", errors);\n      }\n\n      res.json({ \n        imported: importedCount, \n        errors: errors.length > 0 ? errors : undefined \n      });\n    } catch (error) {\n      console.error(\"Error importing work items:\", error);\n      res.status(500).json({ error: \"Failed to import work items\" });\n    }\n  });\n\n  // Work Items Template Download\n  app.get(\"/api/work-items-template\", (req, res) => {\n    try {\n      const templateData = [\n        [\n          \"Наименование*\", \n          \"Описание\", \n          \"Единица измерения*\", \n          \"Цена за единицу*\", \n          \"Себестоимость\", \n          \"Объём\"\n        ],\n        [\n          \"Кладка кирпичных стен\", \n          \"Кладка наружных стен из керамического кирпича\", \n          \"м³\", \n          \"4500.00\", \n          \"3200.00\", \n          \"12.5\"\n        ],\n        [\n          \"Устройство бетонного пола\", \n          \"Заливка и выравнивание бетонного пола\", \n          \"м²\", \n          \"850.00\", \n          \"620.00\", \n          \"45.2\"\n        ],\n        [\n          \"Монтаж оконных блоков\", \n          \"Установка пластиковых окон\", \n          \"шт\", \n          \"1200.00\", \n          \"950.00\", \n          \"8\"\n        ]\n      ];\n\n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.aoa_to_sheet(templateData);\n      \n      // Set column widths\n      worksheet['!cols'] = [\n        { width: 30 }, // Наименование\n        { width: 40 }, // Описание\n        { width: 20 }, // Единица измерения\n        { width: 20 }, // Цена за единицу\n        { width: 20 }, // Себестоимость\n        { width: 15 }, // Объём\n      ];\n\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Работы\");\n      \n      const buffer = XLSX.write(workbook, { \n        type: \"buffer\", \n        bookType: \"xlsx\" \n      });\n\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', 'attachment; filename=template_works.xlsx');\n      res.send(buffer);\n    } catch (error) {\n      console.error(\"Error creating work template:\", error);\n      res.status(500).json({ error: \"Failed to create work template\" });\n    }\n  });\n\n  // Hierarchical Work Structure API\n  \n  // Get hierarchical structure\n  // Интеграция работ с материалами\napp.post(\"/api/projects/:projectId/sync-hierarchy\", async (req, res) => {\n  try {\n    const { projectId } = req.params;\n    const { syncWorksWithHierarchy, linkWorksToMaterials } = await import(\"./work-integration\");\n    \n    // Синхронизируем работы с иерархической структурой\n    const syncResults = await syncWorksWithHierarchy(projectId);\n    \n    // Привязываем материалы к работам\n    const linkResults = await linkWorksToMaterials(projectId);\n    \n    res.json({\n      message: \"Синхронизация завершена\",\n      syncedWorks: syncResults.length,\n      linkedWorks: linkResults.length,\n      details: {\n        sync: syncResults,\n        links: linkResults\n      }\n    });\n  } catch (error) {\n    console.error(\"Sync hierarchy error:\", error);\n    res.status(500).json({ error: \"Ошибка синхронизации с иерархией\" });\n  }\n});\n\napp.get(\"/api/hierarchy\", async (req, res) => {\n    try {\n      const structure = await storage.getHierarchicalStructure();\n      res.json(structure);\n    } catch (error) {\n      console.error(\"Error getting hierarchical structure:\", error);\n      res.status(500).json({ error: \"Failed to get hierarchical structure\" });\n    }\n  });\n\n  // Import hierarchical structure from Excel\n  app.post(\"/api/hierarchy/import\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const result = await importHierarchicalStructure(req.file.buffer);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error importing hierarchical structure:\", error);\n      res.status(500).json({ error: \"Failed to import hierarchical structure\" });\n    }\n  });\n\n  // Clear hierarchy data\n  app.delete(\"/api/hierarchy/clear\", async (req, res) => {\n    try {\n      // Delete all tasks first (due to foreign key constraints)\n      const tasks = await storage.getTasks();\n      for (const task of tasks) {\n        await storage.deleteTask(task.id);\n      }\n\n      // Then delete all sections\n      const sections = await storage.getSections();\n      for (const section of sections) {\n        await storage.deleteSection(section.id);\n      }\n\n      res.json({ message: \"Hierarchical structure cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing hierarchy:\", error);\n      res.status(500).json({ error: \"Failed to clear hierarchical structure\" });\n    }\n  });\n\n  // Update task cost price\n  app.patch(\"/api/hierarchy/tasks/:id\", async (req, res) => {\n    try {\n      const { costPrice } = req.body;\n      \n      if (costPrice === undefined || costPrice === null) {\n        return res.status(400).json({ error: \"costPrice is required\" });\n      }\n\n      const task = await storage.updateTask(req.params.id, { costPrice });\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ error: \"Failed to update task\" });\n    }\n  });\n\n  // Update task area configuration\n  app.patch(\"/api/hierarchy/tasks/:id/area-config\", async (req, res) => {\n    try {\n      const { areaType, autoFillFromArea, areaMultiplier } = req.body;\n      \n      const updateData: any = {};\n      if (areaType !== undefined) updateData.areaType = areaType;\n      if (autoFillFromArea !== undefined) updateData.autoFillFromArea = autoFillFromArea;\n      if (areaMultiplier !== undefined) updateData.areaMultiplier = areaMultiplier.toString();\n      \n      if (Object.keys(updateData).length === 0) {\n        return res.status(400).json({ error: \"No area configuration data provided\" });\n      }\n\n      const task = await storage.updateTask(req.params.id, updateData);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task area config:\", error);\n      res.status(500).json({ error: \"Failed to update task area configuration\" });\n    }\n  });\n\n  // Download hierarchical template\n  app.get(\"/api/hierarchy/template\", (req, res) => {\n    try {\n      const templateData = [\n        [\n          \"№\", \n          \"Шифр\", \n          \"Наименование работ и затрат\", \n          \"Ед. изм.\", \n          \"Себестоимость\"\n        ],\n        [\n          \"1\", \n          \"1-\", \n          \"Земляные работы\", \n          \"\", \n          \"\"\n        ],\n        [\n          \"2\", \n          \"1.1\", \n          \"Разработка грунта вручную\", \n          \"м³\", \n          \"145.50\"\n        ],\n        [\n          \"3\", \n          \"1.2\", \n          \"Планировка площадей\", \n          \"м²\", \n          \"12.30\"\n        ],\n        [\n          \"4\", \n          \"1.3\", \n          \"Засыпка траншей\", \n          \"м³\", \n          \"89.75\"\n        ],\n        [\n          \"5\", \n          \"2-\", \n          \"Фундаменты\", \n          \"\", \n          \"\"\n        ],\n        [\n          \"6\", \n          \"2.1\", \n          \"Устройство бетонной подготовки\", \n          \"м³\", \n          \"1245.60\"\n        ],\n        [\n          \"7\", \n          \"2.2\", \n          \"Устройство ленточных фундаментов\", \n          \"м³\", \n          \"2145.80\"\n        ],\n        [\n          \"8\", \n          \"2.3\", \n          \"Гидроизоляция фундаментов\", \n          \"м²\", \n          \"125.40\"\n        ],\n        [\n          \"9\", \n          \"3-\", \n          \"Стены\", \n          \"\", \n          \"\"\n        ],\n        [\n          \"10\", \n          \"3.1-\", \n          \"Кирпичная кладка\", \n          \"\", \n          \"\"\n        ],\n        [\n          \"11\", \n          \"3.1.1\", \n          \"Кладка стен из кирпича\", \n          \"м³\", \n          \"3250.00\"\n        ],\n        [\n          \"12\", \n          \"3.1.2\", \n          \"Расшивка швов\", \n          \"м²\", \n          \"45.80\"\n        ],\n        [\n          \"13\", \n          \"3.2-\", \n          \"Монолитные работы\", \n          \"\", \n          \"\"\n        ],\n        [\n          \"14\", \n          \"3.2.1\", \n          \"Устройство монолитных стен\", \n          \"м³\", \n          \"2890.50\"\n        ],\n        [\n          \"15\", \n          \"3.2.2\", \n          \"Установка арматуры\", \n          \"т\", \n          \"12500.00\"\n        ]\n      ];\n\n      // Создаём шаблон в том же формате, что и пользовательские данные\n      // Поддерживаем и Excel и CSV форматы\n      const format = req.query.format as string || 'csv';\n      \n      if (format === 'excel') {\n        // Excel формат\n        const workbook = XLSX.utils.book_new();\n        const worksheet = XLSX.utils.aoa_to_sheet(templateData);\n        \n        // Set column widths\n        worksheet['!cols'] = [\n          { width: 8 },  // №\n          { width: 12 }, // Шифр\n          { width: 50 }, // Наименование\n          { width: 15 }, // Ед. изм.\n          { width: 15 }, // Себестоимость\n        ];\n\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Иерархическая структура\");\n        \n        const buffer = XLSX.write(workbook, { \n          type: \"buffer\", \n          bookType: \"xlsx\" \n        });\n\n        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        res.setHeader('Content-Disposition', 'attachment; filename=template_hierarchy.xlsx');\n        res.send(buffer);\n      } else {\n        // CSV формат с точкой с запятой (стандарт для русской локализации)\n        const csvContent = templateData.map(row => row.map(cell => {\n          // Экранируем ячейки с точками с запятой или кавычками\n          if (cell.includes(';') || cell.includes('\"') || cell.includes('\\n')) {\n            return '\"' + cell.replace(/\"/g, '\"\"') + '\"';\n          }\n          return cell;\n        }).join(';')).join('\\n');\n\n        res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n        res.setHeader('Content-Disposition', 'attachment; filename=template_hierarchy.csv');\n        res.send('\\uFEFF' + csvContent); // Добавляем BOM для правильной кодировки UTF-8\n      }\n    } catch (error) {\n      console.error(\"Error creating hierarchy template:\", error);\n      res.status(500).json({ error: \"Failed to create hierarchy template\" });\n    }\n  });\n\n  // Sections CRUD\n  app.get(\"/api/sections\", async (req, res) => {\n    try {\n      const sections = await storage.getSections();\n      res.json(sections);\n    } catch (error) {\n      console.error(\"Error getting sections:\", error);\n      res.status(500).json({ error: \"Failed to get sections\" });\n    }\n  });\n\n  app.post(\"/api/sections\", async (req, res) => {\n    try {\n      const validatedData = insertSectionSchema.parse(req.body);\n      const section = await storage.createSection(validatedData);\n      res.json(section);\n    } catch (error) {\n      console.error(\"Error creating section:\", error);\n      res.status(500).json({ error: \"Failed to create section\" });\n    }\n  });\n\n  app.put(\"/api/sections/:id\", async (req, res) => {\n    try {\n      const validatedData = insertSectionSchema.partial().parse(req.body);\n      const section = await storage.updateSection(req.params.id, validatedData);\n      res.json(section);\n    } catch (error) {\n      console.error(\"Error updating section:\", error);\n      res.status(500).json({ error: \"Failed to update section\" });\n    }\n  });\n\n  app.delete(\"/api/sections/:id\", async (req, res) => {\n    try {\n      await storage.deleteSection(req.params.id);\n      res.json({ message: \"Section deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting section:\", error);\n      res.status(500).json({ error: \"Failed to delete section\" });\n    }\n  });\n\n  // Tasks CRUD\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error getting tasks:\", error);\n      res.status(500).json({ error: \"Failed to get tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ error: \"Failed to create task\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(req.params.id, validatedData);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ error: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      await storage.deleteTask(req.params.id);\n      res.json({ message: \"Task deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // Массовое обновление себестоимости работ\n  app.patch(\"/api/hierarchy/bulk-update\", async (req, res) => {\n    try {\n      const { coefficient } = req.body;\n      \n      if (!coefficient || typeof coefficient !== 'number' || coefficient <= 0) {\n        return res.status(400).json({ error: \"Coefficient must be a positive number\" });\n      }\n\n      // Получаем все работы с себестоимостью\n      const allTasks = await db.select().from(tasks).where(isNotNull(tasks.costPrice));\n      \n      let updated = 0;\n      \n      // Обновляем каждую работу\n      for (const task of allTasks) {\n        if (task.costPrice) {\n          const currentPrice = parseFloat(task.costPrice);\n          if (!isNaN(currentPrice)) {\n            const newPrice = (currentPrice * coefficient / 100).toFixed(2);\n            \n            await db\n              .update(tasks)\n              .set({ costPrice: newPrice })\n              .where(eq(tasks.id, task.id));\n            \n            updated++;\n          }\n        }\n      }\n\n      console.log(`Bulk update completed: ${updated} tasks updated with coefficient ${coefficient}%`);\n      \n      res.json({ \n        message: \"Bulk update completed successfully\",\n        updated,\n        coefficient \n      });\n    } catch (error) {\n      console.error(\"Error in bulk update:\", error);\n      res.status(500).json({ error: \"Failed to perform bulk update\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":37799},"server/storage.ts":{"content":"import { \n  projects, \n  materials, \n  workItems, \n  workMaterials,\n  sections,\n  tasks,\n  type Project, \n  type InsertProject,\n  type Material,\n  type InsertMaterial,\n  type WorkItem,\n  type InsertWorkItem,\n  type WorkMaterial,\n  type InsertWorkMaterial,\n  type Section,\n  type InsertSection,\n  type Task,\n  type InsertTask,\n  type ProjectWithWorkItems,\n  type WorkItemWithMaterials,\n  type SectionWithChildren,\n  type HierarchicalWorkStructure\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Projects\n  getProjects(): Promise<Project[]>;\n  getProject(id: string): Promise<ProjectWithWorkItems | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n\n  // Materials\n  getMaterials(): Promise<Material[]>;\n  getMaterial(id: string): Promise<Material | undefined>;\n  createMaterial(material: InsertMaterial): Promise<Material>;\n  updateMaterial(id: string, material: Partial<InsertMaterial>): Promise<Material>;\n  deleteMaterial(id: string): Promise<void>;\n\n  // Work Items\n  getWorkItems(projectId: string): Promise<WorkItemWithMaterials[]>;\n  getWorkItem(id: string): Promise<WorkItemWithMaterials | undefined>;\n  createWorkItem(workItem: InsertWorkItem): Promise<WorkItem>;\n  updateWorkItem(id: string, workItem: Partial<InsertWorkItem>): Promise<WorkItem>;\n  deleteWorkItem(id: string): Promise<void>;\n\n  // Work Materials\n  getWorkMaterials(workItemId: string): Promise<(WorkMaterial & { material: Material })[]>;\n  createWorkMaterial(workMaterial: InsertWorkMaterial): Promise<WorkMaterial>;\n  updateWorkMaterial(id: string, workMaterial: Partial<InsertWorkMaterial>): Promise<WorkMaterial>;\n  deleteWorkMaterial(id: string): Promise<void>;\n\n  // Hierarchical Work Structure\n  getSections(): Promise<Section[]>;\n  getSection(id: string): Promise<Section | undefined>;\n  createSection(section: InsertSection): Promise<Section>;\n  updateSection(id: string, section: Partial<InsertSection>): Promise<Section>;\n  deleteSection(id: string): Promise<void>;\n  \n  getTasks(): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  \n  getHierarchicalStructure(): Promise<HierarchicalWorkStructure>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Projects\n  async getProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(desc(projects.updatedAt));\n  }\n\n  async getProject(id: string): Promise<ProjectWithWorkItems | undefined> {\n    const project = await db.query.projects.findFirst({\n      where: eq(projects.id, id),\n      with: {\n        workItems: {\n          with: {\n            workMaterials: {\n              with: {\n                material: true\n              }\n            }\n          }\n        }\n      }\n    });\n    return project as ProjectWithWorkItems | undefined;\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const [project] = await db\n      .insert(projects)\n      .values({ ...insertProject, updatedAt: new Date() })\n      .returning();\n    return project;\n  }\n\n  async updateProject(id: string, updateProject: Partial<InsertProject>): Promise<Project> {\n    const [project] = await db\n      .update(projects)\n      .set({ ...updateProject, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return project;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  // Materials\n  async getMaterials(): Promise<Material[]> {\n    return await db.select().from(materials).orderBy(materials.name);\n  }\n\n  async getMaterial(id: string): Promise<Material | undefined> {\n    const [material] = await db.select().from(materials).where(eq(materials.id, id));\n    return material || undefined;\n  }\n\n  async createMaterial(insertMaterial: InsertMaterial): Promise<Material> {\n    const [material] = await db\n      .insert(materials)\n      .values({ ...insertMaterial, updatedAt: new Date() })\n      .returning();\n    return material;\n  }\n\n  async updateMaterial(id: string, updateMaterial: Partial<InsertMaterial>): Promise<Material> {\n    const [material] = await db\n      .update(materials)\n      .set({ ...updateMaterial, updatedAt: new Date() })\n      .where(eq(materials.id, id))\n      .returning();\n    return material;\n  }\n\n  async deleteMaterial(id: string): Promise<void> {\n    await db.delete(materials).where(eq(materials.id, id));\n  }\n\n  // Work Items\n  async getWorkItems(projectId: string): Promise<WorkItemWithMaterials[]> {\n    const items = await db.query.workItems.findMany({\n      where: eq(workItems.projectId, projectId),\n      with: {\n        workMaterials: {\n          with: {\n            material: true\n          }\n        }\n      }\n    });\n    return items as WorkItemWithMaterials[];\n  }\n\n  async getWorkItem(id: string): Promise<WorkItemWithMaterials | undefined> {\n    const item = await db.query.workItems.findFirst({\n      where: eq(workItems.id, id),\n      with: {\n        workMaterials: {\n          with: {\n            material: true\n          }\n        }\n      }\n    });\n    return item as WorkItemWithMaterials | undefined;\n  }\n\n  async createWorkItem(insertWorkItem: InsertWorkItem): Promise<WorkItem> {\n    const [workItem] = await db\n      .insert(workItems)\n      .values({ ...insertWorkItem, updatedAt: new Date() })\n      .returning();\n    return workItem;\n  }\n\n  async updateWorkItem(id: string, updateWorkItem: Partial<InsertWorkItem>): Promise<WorkItem> {\n    const [workItem] = await db\n      .update(workItems)\n      .set({ ...updateWorkItem, updatedAt: new Date() })\n      .where(eq(workItems.id, id))\n      .returning();\n    return workItem;\n  }\n\n  async deleteWorkItem(id: string): Promise<void> {\n    await db.delete(workItems).where(eq(workItems.id, id));\n  }\n\n  // Work Materials\n  async getWorkMaterials(workItemId: string): Promise<(WorkMaterial & { material: Material })[]> {\n    const materials = await db.query.workMaterials.findMany({\n      where: eq(workMaterials.workItemId, workItemId),\n      with: {\n        material: true\n      }\n    });\n    return materials as (WorkMaterial & { material: Material })[];\n  }\n\n  async createWorkMaterial(insertWorkMaterial: InsertWorkMaterial): Promise<WorkMaterial> {\n    const [workMaterial] = await db\n      .insert(workMaterials)\n      .values(insertWorkMaterial)\n      .returning();\n    return workMaterial;\n  }\n\n  async updateWorkMaterial(id: string, updateWorkMaterial: Partial<InsertWorkMaterial>): Promise<WorkMaterial> {\n    const [workMaterial] = await db\n      .update(workMaterials)\n      .set(updateWorkMaterial)\n      .where(eq(workMaterials.id, id))\n      .returning();\n    return workMaterial;\n  }\n\n  async deleteWorkMaterial(id: string): Promise<void> {\n    await db.delete(workMaterials).where(eq(workMaterials.id, id));\n  }\n\n  // Hierarchical Work Structure\n  async getSections(): Promise<Section[]> {\n    return await db.select().from(sections).orderBy(sections.orderNum);\n  }\n\n  async getSection(id: string): Promise<Section | undefined> {\n    const [section] = await db.select().from(sections).where(eq(sections.id, id));\n    return section;\n  }\n\n  async createSection(insertSection: InsertSection): Promise<Section> {\n    const [section] = await db\n      .insert(sections)\n      .values({ ...insertSection, updatedAt: new Date() })\n      .returning();\n    return section;\n  }\n\n  async updateSection(id: string, updateSection: Partial<InsertSection>): Promise<Section> {\n    const [section] = await db\n      .update(sections)\n      .set({ ...updateSection, updatedAt: new Date() })\n      .where(eq(sections.id, id))\n      .returning();\n    return section;\n  }\n\n  async deleteSection(id: string): Promise<void> {\n    await db.delete(sections).where(eq(sections.id, id));\n  }\n\n  async getTasks(): Promise<Task[]> {\n    return await db.select().from(tasks).orderBy(tasks.orderNum);\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task;\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const [task] = await db\n      .insert(tasks)\n      .values({ ...insertTask, updatedAt: new Date() })\n      .returning();\n    return task;\n  }\n\n  async updateTask(id: string, updateTask: Partial<InsertTask>): Promise<Task> {\n    const [task] = await db\n      .update(tasks)\n      .set({ ...updateTask, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  async getHierarchicalStructure(): Promise<HierarchicalWorkStructure> {\n    // Получаем все разделы и задачи отдельно\n    const allSections = await this.getSections();\n    const allTasks = await this.getTasks();\n    \n    // Строим иерархию программно\n    const sectionMap = new Map<string, any>();\n    \n    // Создаем карту всех разделов\n    allSections.forEach(section => {\n      sectionMap.set(section.id, {\n        ...section,\n        children: [],\n        tasks: []\n      });\n    });\n    \n    // Добавляем задачи к соответствующим разделам\n    allTasks.forEach(task => {\n      const parentSection = sectionMap.get(task.parentSectionId);\n      if (parentSection) {\n        parentSection.tasks.push(task);\n      }\n    });\n    \n    // Строим дерево разделов\n    const rootSections: any[] = [];\n    allSections.forEach(section => {\n      const sectionWithChildren = sectionMap.get(section.id);\n      if (!section.parentId) {\n        rootSections.push(sectionWithChildren);\n      } else {\n        const parent = sectionMap.get(section.parentId);\n        if (parent) {\n          parent.children.push(sectionWithChildren);\n        }\n      }\n    });\n    \n    // Сортируем по orderNum\n    const sortByOrder = (items: any[]) => {\n      items.sort((a, b) => a.orderNum - b.orderNum);\n      items.forEach(item => {\n        if (item.children) sortByOrder(item.children);\n        if (item.tasks) item.tasks.sort((a: any, b: any) => a.orderNum - b.orderNum);\n      });\n    };\n    \n    sortByOrder(rootSections);\n    \n    return {\n      sections: rootSections,\n      totalSections: allSections.length,\n      totalTasks: allTasks.length,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10724},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const materials = pgTable(\"materials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  unit: text(\"unit\").notNull(), // м², м³, шт, т, кг\n  pricePerUnit: decimal(\"price_per_unit\", { precision: 10, scale: 2 }).notNull(),\n  supplier: text(\"supplier\"),\n  notes: text(\"notes\"),\n  imageUrl: text(\"image_url\"), // ссылка на картинку\n  productUrl: text(\"product_url\"), // ссылка на товар\n  consumptionRate: decimal(\"consumption_rate\", { precision: 10, scale: 3 }), // расход на единицу измерения\n  consumptionUnit: text(\"consumption_unit\"), // единица измерения расхода\n  weightPerUnit: decimal(\"weight_per_unit\", { precision: 10, scale: 3 }), // вес за шт/м.пог и т.д\n  weightUnit: text(\"weight_unit\"), // единица измерения веса (кг/шт, кг/м и т.д)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const workItems = pgTable(\"work_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  unit: text(\"unit\").notNull(), // м², м³, шт, т, кг\n  pricePerUnit: decimal(\"price_per_unit\", { precision: 10, scale: 2 }).notNull(),\n  costPrice: decimal(\"cost_price\", { precision: 10, scale: 2 }),\n  volume: decimal(\"volume\", { precision: 10, scale: 3 }).default(\"0\"),\n  workCode: text(\"work_code\"), // Код работы для связи с иерархической структурой (например: 2.9, 2.10)\n  sectionName: text(\"section_name\"), // Название раздела работ\n  hierarchyTaskId: varchar(\"hierarchy_task_id\"), // Связь с таблицей tasks из иерархии\n  // Новые поля для автоматической привязки площадей\n  areaType: text(\"area_type\"), // пол, потолок, стены, окна, двери, ручной\n  autoFillFromArea: boolean(\"auto_fill_from_area\").default(false), // автоматически заполнять объем из площадей\n  areaMultiplier: decimal(\"area_multiplier\", { precision: 10, scale: 3 }).default(\"1.0\"), // коэффициент для расчета\n  roomFilter: jsonb(\"room_filter\"), // фильтр комнат для применения (null = все комнаты)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const workMaterials = pgTable(\"work_materials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  workItemId: varchar(\"work_item_id\").notNull().references(() => workItems.id, { onDelete: \"cascade\" }),\n  materialId: varchar(\"material_id\").notNull().references(() => materials.id, { onDelete: \"cascade\" }),\n  consumptionNorm: decimal(\"consumption_norm\", { precision: 10, scale: 6 }).notNull(), // расход на единицу работы\n  consumptionUnit: text(\"consumption_unit\").notNull(), // единица расхода (шт/м³, м³/м², т/м³)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const projectsRelations = relations(projects, ({ many }) => ({\n  workItems: many(workItems),\n}));\n\nexport const workItemsRelations = relations(workItems, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [workItems.projectId],\n    references: [projects.id],\n  }),\n  workMaterials: many(workMaterials),\n}));\n\nexport const materialsRelations = relations(materials, ({ many }) => ({\n  workMaterials: many(workMaterials),\n}));\n\nexport const workMaterialsRelations = relations(workMaterials, ({ one }) => ({\n  workItem: one(workItems, {\n    fields: [workMaterials.workItemId],\n    references: [workItems.id],\n  }),\n  material: one(materials, {\n    fields: [workMaterials.materialId],\n    references: [materials.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMaterialSchema = createInsertSchema(materials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWorkItemSchema = createInsertSchema(workItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWorkMaterialSchema = createInsertSchema(workMaterials).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type Material = typeof materials.$inferSelect;\nexport type InsertMaterial = z.infer<typeof insertMaterialSchema>;\n\nexport type WorkItem = typeof workItems.$inferSelect;\nexport type InsertWorkItem = z.infer<typeof insertWorkItemSchema>;\n\nexport type WorkMaterial = typeof workMaterials.$inferSelect;\nexport type InsertWorkMaterial = z.infer<typeof insertWorkMaterialSchema>;\n\n// Extended types with relations\nexport type ProjectWithWorkItems = Project & {\n  workItems: (WorkItem & {\n    workMaterials: (WorkMaterial & {\n      material: Material;\n    })[];\n  })[];\n};\n\nexport type WorkItemWithMaterials = WorkItem & {\n  workMaterials: (WorkMaterial & {\n    material: Material;\n  })[];\n};\n\n// Hierarchical work structure tables\nexport const sections: any = pgTable(\"sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  index: text(\"index\").notNull(), // хранится без минуса (например: \"6\", \"6.1\")\n  displayIndex: text(\"display_index\").notNull(), // для отображения (например: \"6-\", \"6.1-\")\n  title: text(\"title\").notNull(),\n  parentId: varchar(\"parent_id\").references(() => sections.id, { onDelete: \"cascade\" }),\n  orderNum: integer(\"order_num\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  index: text(\"index\").notNull(), // например: \"6.1.1\"\n  displayIndex: text(\"display_index\").notNull(), // например: \"6.1.1\"\n  title: text(\"title\").notNull(),\n  unit: text(\"unit\").notNull(), // единица измерения (м², м.п., шт и т.п.)\n  costPrice: decimal(\"cost_price\", { precision: 10, scale: 2 }).notNull(), // себестоимость за единицу (основное поле)\n  parentSectionId: varchar(\"parent_section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  orderNum: integer(\"order_num\").notNull(),\n  // Новые поля для привязки к площадям\n  areaType: text(\"area_type\"), // пол, потолок, стены, окна, двери, ручной\n  autoFillFromArea: boolean(\"auto_fill_from_area\").default(false), // автоматически заполнять объем из площадей\n  areaMultiplier: decimal(\"area_multiplier\", { precision: 10, scale: 3 }).default(\"1.0\"), // коэффициент для расчета (например, 1.05 для запаса)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Relations for hierarchical structure\nexport const sectionsRelations = relations(sections, ({ one, many }): any => ({\n  parent: one(sections, {\n    fields: [sections.parentId],\n    references: [sections.id],\n    relationName: \"children\",\n  }),\n  children: many(sections, {\n    relationName: \"children\",\n  }),\n  tasks: many(tasks),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one }) => ({\n  parentSection: one(sections, {\n    fields: [tasks.parentSectionId],\n    references: [sections.id],\n  }),\n}));\n\n// Hierarchical types\nexport type Section = typeof sections.$inferSelect;\nexport type InsertSection = typeof sections.$inferInsert;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = typeof tasks.$inferInsert;\n\nexport type HierarchicalWorkStructure = {\n  sections: Section[];\n  totalSections: number;\n  totalTasks: number;\n};\n\n// New schemas (must be defined before types that reference them)\nexport const insertSectionSchema = createInsertSchema(sections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// New types for hierarchical structure\nexport type Section = typeof sections.$inferSelect;\nexport type InsertSection = z.infer<typeof insertSectionSchema>;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport type SectionWithChildren = Section & {\n  children: SectionWithChildren[];\n  tasks: Task[];\n};\n\nexport type HierarchicalWorkStructure = {\n  sections: SectionWithChildren[];\n  totalSections: number;\n  totalTasks: number;\n};\n\n// Types for area-to-work linking system\nexport type AreaType = \"пол\" | \"потолок\" | \"стены\" | \"окна\" | \"двери\" | \"ручной\";\n\nexport interface RoomAreas {\n  floorArea: number;\n  ceilingArea: number;\n  wallArea: number;\n  windowArea: number;\n  doorArea: number;\n  perimeter: number;\n}\n\nexport interface ProjectAreas {\n  totalFloorArea: number;\n  totalCeilingArea: number;\n  totalWallArea: number;\n  totalWindowArea: number;\n  totalDoorArea: number;\n  totalPerimeter: number;\n  roomsData: RoomAreas[];\n}\n","size_bytes":10213},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { UndoRedoProvider } from \"@/contexts/UndoRedoContext\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <UndoRedoProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </UndoRedoProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1010},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(210 79% 46%);\n  --primary-dark: hsl(211 85% 38%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(45 93% 47%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(210 79% 46%);\n  --destructive: hsl(4 90% 58%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --success: hsl(123 38% 57%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(36 100% 50%);\n  --warning-foreground: hsl(0 0% 100%);\n  --error: hsl(4 90% 58%);\n  --error-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(210 79% 46%);\n  --surface: hsl(0 0% 98%);\n  --surface-dark: hsl(0 0% 13%);\n  --on-surface: hsl(210 25% 7.8431%);\n  --on-surface-dark: hsl(0 0% 98%);\n  --chart-1: hsl(210 79% 46%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(210 79% 46%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(210 79% 46%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(210 79% 46%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(210 79% 46%);\n  --primary-dark: hsl(211 85% 38%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(210 79% 46%);\n  --destructive: hsl(4 90% 58%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --success: hsl(123 38% 57%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(36 100% 50%);\n  --warning-foreground: hsl(0 0% 100%);\n  --error: hsl(4 90% 58%);\n  --error-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(210 79% 46%);\n  --surface: hsl(0 0% 98%);\n  --surface-dark: hsl(0 0% 13%);\n  --on-surface: hsl(210 25% 7.8431%);\n  --on-surface-dark: hsl(0 0% 98%);\n  --chart-1: hsl(210 79% 46%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(210 79% 46%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(210 79% 46%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(210 79% 46%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .text-primary {\n    color: hsl(var(--primary));\n  }\n  \n  .text-primary-dark {\n    color: hsl(var(--primary-dark));\n  }\n  \n  .text-secondary {\n    color: hsl(var(--secondary));\n  }\n  \n  .text-success {\n    color: hsl(var(--success));\n  }\n  \n  .text-warning {\n    color: hsl(var(--warning));\n  }\n  \n  .text-error {\n    color: hsl(var(--error));\n  }\n  \n  .bg-primary {\n    background-color: hsl(var(--primary));\n  }\n  \n  .bg-primary-dark {\n    background-color: hsl(var(--primary-dark));\n  }\n  \n  .bg-surface {\n    background-color: hsl(var(--surface));\n  }\n  \n  .bg-surface-dark {\n    background-color: hsl(var(--surface-dark));\n  }\n  \n  .bg-success {\n    background-color: hsl(var(--success));\n  }\n  \n  .bg-error {\n    background-color: hsl(var(--error));\n  }\n  \n  .hover\\:bg-primary-dark:hover {\n    background-color: hsl(var(--primary-dark));\n  }\n}\n","size_bytes":4842},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/header.tsx":{"content":"import { useTheme } from \"./theme-provider\";\nimport { Moon, Sun, Calculator } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Project } from \"@shared/schema\";\n\ninterface HeaderProps {\n  currentProject: Project | null;\n  onProjectChange: (projectId: string) => void;\n}\n\nexport function Header({ currentProject, onProjectChange }: HeaderProps) {\n  const { theme, toggleTheme } = useTheme();\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50\">\n      <div className=\"max-w-full px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calculator className=\"h-8 w-8 text-primary\" />\n              <h1 className=\"text-xl font-bold text-primary\">СметаПро</h1>\n            </div>\n            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n              Система расчёта строительных смет\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Project Selector */}\n            <Select\n              value={currentProject?.id || \"\"}\n              onValueChange={onProjectChange}\n            >\n              <SelectTrigger className=\"w-[250px]\">\n                <SelectValue placeholder=\"Выберите проект\" />\n              </SelectTrigger>\n              <SelectContent>\n                {projects.map((project) => (\n                  <SelectItem key={project.id} value={project.id}>\n                    Проект: {project.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"hover:bg-gray-100 dark:hover:bg-gray-700\"\n            >\n              {theme === \"light\" ? (\n                <Moon className=\"h-5 w-5\" />\n              ) : (\n                <Sun className=\"h-5 w-5\" />\n              )}\n            </Button>\n\n            {/* User Menu */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                <span>ИП</span>\n              </div>\n              <span className=\"text-sm font-medium\">Иван Петров</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2906},"client/src/components/material-edit-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Package } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertMaterialSchema } from \"@shared/schema\";\nimport type { InsertMaterial, Material } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst materialFormSchema = insertMaterialSchema.extend({\n  pricePerUnit: z.string().min(1, \"Цена за единицу обязательна\"),\n  consumptionRate: z.string().optional(),\n  weightPerUnit: z.string().optional(),\n});\n\ntype MaterialFormData = z.infer<typeof materialFormSchema>;\n\nconst unitOptions = [\n  { value: \"м²\", label: \"м² - квадратный метр\" },\n  { value: \"м³\", label: \"м³ - кубический метр\" },\n  { value: \"м\", label: \"м - погонный метр\" },\n  { value: \"шт\", label: \"шт - штука\" },\n  { value: \"т\", label: \"т - тонна\" },\n  { value: \"кг\", label: \"кг - килограмм\" },\n  { value: \"л\", label: \"л - литр\" },\n  { value: \"м²\", label: \"м² - квадратный метр\" },\n  { value: \"упак\", label: \"упак - упаковка\" },\n];\n\ninterface MaterialEditModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingMaterial?: Material | null;\n}\n\nexport function MaterialEditModal({ isOpen, onClose, editingMaterial }: MaterialEditModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<MaterialFormData>({\n    resolver: zodResolver(materialFormSchema),\n    defaultValues: {\n      name: editingMaterial?.name || \"\",\n      unit: editingMaterial?.unit || \"\",\n      pricePerUnit: editingMaterial?.pricePerUnit || \"\",\n      supplier: editingMaterial?.supplier || \"\",\n      notes: editingMaterial?.notes || \"\",\n      imageUrl: editingMaterial?.imageUrl || \"\",\n      productUrl: editingMaterial?.productUrl || \"\",\n      consumptionRate: editingMaterial?.consumptionRate || \"\",\n      consumptionUnit: editingMaterial?.consumptionUnit || \"\",\n      weightPerUnit: editingMaterial?.weightPerUnit || \"\",\n      weightUnit: editingMaterial?.weightUnit || \"\",\n    },\n  });\n\n  const createMaterialMutation = useMutation({\n    mutationFn: async (data: InsertMaterial) => {\n      return apiRequest(\"POST\", \"/api/materials\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Материал создан\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось создать материал\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMaterialMutation = useMutation({\n    mutationFn: async (data: Partial<InsertMaterial>) => {\n      return apiRequest(\"PUT\", `/api/materials/${editingMaterial?.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Материал обновлен\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить материал\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: MaterialFormData) => {\n    const materialData: InsertMaterial = {\n      name: data.name,\n      unit: data.unit,\n      pricePerUnit: data.pricePerUnit,\n      supplier: data.supplier || null,\n      notes: data.notes || null,\n      imageUrl: data.imageUrl || null,\n      productUrl: data.productUrl || null,\n      consumptionRate: data.consumptionRate || null,\n      consumptionUnit: data.consumptionUnit || null,\n      weightPerUnit: data.weightPerUnit || null,\n      weightUnit: data.weightUnit || null,\n    };\n\n    if (editingMaterial) {\n      updateMaterialMutation.mutate(materialData);\n    } else {\n      createMaterialMutation.mutate(materialData);\n    }\n  };\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Package className=\"h-5 w-5 text-primary\" />\n            <span>{editingMaterial ? \"Редактировать материал\" : \"Добавить материал\"}</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Наименование материала *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Например: Кирпич керамический\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Единица измерения *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Выберите единицу\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {unitOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"pricePerUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Цена за единицу (₽) *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"imageUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ссылка на картинку</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"url\"\n                        placeholder=\"https://example.com/image.jpg\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"productUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ссылка на товар</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"url\"\n                        placeholder=\"https://shop.com/product\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"consumptionRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Расход на единицу измерения</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.001\"\n                        placeholder=\"0.000\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"consumptionUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Единица измерения расхода</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"например: шт/м², кг/м³\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"weightPerUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Вес за единицу</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.001\"\n                        placeholder=\"0.000\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"weightUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Единица измерения веса</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"например: кг/шт, кг/м\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"supplier\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Поставщик</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Название поставщика\"\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Примечания</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Дополнительная информация о материале\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Отмена\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMaterialMutation.isPending || updateMaterialMutation.isPending}\n                className=\"bg-primary hover:bg-primary-dark text-white\"\n              >\n                {editingMaterial ? \"Обновить\" : \"Сохранить\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13800},"client/src/components/material-import-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Upload, FileSpreadsheet, Download, AlertCircle } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MaterialImportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function MaterialImportModal({ isOpen, onClose }: MaterialImportModalProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      \n      const response = await fetch(\"/api/materials/import\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Ошибка загрузки файла\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Успех\",\n        description: `Импортировано ${data.imported} материалов`,\n      });\n      setSelectedFile(null);\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Ошибка импорта\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (file: File) => {\n    const allowedTypes = [\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // .xlsx\n      \"application/vnd.ms-excel\", // .xls\n      \"text/csv\", // .csv\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Неподдерживаемый формат файла\",\n        description: \"Поддерживаются только файлы Excel (.xlsx, .xls) и CSV\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleUpload = () => {\n    if (selectedFile) {\n      uploadMutation.mutate(selectedFile);\n    }\n  };\n\n  const downloadTemplate = () => {\n    // Создаем ссылку для скачивания шаблона\n    const link = document.createElement('a');\n    link.href = '/api/materials/template';\n    link.download = 'template_materials.xlsx';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleClose = () => {\n    setSelectedFile(null);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Upload className=\"h-5 w-5 text-primary\" />\n            <span>Импорт материалов</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Template Download */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Download className=\"h-4 w-4\" />\n                <span>Шаблон для импорта</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                Скачайте шаблон Excel с правильной структурой колонок для импорта материалов\n              </p>\n              <Button\n                onClick={downloadTemplate}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Скачать шаблон\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* File Upload */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm\">Загрузка файла</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  isDragging\n                    ? \"border-primary bg-primary/5\"\n                    : \"border-gray-300 dark:border-gray-600\"\n                }`}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n              >\n                {selectedFile ? (\n                  <div className=\"space-y-4\">\n                    <FileSpreadsheet className=\"h-12 w-12 text-primary mx-auto\" />\n                    <div>\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        {selectedFile.name}\n                      </p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {(selectedFile.size / 1024).toFixed(1)} КБ\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        onClick={handleUpload}\n                        disabled={uploadMutation.isPending}\n                        className=\"bg-primary hover:bg-primary-dark text-white\"\n                      >\n                        {uploadMutation.isPending ? \"Загружается...\" : \"Импортировать\"}\n                      </Button>\n                      <Button\n                        onClick={() => setSelectedFile(null)}\n                        variant=\"outline\"\n                        disabled={uploadMutation.isPending}\n                      >\n                        Отменить\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <Upload className=\"h-12 w-12 text-gray-400 mx-auto\" />\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        Перетащите файл сюда или\n                      </p>\n                      <Input\n                        type=\"file\"\n                        accept=\".xlsx,.xls,.csv\"\n                        onChange={(e) => {\n                          const file = e.target.files?.[0];\n                          if (file) handleFileSelect(file);\n                        }}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Format Info */}\n              <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-md\">\n                <div className=\"flex items-start space-x-2\">\n                  <AlertCircle className=\"h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium text-blue-800 dark:text-blue-300 mb-1\">\n                      Поддерживаемые форматы:\n                    </p>\n                    <ul className=\"text-blue-700 dark:text-blue-400 space-y-1\">\n                      <li>• Excel файлы (.xlsx, .xls)</li>\n                      <li>• CSV файлы (.csv)</li>\n                    </ul>\n                    <p className=\"mt-2 text-blue-700 dark:text-blue-400\">\n                      Структура файла должна соответствовать скачанному шаблону\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"flex justify-end\">\n          <Button variant=\"outline\" onClick={handleClose}>\n            Закрыть\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8852},"client/src/components/material-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Package } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertWorkMaterialSchema } from \"@shared/schema\";\nimport type { Material, InsertWorkMaterial, WorkItem } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst materialFormSchema = insertWorkMaterialSchema.extend({\n  consumptionNorm: z.string().min(1, \"Норма расхода обязательна\"),\n});\n\ntype MaterialFormData = z.infer<typeof materialFormSchema>;\n\ninterface MaterialModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  workItem: WorkItem;\n  projectId: string;\n}\n\nexport function MaterialModal({ isOpen, onClose, workItem, projectId }: MaterialModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: materials = [] } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  const form = useForm<MaterialFormData>({\n    resolver: zodResolver(materialFormSchema),\n    defaultValues: {\n      workItemId: workItem.id,\n      materialId: \"\",\n      consumptionNorm: \"\",\n      consumptionUnit: \"\",\n    },\n  });\n\n  const selectedMaterialId = form.watch(\"materialId\");\n  const selectedMaterial = materials.find(m => m.id === selectedMaterialId);\n  const consumptionNorm = form.watch(\"consumptionNorm\");\n\n  const createWorkMaterialMutation = useMutation({\n    mutationFn: async (data: InsertWorkMaterial) => {\n      return apiRequest(\"POST\", \"/api/work-materials\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n      toast({\n        title: \"Успех\",\n        description: \"Материал добавлен к работе\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось добавить материал\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: MaterialFormData) => {\n    const workMaterialData: InsertWorkMaterial = {\n      workItemId: data.workItemId,\n      materialId: data.materialId,\n      consumptionNorm: data.consumptionNorm,\n      consumptionUnit: data.consumptionUnit,\n    };\n\n    createWorkMaterialMutation.mutate(workMaterialData);\n  };\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n  };\n\n  // Auto-set consumption unit based on material and work units\n  const handleMaterialChange = (materialId: string) => {\n    form.setValue(\"materialId\", materialId);\n    const material = materials.find(m => m.id === materialId);\n    if (material) {\n      // Generate consumption unit based on material unit and work unit\n      const consumptionUnit = `${material.unit}/${workItem.unit}`;\n      form.setValue(\"consumptionUnit\", consumptionUnit);\n    }\n  };\n\n  // Calculate required quantity and cost\n  const calculateQuantity = () => {\n    if (!selectedMaterial || !consumptionNorm || !workItem.volume) return 0;\n    return parseFloat(consumptionNorm) * parseFloat(workItem.volume);\n  };\n\n  const calculateCost = () => {\n    if (!selectedMaterial) return 0;\n    const quantity = calculateQuantity();\n    return quantity * parseFloat(selectedMaterial.pricePerUnit);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Package className=\"h-5 w-5 text-primary\" />\n            <span>Добавить материал</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"materialId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Материал *</FormLabel>\n                  <Select onValueChange={handleMaterialChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Выберите материал\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {materials.map((material) => (\n                        <SelectItem key={material.id} value={material.id}>\n                          {material.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"consumptionNorm\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Норма расхода *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.000001\"\n                        placeholder=\"0.000000\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"consumptionUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Единица расхода</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"шт/м³\"\n                        readOnly\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {selectedMaterial && (\n              <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-md\">\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  <div className=\"flex justify-between\">\n                    <span>Цена за единицу:</span>\n                    <span className=\"font-medium\">\n                      ₽ {parseFloat(selectedMaterial.pricePerUnit).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}/{selectedMaterial.unit}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between mt-1\">\n                    <span>Требуется на объём:</span>\n                    <span className=\"font-medium\">\n                      {calculateQuantity().toLocaleString('ru-RU', { maximumFractionDigits: 3 })} {selectedMaterial.unit}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between mt-2 pt-2 border-t border-gray-300 dark:border-gray-600\">\n                    <span className=\"font-medium\">Стоимость материала:</span>\n                    <span className=\"font-bold text-primary\">\n                      ₽ {calculateCost().toLocaleString('ru-RU', { minimumFractionDigits: 0 })}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Отмена\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createWorkMaterialMutation.isPending}\n                className=\"bg-primary hover:bg-primary-dark text-white\"\n              >\n                Добавить\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8477},"client/src/components/materials-database.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Plus, Edit, Trash2, Package, Search, Database, AlertTriangle } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MaterialEditModal } from \"./material-edit-modal\";\nimport { MaterialImportModal } from \"./material-import-modal\";\nimport type { Material } from \"@shared/schema\";\n\nexport function MaterialsDatabase() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isImportModalOpen, setIsImportModalOpen] = useState(false);\n  const [editingMaterial, setEditingMaterial] = useState<Material | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: materials = [], isLoading } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  const deleteMaterialMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/materials/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Материал удален\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось удалить материал\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importBaseMaterialsMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/materials/import-base\");\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Успех\",\n        description: `Импортировано ${data.imported} материалов в базу`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка импорта\",\n        description: \"Не удалось импортировать базу материалов\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearMaterialsMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"DELETE\", \"/api/materials/clear\");\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"База очищена\",\n        description: `Удалено ${data.deleted} материалов`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось очистить базу материалов\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddMaterial = () => {\n    setEditingMaterial(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEditMaterial = (material: Material) => {\n    setEditingMaterial(material);\n    setIsModalOpen(true);\n  };\n\n  const handleDeleteMaterial = (material: Material) => {\n    if (window.confirm(`Вы уверены, что хотите удалить материал \"${material.name}\"?`)) {\n      deleteMaterialMutation.mutate(material.id);\n    }\n  };\n\n  const filteredMaterials = materials.filter(material =>\n    material.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    material.supplier?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    material.unit.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Загрузка материалов...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Package className=\"h-5 w-5 text-primary\" />\n            <span>База данных материалов</span>\n          </CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => {\n                if (window.confirm(\"Вы уверены, что хотите очистить всю базу материалов? Это действие нельзя отменить.\")) {\n                  clearMaterialsMutation.mutate();\n                }\n              }}\n              variant=\"outline\"\n              className=\"text-red-600 border-red-600 hover:bg-red-600 hover:text-white\"\n              disabled={clearMaterialsMutation.isPending}\n            >\n              <AlertTriangle className=\"h-4 w-4 mr-2\" />\n              {clearMaterialsMutation.isPending ? \"Очистка...\" : \"Очистить базу\"}\n            </Button>\n            <Button\n              onClick={() => importBaseMaterialsMutation.mutate()}\n              variant=\"outline\"\n              className=\"text-green-600 border-green-600 hover:bg-green-600 hover:text-white\"\n              disabled={importBaseMaterialsMutation.isPending}\n            >\n              <Database className=\"h-4 w-4 mr-2\" />\n              {importBaseMaterialsMutation.isPending ? \"Загрузка...\" : \"Загрузить базу\"}\n            </Button>\n            <Button\n              onClick={() => setIsImportModalOpen(true)}\n              variant=\"outline\"\n              className=\"text-primary border-primary hover:bg-primary hover:text-white\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Импорт Excel\n            </Button>\n            <Button\n              onClick={handleAddMaterial}\n              className=\"bg-primary hover:bg-primary-dark text-white\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Добавить материал\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          <Input\n            placeholder=\"Поиск по названию, поставщику или единице измерения...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        {filteredMaterials.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n              {searchTerm ? \"Материалы не найдены\" : \"Нет добавленных материалов\"}\n            </p>\n            {!searchTerm && (\n              <Button onClick={handleAddMaterial} className=\"bg-primary hover:bg-primary-dark text-white\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Добавить первый материал\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-50 dark:bg-gray-700\">\n                  <TableHead className=\"text-left\">Наименование</TableHead>\n                  <TableHead className=\"text-left\">Ед. изм.</TableHead>\n                  <TableHead className=\"text-right\">Цена за ед.</TableHead>\n                  <TableHead className=\"text-left\">Поставщик</TableHead>\n                  <TableHead className=\"text-left\">Расход</TableHead>\n                  <TableHead className=\"text-left\">Вес</TableHead>\n                  <TableHead className=\"text-center\">Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredMaterials.map((material) => (\n                  <TableRow\n                    key={material.id}\n                    className=\"hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  >\n                    <TableCell>\n                      <div className=\"font-medium\">{material.name}</div>\n                    </TableCell>\n                    <TableCell className=\"text-sm font-medium\">\n                      {material.unit}\n                    </TableCell>\n                    <TableCell className=\"text-right text-sm font-bold text-primary\">\n                      ₽ {parseFloat(material.pricePerUnit).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {material.supplier || \"—\"}\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {material.consumptionRate && material.consumptionUnit \n                        ? `${parseFloat(material.consumptionRate).toLocaleString('ru-RU')} ${material.consumptionUnit}`\n                        : \"—\"\n                      }\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {material.weightPerUnit && material.weightUnit \n                        ? `${parseFloat(material.weightPerUnit).toLocaleString('ru-RU')} ${material.weightUnit}`\n                        : \"—\"\n                      }\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex justify-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditMaterial(material)}\n                          className=\"text-primary hover:text-primary-dark p-1\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteMaterial(material)}\n                          className=\"text-red-500 hover:text-red-600 p-1\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </CardContent>\n\n      {/* Material Edit Modal */}\n      <MaterialEditModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        editingMaterial={editingMaterial}\n      />\n\n      {/* Material Import Modal */}\n      <MaterialImportModal\n        isOpen={isImportModalOpen}\n        onClose={() => setIsImportModalOpen(false)}\n      />\n    </Card>\n  );\n}","size_bytes":11166},"client/src/components/project-summary.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { FileText, FileSpreadsheet } from \"lucide-react\";\nimport type { ProjectWithWorkItems } from \"@shared/schema\";\n\ninterface ProjectSummaryProps {\n  project: ProjectWithWorkItems | null;\n  onGenerateReport: () => void;\n  onExportPDF: () => void;\n  onExportExcel: () => void;\n}\n\nexport function ProjectSummary({\n  project,\n  onGenerateReport,\n  onExportPDF,\n  onExportExcel,\n}: ProjectSummaryProps) {\n  if (!project) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 px-6 py-4\">\n        <div className=\"text-center text-gray-500 dark:text-gray-400\">\n          Проект не выбран\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate totals\n  const worksCost = project.workItems.reduce((total, item) => {\n    return total + ((parseFloat(item.volume || \"0\")) * (parseFloat(item.pricePerUnit || \"0\")));\n  }, 0);\n\n  const materialsCost = project.workItems.reduce((total, workItem) => {\n    return total + workItem.workMaterials.reduce((materialTotal, workMaterial) => {\n      const quantity = (parseFloat(workItem.volume || \"0\")) * (parseFloat(workMaterial.consumptionNorm || \"0\"));\n      return materialTotal + (quantity * (parseFloat(workMaterial.material.pricePerUnit || \"0\")));\n    }, 0);\n  }, 0);\n\n  const totalCost = worksCost + materialsCost;\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-8\">\n          <div className=\"text-center\">\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Проект</div>\n            <div className=\"font-bold text-lg\">{project.name}</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Работы</div>\n            <div className=\"font-bold text-lg text-primary\">\n              ₽ {worksCost.toLocaleString('ru-RU', { minimumFractionDigits: 0 })}\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Материалы</div>\n            <div className=\"font-bold text-lg text-secondary\">\n              ₽ {materialsCost.toLocaleString('ru-RU', { minimumFractionDigits: 0 })}\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Итого</div>\n            <div className=\"font-bold text-xl text-success\">\n              ₽ {totalCost.toLocaleString('ru-RU', { minimumFractionDigits: 0 })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-right\">\n            <div className=\"text-xs text-gray-500 dark:text-gray-400\">Последнее изменение</div>\n            <div className=\"text-sm\">\n              {new Date(project.updatedAt).toLocaleString('ru-RU', {\n                day: '2-digit',\n                month: '2-digit',\n                year: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit'\n              })}\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={onGenerateReport}\n              className=\"bg-success hover:bg-green-600 text-white flex items-center space-x-2\"\n            >\n              <FileText className=\"h-4 w-4\" />\n              <span>Смета</span>\n            </Button>\n            <Button\n              onClick={onExportPDF}\n              className=\"bg-red-500 hover:bg-red-600 text-white flex items-center space-x-2\"\n            >\n              <FileText className=\"h-4 w-4\" />\n              <span>PDF</span>\n            </Button>\n            <Button\n              onClick={onExportExcel}\n              className=\"bg-green-500 hover:bg-green-600 text-white flex items-center space-x-2\"\n            >\n              <FileSpreadsheet className=\"h-4 w-4\" />\n              <span>Excel</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4326},"client/src/components/sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { \n  Plus, \n  FolderOpen, \n  Save, \n  Hammer, \n  Package, \n  Calculator, \n  BarChart3,\n  FileText,\n  FileSpreadsheet,\n  DollarSign,\n  Settings,\n  Undo,\n  Link2\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useUndoRedoContext } from \"@/contexts/UndoRedoContext\";\n\ninterface SidebarProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  onNewProject: () => void;\n  onOpenProject: () => void;\n  onSaveProject: () => void;\n  onExportPDF: () => void;\n  onExportExcel: () => void;\n}\n\nconst navigationItems = [\n  { id: \"project-params\", label: \"Параметры объекта\", icon: Settings },\n  { id: \"works\", label: \"Виды работ\", icon: Hammer },\n  { id: \"materials\", label: \"Материалы\", icon: Package },\n  { id: \"estimate\", label: \"Смета\", icon: Calculator },\n  { id: \"reports\", label: \"Отчеты\", icon: BarChart3 },\n];\n\nconst settingsItems = [\n  { id: \"material-prices\", label: \"Цены на материалы\", icon: DollarSign },\n  { id: \"hierarchy-db\", label: \"База работ\", icon: Hammer },\n  { id: \"area-linking\", label: \"Привязка площадей\", icon: Link2 },\n];\n\nexport function Sidebar({\n  activeTab,\n  onTabChange,\n  onNewProject,\n  onOpenProject,\n  onSaveProject,\n  onExportPDF,\n  onExportExcel,\n}: SidebarProps) {\n  const { undo, canUndo } = useUndoRedoContext();\n\n  return (\n    <aside className=\"w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto\">\n      <div className=\"p-4\">\n        {/* Project Actions */}\n        <div className=\"space-y-2 mb-6\">\n          <Button\n            onClick={onNewProject}\n            className=\"w-full bg-primary hover:bg-primary-dark text-white flex items-center justify-center space-x-2\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            <span>Новый проект</span>\n          </Button>\n          <Button\n            onClick={onOpenProject}\n            className=\"w-full flex items-center justify-center space-x-2 bg-yellow-400 hover:bg-yellow-500 text-black font-semibold\"\n          >\n            <FolderOpen className=\"h-4 w-4\" />\n            <span>Открыть</span>\n          </Button>\n          <Button\n            onClick={onSaveProject}\n            className=\"w-full flex items-center justify-center space-x-2 bg-yellow-400 hover:bg-yellow-500 text-black font-semibold\"\n          >\n            <Save className=\"h-4 w-4\" />\n            <span>Сохранить</span>\n          </Button>\n          \n          {/* Кнопка отмены */}\n          <Button\n            onClick={undo}\n            disabled={!canUndo}\n            variant=\"outline\"\n            className=\"w-full flex items-center justify-center space-x-2\"\n            title=\"Отменить последнее действие (Ctrl+Z)\"\n          >\n            <Undo className=\"h-4 w-4\" />\n            <span>Отменить</span>\n          </Button>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"space-y-1\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeTab === item.id;\n            \n            return (\n              <button\n                key={item.id}\n                onClick={() => onTabChange(item.id)}\n                className={cn(\n                  \"w-full px-3 py-2 rounded-md flex items-center space-x-3 text-sm font-medium transition-colors text-left\",\n                  isActive\n                    ? \"bg-yellow-400 text-black font-semibold shadow-md\"\n                    : \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                )}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span>{item.label}</span>\n              </button>\n            );\n          })}\n        </nav>\n\n        {/* Settings */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n          <h3 className=\"text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3\">\n            Настройки\n          </h3>\n          <nav className=\"space-y-1\">\n            {settingsItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = activeTab === item.id;\n              \n              return (\n                <button\n                  key={item.id}\n                  onClick={() => onTabChange(item.id)}\n                  className={cn(\n                    \"w-full px-3 py-2 rounded-md flex items-center space-x-3 text-sm font-medium transition-colors text-left\",\n                    isActive\n                      ? \"bg-yellow-400 text-black font-semibold shadow-md\"\n                      : \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  )}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span>{item.label}</span>\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Export Actions */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n          <h3 className=\"text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3\">\n            Экспорт\n          </h3>\n          <div className=\"space-y-2\">\n            <Button\n              onClick={onExportPDF}\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n            >\n              <FileText className=\"h-4 w-4 mr-3 text-red-500\" />\n              <span>Экспорт PDF</span>\n            </Button>\n            <Button\n              onClick={onExportExcel}\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n            >\n              <FileSpreadsheet className=\"h-4 w-4 mr-3 text-green-500\" />\n              <span>Экспорт Excel</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":6140},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    return (localStorage.getItem(\"theme\") as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{\n      theme,\n      setTheme,\n      toggleTheme,\n    }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1189},"client/src/components/work-details.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Info, Package, Plus, Trash2 } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WorkItemWithMaterials } from \"@shared/schema\";\n\ninterface WorkDetailsProps {\n  selectedWork: WorkItemWithMaterials | null;\n  onAddMaterial: () => void;\n  projectId: string;\n}\n\nexport function WorkDetails({ selectedWork, onAddMaterial, projectId }: WorkDetailsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteWorkMaterialMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/work-materials/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n      toast({\n        title: \"Успех\",\n        description: \"Материал удален из работы\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось удалить материал\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRemoveMaterial = (materialId: string) => {\n    if (window.confirm(\"Удалить материал из работы?\")) {\n      deleteWorkMaterialMutation.mutate(materialId);\n    }\n  };\n\n  const calculateMaterialQuantity = (volume: string, consumptionNorm: string) => {\n    return (parseFloat(volume) || 0) * (parseFloat(consumptionNorm) || 0);\n  };\n\n  const calculateMaterialCost = (quantity: number, pricePerUnit: string) => {\n    return quantity * (parseFloat(pricePerUnit) || 0);\n  };\n\n  const selectedWorkMaterialsCost = selectedWork?.workMaterials.reduce((total, workMaterial) => {\n    const quantity = calculateMaterialQuantity(\n      selectedWork.volume || \"0\",\n      workMaterial.consumptionNorm || \"0\"\n    );\n    return total + calculateMaterialCost(quantity, workMaterial.material.pricePerUnit || \"0\");\n  }, 0) || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Selected Work Info */}\n      <Card>\n        <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Info className=\"h-5 w-5 text-primary\" />\n            <span>Выбранная работа</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          {selectedWork ? (\n            <div className=\"space-y-3\">\n              <div>\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">Наименование:</span>\n                <div className=\"font-medium\">{selectedWork.name}</div>\n              </div>\n              <div>\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">Единица измерения:</span>\n                <div className=\"font-medium\">{selectedWork.unit}</div>\n              </div>\n              <div>\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">Объём:</span>\n                <div className=\"font-medium text-primary\">\n                  {parseFloat(selectedWork.volume || \"0\").toLocaleString('ru-RU', { maximumFractionDigits: 3 })} {selectedWork.unit}\n                </div>\n              </div>\n              <div>\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">Стоимость:</span>\n                <div className=\"font-bold text-lg text-primary\">\n                  ₽ {((parseFloat(selectedWork.volume || \"0\")) * (parseFloat(selectedWork.pricePerUnit || \"0\"))).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center text-gray-500 dark:text-gray-400 py-4\">\n              Выберите работу для просмотра деталей\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Materials for Selected Work */}\n      {selectedWork && (\n        <Card>\n          <CardHeader className=\"border-b border-gray-200 dark:border-gray-700 flex-row items-center justify-between space-y-0\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Package className=\"h-5 w-5 text-primary\" />\n              <span>Материалы</span>\n            </CardTitle>\n            <Button\n              onClick={onAddMaterial}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-primary hover:text-primary-dark\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Добавить\n            </Button>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {selectedWork.workMaterials.length === 0 ? (\n              <div className=\"p-6 text-center\">\n                <Package className=\"h-8 w-8 text-gray-400 mx-auto mb-3\" />\n                <p className=\"text-gray-500 dark:text-gray-400 mb-3\">\n                  Нет добавленных материалов\n                </p>\n                <Button\n                  onClick={onAddMaterial}\n                  variant=\"outline\"\n                  size=\"sm\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Добавить материал\n                </Button>\n              </div>\n            ) : (\n              <>\n                <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                  {selectedWork.workMaterials.map((workMaterial) => {\n                    const quantity = calculateMaterialQuantity(\n                      selectedWork.volume || \"0\",\n                      workMaterial.consumptionNorm || \"0\"\n                    );\n                    const materialCost = calculateMaterialCost(quantity, workMaterial.material.pricePerUnit || \"0\");\n\n                    return (\n                      <div key={workMaterial.id} className=\"p-4\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-sm\">{workMaterial.material.name}</div>\n                            <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                              <span>{parseFloat(workMaterial.consumptionNorm || \"0\").toLocaleString('ru-RU', { maximumFractionDigits: 6 })} {workMaterial.consumptionUnit}</span>\n                              <span className=\"mx-2\">•</span>\n                              <span>₽ {parseFloat(workMaterial.material.pricePerUnit || \"0\").toLocaleString('ru-RU', { minimumFractionDigits: 2 })}/{workMaterial.material.unit}</span>\n                            </div>\n                            <div className=\"text-sm font-medium text-primary mt-1\">\n                              Требуется: <span>{quantity.toLocaleString('ru-RU', { maximumFractionDigits: 3 })} {workMaterial.material.unit}</span>\n                            </div>\n                          </div>\n                          <div className=\"text-right ml-4\">\n                            <div className=\"font-bold text-sm\">\n                              ₽ {materialCost.toLocaleString('ru-RU', { minimumFractionDigits: 0 })}\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleRemoveMaterial(workMaterial.id)}\n                              className=\"text-gray-400 hover:text-red-500 mt-1 p-1\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-700 px-6 py-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Материалы для работы:</span>\n                    <span className=\"font-bold text-primary\">\n                      ₽ {selectedWorkMaterialsCost.toLocaleString('ru-RU', { minimumFractionDigits: 0 })}\n                    </span>\n                  </div>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8670},"client/src/components/work-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertWorkItemSchema } from \"@shared/schema\";\nimport type { InsertWorkItem, WorkItem } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst workFormSchema = insertWorkItemSchema.extend({\n  volume: z.string().optional(),\n  pricePerUnit: z.string().min(1, \"Цена за единицу обязательна\"),\n  costPrice: z.string().optional(),\n});\n\ntype WorkFormData = z.infer<typeof workFormSchema>;\n\nconst unitOptions = [\n  { value: \"м²\", label: \"м² - квадратный метр\" },\n  { value: \"м³\", label: \"м³ - кубический метр\" },\n  { value: \"м\", label: \"м - погонный метр\" },\n  { value: \"шт\", label: \"шт - штука\" },\n  { value: \"т\", label: \"т - тонна\" },\n  { value: \"кг\", label: \"кг - килограмм\" },\n];\n\ninterface WorkModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  editingWork?: WorkItem | null;\n}\n\nexport function WorkModal({ isOpen, onClose, projectId, editingWork }: WorkModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<WorkFormData>({\n    resolver: zodResolver(workFormSchema),\n    defaultValues: {\n      projectId,\n      name: editingWork?.name || \"\",\n      description: editingWork?.description || \"\",\n      unit: editingWork?.unit || \"\",\n      pricePerUnit: editingWork?.pricePerUnit || \"\",\n      costPrice: editingWork?.costPrice || \"\",\n      volume: editingWork?.volume || \"\",\n    },\n  });\n\n  const createWorkMutation = useMutation({\n    mutationFn: async (data: InsertWorkItem) => {\n      return apiRequest(\"POST\", \"/api/work-items\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n      toast({\n        title: \"Успех\",\n        description: \"Работа создана\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось создать работу\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateWorkMutation = useMutation({\n    mutationFn: async (data: Partial<InsertWorkItem>) => {\n      return apiRequest(\"PUT\", `/api/work-items/${editingWork?.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n      toast({\n        title: \"Успех\",\n        description: \"Работа обновлена\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить работу\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: WorkFormData) => {\n    const workData: InsertWorkItem = {\n      projectId: data.projectId,\n      name: data.name,\n      description: data.description || null,\n      unit: data.unit,\n      pricePerUnit: data.pricePerUnit,\n      costPrice: data.costPrice || null,\n      volume: data.volume || \"0\",\n    };\n\n    if (editingWork) {\n      updateWorkMutation.mutate(workData);\n    } else {\n      createWorkMutation.mutate(workData);\n    }\n  };\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Plus className=\"h-5 w-5 text-primary\" />\n            <span>{editingWork ? \"Редактировать работу\" : \"Добавить вид работы\"}</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Наименование работы *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Например: Кладка кирпичная стен\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Единица измерения *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Выберите единицу\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {unitOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"pricePerUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Цена за единицу (₽) *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"costPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Себестоимость (₽)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"volume\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Объём</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.001\"\n                        placeholder=\"0.000\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Описание</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Дополнительное описание работы\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Отмена\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createWorkMutation.isPending || updateWorkMutation.isPending}\n                className=\"bg-primary hover:bg-primary-dark text-white\"\n              >\n                {editingWork ? \"Обновить\" : \"Сохранить\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9574},"client/src/components/work-template-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Hammer } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertWorkItemSchema } from \"@shared/schema\";\nimport type { InsertWorkItem, WorkItem, Project } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst workFormSchema = insertWorkItemSchema.extend({\n  volume: z.string().optional(),\n  pricePerUnit: z.string().min(1, \"Цена за единицу обязательна\"),\n  costPrice: z.string().optional(),\n});\n\ntype WorkFormData = z.infer<typeof workFormSchema>;\n\nconst unitOptions = [\n  { value: \"м²\", label: \"м² - квадратный метр\" },\n  { value: \"м³\", label: \"м³ - кубический метр\" },\n  { value: \"м\", label: \"м - погонный метр\" },\n  { value: \"шт\", label: \"шт - штука\" },\n  { value: \"т\", label: \"т - тонна\" },\n  { value: \"кг\", label: \"кг - килограмм\" },\n];\n\ninterface WorkTemplateModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingWork?: WorkItem | null;\n  projects: Project[];\n}\n\nexport function WorkTemplateModal({ isOpen, onClose, editingWork, projects }: WorkTemplateModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<WorkFormData>({\n    resolver: zodResolver(workFormSchema),\n    defaultValues: {\n      projectId: editingWork?.projectId || (projects.length > 0 ? projects[0].id : \"\"),\n      name: editingWork?.name || \"\",\n      description: editingWork?.description || \"\",\n      unit: editingWork?.unit || \"\",\n      pricePerUnit: editingWork?.pricePerUnit || \"\",\n      costPrice: editingWork?.costPrice || \"\",\n      volume: editingWork?.volume || \"\",\n    },\n  });\n\n  const createWorkMutation = useMutation({\n    mutationFn: async (data: InsertWorkItem) => {\n      return apiRequest(\"POST\", \"/api/work-items\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-items\", \"all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Работа создана\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось создать работу\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateWorkMutation = useMutation({\n    mutationFn: async (data: Partial<InsertWorkItem>) => {\n      return apiRequest(\"PUT\", `/api/work-items/${editingWork?.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-items\", \"all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Работа обновлена\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить работу\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: WorkFormData) => {\n    const workData: InsertWorkItem = {\n      projectId: data.projectId,\n      name: data.name,\n      description: data.description || null,\n      unit: data.unit,\n      pricePerUnit: data.pricePerUnit,\n      costPrice: data.costPrice || null,\n      volume: data.volume || \"0\",\n    };\n\n    if (editingWork) {\n      updateWorkMutation.mutate(workData);\n    } else {\n      createWorkMutation.mutate(workData);\n    }\n  };\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Hammer className=\"h-5 w-5 text-primary\" />\n            <span>{editingWork ? \"Редактировать работу\" : \"Добавить работу\"}</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"projectId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Проект *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Выберите проект\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {projects.map((project) => (\n                            <SelectItem key={project.id} value={project.id}>\n                              {project.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Наименование работы *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Например: Кладка кирпичная стен\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Единица измерения *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Выберите единицу\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {unitOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"pricePerUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Цена за единицу (₽) *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"costPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Себестоимость (₽)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"volume\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Объём</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.001\"\n                        placeholder=\"0.000\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"md:col-span-2\">\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Описание</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Дополнительное описание работы\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Отмена\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createWorkMutation.isPending || updateWorkMutation.isPending}\n                className=\"bg-primary hover:bg-primary-dark text-white\"\n              >\n                {editingWork ? \"Обновить\" : \"Сохранить\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11020},"client/src/components/works-database.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Plus, Edit, Trash2, Hammer, Search, Upload, AlertTriangle } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { WorkTemplateModal } from \"./work-template-modal\";\nimport { WorkImportModal } from \"./work-import-modal\";\nimport type { WorkItem, Project } from \"@shared/schema\";\n\nexport function WorksDatabase() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isImportModalOpen, setIsImportModalOpen] = useState(false);\n  const [editingWork, setEditingWork] = useState<WorkItem | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Получаем все проекты для работ\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Получаем все работы из всех проектов\n  const { data: allWorkItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/work-items\", \"all\"],\n    queryFn: async () => {\n      const allWorks: WorkItem[] = [];\n      \n      for (const project of projects) {\n        try {\n          const response = await fetch(`/api/projects/${project.id}/work-items`);\n          if (response.ok) {\n            const works = await response.json();\n            allWorks.push(...works.map((work: any) => ({ ...work, projectName: project.name })));\n          }\n        } catch (error) {\n          console.error(`Error loading works for project ${project.id}:`, error);\n        }\n      }\n      \n      return allWorks;\n    },\n    enabled: projects.length > 0,\n  });\n\n  const deleteWorkMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/work-items/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-items\", \"all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Работа удалена\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось удалить работу\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearWorksMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"DELETE\", \"/api/work-items/clear\");\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-items\", \"all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"База очищена\",\n        description: `Удалено ${data.deleted} работ`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось очистить базу работ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddWork = () => {\n    setEditingWork(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEditWork = (work: WorkItem) => {\n    setEditingWork(work);\n    setIsModalOpen(true);\n  };\n\n  const handleDeleteWork = (work: WorkItem) => {\n    if (window.confirm(`Вы уверены, что хотите удалить работу \"${work.name}\"?`)) {\n      deleteWorkMutation.mutate(work.id);\n    }\n  };\n\n  const filteredWorks = allWorkItems.filter((work: any) =>\n    work.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    work.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    work.unit.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    work.projectName?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Загрузка работ...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Hammer className=\"h-5 w-5 text-primary\" />\n            <span>База данных работ</span>\n          </CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => {\n                if (window.confirm(\"Вы уверены, что хотите очистить всю базу работ? Это действие нельзя отменить.\")) {\n                  clearWorksMutation.mutate();\n                }\n              }}\n              variant=\"outline\"\n              className=\"text-red-600 border-red-600 hover:bg-red-600 hover:text-white\"\n              disabled={clearWorksMutation.isPending}\n            >\n              <AlertTriangle className=\"h-4 w-4 mr-2\" />\n              {clearWorksMutation.isPending ? \"Очистка...\" : \"Очистить базу\"}\n            </Button>\n            <Button\n              onClick={() => setIsImportModalOpen(true)}\n              variant=\"outline\"\n              className=\"text-primary border-primary hover:bg-primary hover:text-white\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Импорт Excel\n            </Button>\n            <Button\n              onClick={handleAddWork}\n              className=\"bg-primary hover:bg-primary-dark text-white\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Добавить работу\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          <Input\n            placeholder=\"Поиск по названию, описанию, единице измерения или проекту...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        {filteredWorks.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <Hammer className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n              {searchTerm ? \"Работы не найдены\" : \"Нет добавленных работ\"}\n            </p>\n            {!searchTerm && (\n              <Button onClick={handleAddWork} className=\"bg-primary hover:bg-primary-dark text-white\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Добавить первую работу\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-50 dark:bg-gray-700\">\n                  <TableHead className=\"text-left\">Наименование</TableHead>\n                  <TableHead className=\"text-left\">Проект</TableHead>\n                  <TableHead className=\"text-left\">Ед. изм.</TableHead>\n                  <TableHead className=\"text-right\">Цена за ед.</TableHead>\n                  <TableHead className=\"text-right\">Себестоимость</TableHead>\n                  <TableHead className=\"text-right\">Объём</TableHead>\n                  <TableHead className=\"text-center\">Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredWorks.map((work: any) => (\n                  <TableRow\n                    key={work.id}\n                    className=\"hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  >\n                    <TableCell>\n                      <div className=\"font-medium\">{work.name}</div>\n                      {work.description && (\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                          {work.description}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      {work.projectName}\n                    </TableCell>\n                    <TableCell className=\"text-sm font-medium\">\n                      {work.unit}\n                    </TableCell>\n                    <TableCell className=\"text-right text-sm font-bold text-primary\">\n                      ₽ {parseFloat(work.pricePerUnit || \"0\").toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                    </TableCell>\n                    <TableCell className=\"text-right text-sm\">\n                      {work.costPrice \n                        ? `₽ ${parseFloat(work.costPrice).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}`\n                        : \"—\"\n                      }\n                    </TableCell>\n                    <TableCell className=\"text-right text-sm\">\n                      {parseFloat(work.volume || \"0\").toLocaleString('ru-RU', { maximumFractionDigits: 3 })} {work.unit}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex justify-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditWork(work)}\n                          className=\"text-primary hover:text-primary-dark p-1\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteWork(work)}\n                          className=\"text-red-500 hover:text-red-600 p-1\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </CardContent>\n\n      {/* Work Template Modal */}\n      <WorkTemplateModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        editingWork={editingWork}\n        projects={projects}\n      />\n\n      {/* Work Import Modal */}\n      <WorkImportModal\n        isOpen={isImportModalOpen}\n        onClose={() => setIsImportModalOpen(false)}\n      />\n    </Card>\n  );\n}","size_bytes":11037},"client/src/components/works-list.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Calculator, Plus, Edit, Trash2, Hammer } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WorkItemWithMaterials } from \"@shared/schema\";\n\ninterface WorksListProps {\n  workItems: WorkItemWithMaterials[];\n  selectedWorkId: string | null;\n  onWorkSelect: (workId: string) => void;\n  onAddWork: () => void;\n  onEditWork: (workId: string) => void;\n  onCalculate: () => void;\n  projectId: string;\n}\n\nexport function WorksList({\n  workItems,\n  selectedWorkId,\n  onWorkSelect,\n  onAddWork,\n  onEditWork,\n  onCalculate,\n  projectId,\n}: WorksListProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateWorkItemMutation = useMutation({\n    mutationFn: async ({ id, volume }: { id: string; volume: string }) => {\n      return apiRequest(\"PUT\", `/api/work-items/${id}`, {\n        volume: volume || \"0\"\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить объём работы\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteWorkItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/work-items/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n      toast({\n        title: \"Успех\",\n        description: \"Работа удалена\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось удалить работу\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVolumeChange = (workItemId: string, volume: string) => {\n    updateWorkItemMutation.mutate({ id: workItemId, volume });\n  };\n\n  const handleDeleteWork = (workItemId: string) => {\n    if (window.confirm(\"Вы уверены, что хотите удалить эту работу?\")) {\n      deleteWorkItemMutation.mutate(workItemId);\n    }\n  };\n\n  const calculateWorkCost = (volume: string, pricePerUnit: string) => {\n    return (parseFloat(volume) || 0) * (parseFloat(pricePerUnit) || 0);\n  };\n\n  const totalWorksCost = workItems.reduce((total, item) => {\n    return total + calculateWorkCost(item.volume || \"0\", item.pricePerUnit || \"0\");\n  }, 0);\n\n  return (\n    <Card className=\"lg:col-span-2 overflow-hidden\">\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Hammer className=\"h-5 w-5 text-primary\" />\n            <span>Перечень работ</span>\n          </CardTitle>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              onClick={onCalculate}\n              className=\"bg-success hover:bg-green-600 text-white flex items-center space-x-2\"\n            >\n              <Calculator className=\"h-4 w-4\" />\n              <span>Рассчитать</span>\n            </Button>\n            <Button\n              onClick={onAddWork}\n              className=\"bg-primary hover:bg-primary-dark text-white flex items-center space-x-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              <span>Добавить работу</span>\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        {workItems.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <Hammer className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n              Нет добавленных работ\n            </p>\n            <Button onClick={onAddWork} className=\"bg-primary hover:bg-primary-dark text-white\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Добавить первую работу\n            </Button>\n          </div>\n        ) : (\n          <>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-gray-50 dark:bg-gray-700\">\n                    <TableHead className=\"text-left\">Наименование</TableHead>\n                    <TableHead className=\"text-left\">Ед. изм.</TableHead>\n                    <TableHead className=\"text-right\">Объём</TableHead>\n                    <TableHead className=\"text-right\">Цена за ед.</TableHead>\n                    <TableHead className=\"text-right\">Стоимость</TableHead>\n                    <TableHead className=\"text-center\">Действия</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {workItems.map((item) => {\n                    const isSelected = selectedWorkId === item.id;\n                    const workCost = calculateWorkCost(item.volume || \"0\", item.pricePerUnit || \"0\");\n\n                    return (\n                      <TableRow\n                        key={item.id}\n                        className={`hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer ${\n                          isSelected ? \"bg-blue-50 dark:bg-blue-900/20\" : \"\"\n                        }`}\n                        onClick={() => onWorkSelect(item.id)}\n                      >\n                        <TableCell>\n                          <div className=\"font-medium text-sm\">{item.name}</div>\n                          {item.description && (\n                            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              {item.description}\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">{item.unit}</TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            step=\"0.001\"\n                            className=\"w-20 text-right text-sm\"\n                            value={item.volume || \"0\"}\n                            onChange={(e) => handleVolumeChange(item.id, e.target.value)}\n                            onClick={(e) => e.stopPropagation()}\n                          />\n                        </TableCell>\n                        <TableCell className=\"text-right text-sm font-medium\">\n                          ₽ {parseFloat(item.pricePerUnit || \"0\").toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                        </TableCell>\n                        <TableCell className=\"text-right text-sm font-bold text-primary\">\n                          ₽ {workCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex justify-center space-x-2\" onClick={(e) => e.stopPropagation()}>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => onEditWork(item.id)}\n                              className=\"text-primary hover:text-primary-dark p-1\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteWork(item.id)}\n                              className=\"text-red-500 hover:text-red-600 p-1\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n\n            {/* Totals Row */}\n            <div className=\"bg-gray-50 dark:bg-gray-700 px-6 py-4 border-t border-gray-200 dark:border-gray-700\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Итого по работам:</span>\n                <span className=\"text-lg font-bold text-primary\">\n                  ₽ {totalWorksCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                </span>\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9087},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { WorksList } from \"@/components/works-list\";\nimport { WorkDetails } from \"@/components/work-details\";\nimport { ProjectSummary } from \"@/components/project-summary\";\nimport { WorkModal } from \"@/components/work-modal\";\nimport { MaterialModal } from \"@/components/material-modal\";\n\nimport { MaterialPrices } from \"@/components/material-prices\";\nimport { HierarchyDatabase } from \"@/components/hierarchy-database\";\nimport { DetailedEstimate } from \"@/components/detailed-estimate\";\nimport { WorksEstimate } from \"@/components/works-estimate\";\nimport { RoomParametersTable } from \"@/components/room-parameters-table\";\nimport { SummaryTable } from \"@/components/summary-table\";\nimport AreaWorkLinking from \"@/components/area-work-linking\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProjectWithWorkItems, WorkItem, Project } from \"@shared/schema\";\n\ninterface RoomData {\n  length: number;\n  height: number;\n  floorArea: number;\n  window1_a: number;\n  window1_b: number;\n  window2_a: number;\n  window2_b: number;\n  window3_a: number;\n  window3_b: number;\n  portal_a: number;\n  portal_b: number;\n  doors: number;\n}\n\nexport default function Dashboard() {\n  const [currentProjectId, setCurrentProjectId] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState(\"project-params\");\n  const [selectedWorkId, setSelectedWorkId] = useState<string | null>(null);\n  const [isWorkModalOpen, setIsWorkModalOpen] = useState(false);\n  const [isMaterialModalOpen, setIsMaterialModalOpen] = useState(false);\n  const [editingWork, setEditingWork] = useState<WorkItem | null>(null);\n  const [roomsData, setRoomsData] = useState<RoomData[]>(Array.from({ length: 12 }, () => ({\n    length: 0,\n    height: 0,\n    floorArea: 0,\n    window1_a: 0,\n    window1_b: 0,\n    window2_a: 0,\n    window2_b: 0,\n    window3_a: 0,\n    window3_b: 0,\n    portal_a: 0,\n    portal_b: 0,\n    doors: 0,\n  })));\n  \n  const { toast } = useToast();\n\n  // Get projects list for selector\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Get current project with work items\n  const { data: currentProject = null, isLoading } = useQuery<ProjectWithWorkItems>({\n    queryKey: [\"/api/projects\", currentProjectId],\n    enabled: !!currentProjectId,\n  });\n\n  // Auto-select first project if none selected\n  useEffect(() => {\n    if (!currentProjectId && projects.length > 0) {\n      setCurrentProjectId(projects[0].id);\n    }\n  }, [projects, currentProjectId]);\n\n  const handleProjectChange = (projectId: string) => {\n    setCurrentProjectId(projectId);\n    setSelectedWorkId(null);\n  };\n\n  const handleWorkSelect = (workId: string) => {\n    setSelectedWorkId(workId);\n  };\n\n  const handleAddWork = () => {\n    setEditingWork(null);\n    setIsWorkModalOpen(true);\n  };\n\n  const handleEditWork = (workId: string) => {\n    const work = currentProject?.workItems.find(w => w.id === workId);\n    if (work) {\n      setEditingWork(work);\n      setIsWorkModalOpen(true);\n    }\n  };\n\n  const handleAddMaterial = () => {\n    if (selectedWorkId && currentProject) {\n      const selectedWork = currentProject.workItems.find(w => w.id === selectedWorkId);\n      if (selectedWork) {\n        setIsMaterialModalOpen(true);\n      }\n    } else {\n      toast({\n        title: \"Выберите работу\",\n        description: \"Сначала выберите работу для добавления материала\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCalculate = () => {\n    toast({\n      title: \"Расчёт выполнен\",\n      description: \"Все стоимости пересчитаны\",\n    });\n  };\n\n  const handleExportPDF = useCallback(() => {\n    toast({\n      title: \"Экспорт PDF\",\n      description: \"Функция экспорта в PDF будет реализована\",\n    });\n  }, [toast]);\n\n  const handleExportExcel = useCallback(() => {\n    toast({\n      title: \"Экспорт Excel\", \n      description: \"Функция экспорта в Excel будет реализована\",\n    });\n  }, [toast]);\n\n  const handleNewProject = () => {\n    toast({\n      title: \"Новый проект\",\n      description: \"Функция создания нового проекта будет реализована\",\n    });\n  };\n\n  const handleOpenProject = () => {\n    toast({\n      title: \"Открыть проект\",\n      description: \"Функция открытия проекта будет реализована\",\n    });\n  };\n\n  const handleSaveProject = () => {\n    toast({\n      title: \"Проект сохранён\",\n      description: \"Все изменения автоматически сохраняются\",\n    });\n  };\n\n  const handleRoomDataChange = (roomIndex: number, newData: RoomData) => {\n    const newRoomsData = [...roomsData];\n    newRoomsData[roomIndex] = newData;\n    setRoomsData(newRoomsData);\n  };\n\n  const selectedWork = currentProject?.workItems.find(w => w.id === selectedWorkId) || null;\n\n  if (isLoading && currentProjectId) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Загрузка проекта...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-surface dark:bg-surface-dark\">\n      <Header\n        currentProject={currentProject}\n        onProjectChange={handleProjectChange}\n      />\n\n      <div className=\"flex h-[calc(100vh-73px)]\">\n        <Sidebar\n          activeTab={activeTab}\n          onTabChange={setActiveTab}\n          onNewProject={handleNewProject}\n          onOpenProject={handleOpenProject}\n          onSaveProject={handleSaveProject}\n          onExportPDF={handleExportPDF}\n          onExportExcel={handleExportExcel}\n        />\n\n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"h-full flex flex-col\">\n            {/* Page Header */}\n            <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4\">\n              <div>\n                <h2 className=\"text-lg font-semibold\">\n                  {activeTab === \"project-params\" && \"Параметры объекта\"}\n                  {activeTab === \"works\" && \"Виды работ\"}\n                  {activeTab === \"materials\" && \"Материалы\"}\n                  {activeTab === \"estimate\" && \"Смета\"}\n                  {activeTab === \"reports\" && \"Отчеты\"}\n                  {activeTab === \"material-prices\" && \"Цены на материалы\"}\n                  {activeTab === \"hierarchy-db\" && \"База работ\"}\n                  {activeTab === \"area-linking\" && \"Привязка площадей к работам\"}\n                </h2>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {activeTab === \"project-params\" && \"Настройка параметров объекта строительства\"}\n                  {activeTab === \"works\" && \"Управление видами работ проекта с количеством и суммами\"}\n                  {activeTab === \"materials\" && \"Управление материалами проекта\"}\n                  {activeTab === \"estimate\" && \"Просмотр и экспорт сметы\"}\n                  {activeTab === \"reports\" && \"Отчёты и аналитика\"}\n                  {activeTab === \"material-prices\" && \"Управление ценами материалов и ссылками\"}\n                  {activeTab === \"hierarchy-db\" && \"Управление иерархической структурой работ\"}\n                  {activeTab === \"area-linking\" && \"Автоматическое заполнение объемов работ на основе площадей помещений\"}\n                </p>\n              </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              {activeTab === \"project-params\" && (\n                <div className=\"space-y-6\">\n                  {/* Верхняя секция с двумя колонками */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    {/* Основные параметры */}\n                    <div>\n                      <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\">\n                        <h3 className=\"text-lg font-semibold mb-4\">Основные параметры объекта</h3>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">Название объекта</label>\n                            <input \n                              type=\"text\" \n                              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                              placeholder=\"Введите название объекта\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">Адрес объекта</label>\n                            <input \n                              type=\"text\" \n                              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                              placeholder=\"Введите адрес объекта\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <label className=\"block text-sm font-medium mb-2\">Номер договора</label>\n                              <input \n                                type=\"text\" \n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                                placeholder=\"№ 001/2025\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"block text-sm font-medium mb-2\">Срок выполнения (рабочих дней)</label>\n                              <input \n                                type=\"number\" \n                                min=\"1\"\n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                                placeholder=\"30\"\n                              />\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <label className=\"block text-sm font-medium mb-2\">Заказчик</label>\n                              <input \n                                type=\"text\" \n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                                placeholder=\"Наименование заказчика\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"block text-sm font-medium mb-2\">Подрядчик</label>\n                              <input \n                                type=\"text\" \n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                                placeholder=\"Наименование подрядчика\"\n                              />\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <label className=\"block text-sm font-medium mb-2\">Общая площадь (м²)</label>\n                              <input \n                                type=\"number\" \n                                value={roomsData.reduce((sum, room) => sum + (room.floorArea || 0), 0).toFixed(2)}\n                                readOnly\n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-yellow-50 dark:bg-yellow-900/20 text-gray-700 dark:text-gray-300 cursor-not-allowed\"\n                                placeholder=\"0\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"block text-sm font-medium mb-2\">Количество этажей</label>\n                              <input \n                                type=\"number\" \n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                                placeholder=\"1\"\n                              />\n                            </div>\n                          </div>\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">Тип объекта</label>\n                            <select className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\">\n                              <option value=\"\">Выберите тип объекта</option>\n                              <option value=\"residential\">Жилой дом</option>\n                              <option value=\"commercial\">Коммерческое здание</option>\n                              <option value=\"industrial\">Промышленное здание</option>\n                              <option value=\"other\">Другое</option>\n                            </select>\n                          </div>\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">Примечания</label>\n                            <textarea \n                              rows={3}\n                              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700\"\n                              placeholder=\"Дополнительная информация об объекте\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Сводная таблица габаритов */}\n                    <div>\n                      <SummaryTable roomsData={roomsData} />\n                    </div>\n                  </div>\n\n                  {/* Таблица габаритов помещений */}\n                  <RoomParametersTable onDataChange={handleRoomDataChange} />\n                </div>\n              )}\n\n              {activeTab === \"works\" && (\n                !currentProject ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <div className=\"text-center text-gray-500 dark:text-gray-400\">\n                      <h3 className=\"text-lg font-medium mb-2\">Нет выбранного проекта</h3>\n                      <p>Выберите проект из списка выше</p>\n                    </div>\n                  </div>\n                ) : (\n                  <WorksEstimate projectId={currentProjectId} />\n                )\n              )}\n\n              {activeTab === \"material-prices\" && (\n                <MaterialPrices />\n              )}\n\n              {activeTab === \"hierarchy-db\" && (\n                <HierarchyDatabase />\n              )}\n\n              {activeTab === \"area-linking\" && (\n                <AreaWorkLinking \n                  roomsData={roomsData}\n                  onAreaLinkingChange={(taskId, config) => {\n                    // Обновление конфигурации привязки площадей\n                    console.log(\"Area linking updated:\", taskId, config);\n                  }}\n                />\n              )}\n\n              {activeTab === \"estimate\" && (\n                <DetailedEstimate projectId={currentProjectId} />\n              )}\n\n              {(activeTab === \"materials\" || activeTab === \"reports\") && (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center text-gray-500 dark:text-gray-400\">\n                    <h3 className=\"text-lg font-medium mb-2\">Раздел в разработке</h3>\n                    <p>Этот раздел будет добавлен в следующих версиях</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Project Summary */}\n      <ProjectSummary\n        project={currentProject}\n        onGenerateReport={() => toast({ title: \"Генерация отчёта\", description: \"Функция будет реализована\" })}\n        onExportPDF={handleExportPDF}\n        onExportExcel={handleExportExcel}\n      />\n\n      {/* Modals */}\n      {currentProject && (\n        <>\n          <WorkModal\n            isOpen={isWorkModalOpen}\n            onClose={() => setIsWorkModalOpen(false)}\n            projectId={currentProjectId}\n            editingWork={editingWork}\n          />\n\n          {selectedWork && (\n            <MaterialModal\n              isOpen={isMaterialModalOpen}\n              onClose={() => setIsMaterialModalOpen(false)}\n              workItem={selectedWork}\n              projectId={currentProjectId}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":18225},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/hierarchical-import.ts":{"content":"import XLSX from 'xlsx';\nimport { storage } from './storage';\nimport { InsertSection, InsertTask } from \"@shared/schema\";\n\ninterface ParsedRecord {\n  index: string;\n  title: string;\n  unit?: string;\n  costPrice?: string;\n  type: 'section' | 'subsection' | 'task' | 'ignore';\n  orderNum: number;\n}\n\ninterface ImportResult {\n  imported: {\n    sections: number;\n    tasks: number;\n  };\n  errors: string[];\n}\n\n/**\n * Определяет тип записи по индексу и дополнительной информации\n */\nexport function determineRecordType(index: string, title?: string, unit?: string): 'section' | 'subsection' | 'task' | 'ignore' {\n  if (!index || typeof index !== 'string') return 'ignore';\n  \n  const trimmed = index.trim();\n  \n  // Игнорируем пустые строки и служебные записи\n  if (trimmed === '' || trimmed.startsWith('ИТОГО') || trimmed.startsWith('Всего') || trimmed.startsWith('№')) {\n    return 'ignore';\n  }\n  \n  // Раздел: оканчивается на \"-\" и не содержит точек (например: \"1-\", \"6-\")\n  if (trimmed.endsWith('-') && !trimmed.includes('.')) {\n    return 'section';\n  }\n  \n  // Подраздел: оканчивается на \"-\" и содержит точку (например: \"1.1-\", \"6.2-\")\n  if (trimmed.endsWith('-') && trimmed.includes('.')) {\n    return 'subsection';\n  }\n  \n  // Специальная логика: если нет единицы измерения и название начинается с индекса + пробел,\n  // то это подраздел (например: \"4.1 Демонтаж душевой кабины\")\n  if (!unit && title && title.startsWith(trimmed + ' ')) {\n    return 'subsection';\n  }\n  \n  // Работа: не оканчивается на \"-\" и содержит цифры (например: \"1.1.1\", \"6.2.3\")\n  if (!trimmed.endsWith('-') && /\\d/.test(trimmed)) {\n    return 'task';\n  }\n  \n  return 'ignore';\n}\n\n/**\n * Извлекает индекс без минуса для хранения\n */\nexport function extractCleanIndex(index: string): string {\n  return index.trim().replace(/-$/, '');\n}\n\n/**\n * Находит родительский раздел для подраздела или работы\n */\nexport function findParentIndex(index: string): string | null {\n  const clean = extractCleanIndex(index);\n  const parts = clean.split('.');\n  \n  if (parts.length === 1) {\n    // Это корневой раздел, родителя нет\n    return null;\n  }\n  \n  // Убираем последнюю часть для получения родителя\n  const parentParts = parts.slice(0, -1);\n  return parentParts.join('.');\n}\n\n/**\n * Парсит Excel файл и определяет структуру\n */\nexport function parseHierarchicalExcel(buffer: Buffer): ParsedRecord[] {\n  console.log('=== НАЧАЛО ПАРСИНГА ===');\n  \n  // Проверяем по заголовку файла - Excel файлы начинаются с PK (ZIP-архив)\n  // Также проверяем наличие подписи Excel в начале файла\n  const hasZipSignature = buffer.length > 4 && \n    buffer[0] === 0x50 && buffer[1] === 0x4B && // PK магический номер\n    (buffer[2] === 0x03 || buffer[2] === 0x05 || buffer[2] === 0x07); // Дополнительная проверка ZIP\n  \n  // Дополнительная проверка: ищем подпись Excel файлов\n  const bufferStr = buffer.toString('binary', 0, Math.min(buffer.length, 1000));\n  const hasExcelSignature = bufferStr.includes('xl/') || bufferStr.includes('docProps/') || \n                           bufferStr.includes('[Content_Types].xml');\n  \n  const isExcel = hasZipSignature || hasExcelSignature;\n  \n  console.log('Тип файла:', isExcel ? 'Excel' : 'CSV');\n  \n  let jsonData: any[][];\n  \n  if (!isExcel) {\n    // Для CSV файлов - парсим как текст с правильной кодировкой\n    try {\n      const fileStr = buffer.toString('utf8');\n      const lines = fileStr.split('\\n').filter(line => line.trim().length > 0);\n    \n    // Автоопределение разделителя: проверяем первую строку\n    const firstLine = lines[0] || '';\n    const hasSemicolon = firstLine.includes(';');\n    const hasComma = firstLine.includes(',');\n    const delimiter = hasSemicolon ? ';' : ',';\n    \n    console.log('Определён разделитель:', delimiter === ';' ? 'точка с запятой' : 'запятая');\n    \n    jsonData = lines.map(line => {\n      // Разделяем по найденному разделителю, учитывая кавычки\n      const result: string[] = [];\n      let current = '';\n      let inQuotes = false;\n      \n      for (let i = 0; i < line.length; i++) {\n        const char = line[i];\n        if (char === '\"') {\n          inQuotes = !inQuotes;\n        } else if (char === delimiter && !inQuotes) {\n          result.push(current.trim());\n          current = '';\n        } else {\n          current += char;\n        }\n      }\n      result.push(current.trim());\n      return result;\n    });\n    } catch (error) {\n      console.log('Ошибка при чтении как CSV, пробуем как Excel файл...');\n      // Если не удалось прочитать как CSV, пробуем как Excel\n      const workbook = XLSX.read(buffer, { \n        type: \"buffer\",\n        codepage: 65001 // UTF-8 кодировка\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      \n      jsonData = XLSX.utils.sheet_to_json(worksheet, { \n        header: 1,\n        defval: null \n      });\n    }\n  } else {\n    // Для Excel файлов\n    const workbook = XLSX.read(buffer, { \n      type: \"buffer\",\n      codepage: 65001 // UTF-8 кодировка\n    });\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    \n    jsonData = XLSX.utils.sheet_to_json(worksheet, { \n      header: 1,\n      defval: null \n    });\n  }\n\n  const records: ParsedRecord[] = [];\n  let orderNum = 0;\n\n  console.log('Всего строк для обработки:', jsonData.length);\n  console.log('Первые строки:', jsonData.slice(0, 3));\n\n  // Пропускаем заголовок (первую строку)\n  for (let i = 1; i < jsonData.length; i++) {\n    const row = jsonData[i] as any[];\n    \n    if (!row || row.length === 0) continue;\n    \n    // Обработка проблемы с Excel Date Serial Numbers  \n    let index = row[1]?.toString()?.trim(); // Столбец B (шифр)\n    const title = row[2]?.toString()?.trim();  // Столбец C (наименование)  \n    const unit = row[3]?.toString()?.trim() || '';   // Столбец D (единица измерения)\n    let costPrice = row[4]?.toString()?.trim() || ''; // Столбец E (себестоимость)\n    \n    // Исправляем русскую локализацию чисел: заменяем запятую на точку\n    if (costPrice && costPrice.includes(',')) {\n      costPrice = costPrice.replace(',', '.');\n      console.log(`Исправили число: \"${row[4]}\" -> \"${costPrice}\"`);\n    }\n    \n    // Обрабатываем некорректные значения вроде \"июл.00\" (Excel автопреобразование)\n    if (costPrice && /[а-яё]/i.test(costPrice)) {\n      console.log(`Пропускаем некорректное значение себестоимости: \"${costPrice}\"`);\n      costPrice = ''; // Очищаем некорректное значение\n    }\n    \n    // Исправляем Excel Date Serial Numbers для разделов  \n    if (index === '36892') index = '1-';     // 1- преобразуется в 36892\n    if (index === '36923') index = '2-';     // 2- преобразуется в 36923\n    if (index === '36954') index = '3-';     // 3- преобразуется в 36954\n    if (index === '36985') index = '4-';     // 4- и так далее...\n    if (index === '37016') index = '5-';\n    if (index === '37047') index = '6-';\n    if (index === '37078') index = '7-';\n    if (index === '37109') index = '8-';\n    if (index === '37140') index = '9-';\n    if (index === '37170') index = '10-';\n    if (index === '37201') index = '11-';\n    if (index === '37232') index = '12-';\n    if (index === '37263') index = '13-';\n    if (index === '37294') index = '14-';\n    if (index === '37325') index = '15-';\n    \n    if (!index || !title) {\n      console.log(`Пропускаем строку ${orderNum + 2}: шифр=\"${index}\", название=\"${title}\"`);\n      continue;\n    }\n    \n    const type = determineRecordType(index, title, unit);\n    console.log(`Строка ${orderNum + 2}: шифр=\"${index}\", тип=\"${type}\", единица=\"${unit}\"`);\n    if (type === 'ignore') continue;\n    \n    records.push({\n      index,\n      title,\n      unit,\n      costPrice,\n      type,\n      orderNum: orderNum++\n    });\n  }\n  \n  console.log('Всего записей создано:', records.length);\n  console.log('Записи:', records.map(r => ({ index: r.index, title: r.title, type: r.type })));\n  \n  return records;\n}\n\n/**\n * Импортирует иерархическую структуру в базу данных\n */\nexport async function importHierarchicalStructure(buffer: Buffer): Promise<ImportResult> {\n  const records = parseHierarchicalExcel(buffer);\n  const errors: string[] = [];\n  const sectionMap = new Map<string, string>(); // index -> id\n  let sectionsCreated = 0;\n  let tasksCreated = 0;\n\n  // Сортируем по уровню иерархии - сначала разделы, потом подразделы  \n  const sectionsAndSubsections = records.filter(r => r.type === 'section' || r.type === 'subsection')\n    .sort((a, b) => {\n      const aLevel = a.index.split('.').length;\n      const bLevel = b.index.split('.').length;\n      return aLevel - bLevel;\n    });\n\n  // Создаем разделы и подразделы в правильном порядке\n  for (const record of sectionsAndSubsections) {\n    try {\n      const cleanIndex = extractCleanIndex(record.index);\n      const parentIndex = findParentIndex(cleanIndex);\n      let parentId: string | null = null;\n      \n      if (parentIndex) {\n        parentId = sectionMap.get(parentIndex) || null;\n        if (!parentId) {\n          // Если родительский раздел не найден, создаем его автоматически\n          console.log(`Автосоздание родительского раздела \"${parentIndex}\" для \"${record.index}\"`);\n          const autoSectionData = {\n            index: parentIndex,\n            displayIndex: parentIndex + '-',\n            title: `Раздел ${parentIndex}`,\n            parentId: null,\n            orderNum: record.orderNum - 0.5\n          };\n          \n          const autoCreatedSection = await storage.createSection(autoSectionData);\n          sectionMap.set(parentIndex, autoCreatedSection.id);\n          parentId = autoCreatedSection.id;\n          sectionsCreated++;\n        }\n      }\n      \n      const sectionData = {\n        index: cleanIndex,\n        displayIndex: record.index,\n        title: record.title,\n        parentId,\n        orderNum: record.orderNum\n      };\n      \n      const createdSection = await storage.createSection(sectionData);\n      sectionMap.set(cleanIndex, createdSection.id);\n      sectionsCreated++;\n      \n    } catch (error) {\n      errors.push(`Строка ${record.orderNum + 2}: ${error instanceof Error ? error.message : 'неизвестная ошибка'}`);\n    }\n  }\n  \n  // Затем создаем все работы\n  for (const record of records) {\n    if (record.type === 'task') {\n      try {\n        const cleanIndex = extractCleanIndex(record.index);\n        const parentIndex = findParentIndex(cleanIndex);\n        \n        if (!parentIndex) {\n          errors.push(`Строка ${record.orderNum + 2}: работа \"${record.index}\" должна принадлежать разделу или подразделу`);\n          continue;\n        }\n        \n        let parentSectionId = sectionMap.get(parentIndex);\n        if (!parentSectionId) {\n          // Автоматически создаем отсутствующий подраздел\n          console.log(`Автосоздание подраздела \"${parentIndex}\" для работы \"${record.index}\"`);\n          try {\n            const autoSectionData = {\n              index: parentIndex,\n              displayIndex: parentIndex + '-',\n              title: `${parentIndex} Автоматически созданный подраздел`,\n              parentId: null, // Определим родителя позже если нужно\n              orderNum: record.orderNum - 0.5 // Ставим перед текущей работой\n            };\n            \n            const createdSection = await storage.createSection(autoSectionData);\n            sectionMap.set(parentIndex, createdSection.id);\n            parentSectionId = createdSection.id;\n            sectionsCreated++;\n            \n          } catch (createError) {\n            errors.push(`Строка ${record.orderNum + 2}: не удалось создать подраздел \"${parentIndex}\" для работы \"${record.index}\": ${createError instanceof Error ? createError.message : 'неизвестная ошибка'}`);\n            continue;\n          }\n        }\n        \n        // Для работ обязательны единица измерения и себестоимость\n        if (!record.unit || record.unit === \"\") {\n          console.log(`Пропускаем работу без единицы измерения: \"${record.index}\"`);\n          continue;\n        }\n        \n        // Проверяем наличие себестоимости\n        if (!record.costPrice || record.costPrice === \"\") {\n          console.log(`Пропускаем работу без себестоимости: \"${record.index}\"`);\n          continue;\n        }\n        \n        const taskData = {\n          index: cleanIndex,\n          displayIndex: record.index,\n          title: record.title,\n          unit: record.unit,\n          costPrice: record.costPrice,\n          parentSectionId,\n          orderNum: record.orderNum\n        };\n        \n        await storage.createTask(taskData as InsertTask);\n        tasksCreated++;\n        \n      } catch (error) {\n        errors.push(`Строка ${record.orderNum + 2}: ${error instanceof Error ? error.message : 'неизвестная ошибка'}`);\n      }\n    }\n  }\n  \n  return {\n    imported: {\n      sections: sectionsCreated,\n      tasks: tasksCreated\n    },\n    errors\n  };\n}","size_bytes":15057},"client/src/components/hierarchy-database.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useUndoRedoContext } from \"@/contexts/UndoRedoContext\";\nimport { \n  Upload, \n  Download, \n  Trash2, \n  Search, \n  TreePine,\n  Folder,\n  FileText,\n  Edit2,\n  Check,\n  X,\n  Calculator,\n  ChevronDown,\n  ChevronRight,\n  Plus,\n  Minus\n} from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport type { HierarchicalWorkStructure } from \"@shared/schema\";\n\nexport function HierarchyDatabase() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [editingTask, setEditingTask] = useState<string | null>(null);\n  const [editValue, setEditValue] = useState(\"\");\n  const [isCoeffDialogOpen, setIsCoeffDialogOpen] = useState(false);\n  const [coefficient, setCoefficient] = useState(\"\");\n  const [collapsedSections, setCollapsedSections] = useState<Set<string>>(new Set());\n  const [searchSuggestions, setSearchSuggestions] = useState<Array<{id: string, title: string, displayIndex: string, type: 'section' | 'task'}>>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [highlightedTask, setHighlightedTask] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { addAction } = useUndoRedoContext();\n\n  const { data: hierarchy, isLoading } = useQuery<HierarchicalWorkStructure>({\n    queryKey: [\"/api/hierarchy\"],\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      \n      const response = await fetch(\"/api/hierarchy/import\", {\n        method: \"POST\",\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (result: any) => {\n      // Добавляем действие в историю отмены\n      addAction({\n        description: `Импортирована иерархическая структура: ${result.imported.sections} разделов, ${result.imported.tasks} работ`,\n        undo: async () => {\n          const response = await fetch(\"/api/hierarchy/clear\", { method: \"DELETE\" });\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          queryClient.invalidateQueries({ queryKey: [\"/api/hierarchy\"] });\n        }\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/hierarchy\"] });\n      toast({\n        title: \"Импорт завершен\",\n        description: `Импортировано: ${result.imported.sections} разделов, ${result.imported.tasks} работ${result.errors?.length ? `. Ошибок: ${result.errors.length}` : \"\"}`,\n        variant: result.errors?.length ? \"destructive\" : \"default\",\n      });\n      \n      if (result.errors?.length > 0) {\n        console.error(\"Import errors:\", result.errors);\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка импорта\",\n        description: \"Не удалось импортировать иерархическую структуру\",\n        variant: \"destructive\",\n      });\n      console.error(\"Import error:\", error);\n    },\n  });\n\n  const clearMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/hierarchy/clear\", { method: \"DELETE\" });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hierarchy\"] });\n      toast({\n        title: \"База очищена\",\n        description: \"Иерархическая структура успешно очищена\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось очистить базу данных\",\n        variant: \"destructive\",\n      });\n      console.error(\"Clear error:\", error);\n    },\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, costPrice, previousPrice, taskTitle }: { \n      taskId: string; \n      costPrice: string; \n      previousPrice: string;\n      taskTitle: string;\n    }) => {\n      const response = await fetch(`/api/hierarchy/tasks/${taskId}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ costPrice }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      // Добавляем действие в историю отмены\n      addAction({\n        description: `Изменена себестоимость \"${variables.taskTitle}\" с ${variables.previousPrice}₽ на ${variables.costPrice}₽`,\n        undo: async () => {\n          const response = await fetch(`/api/hierarchy/tasks/${variables.taskId}`, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ costPrice: variables.previousPrice }),\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          queryClient.invalidateQueries({ queryKey: [\"/api/hierarchy\"] });\n        }\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/hierarchy\"] });\n      setEditingTask(null);\n      setEditValue(\"\");\n      toast({\n        title: \"Обновлено\",\n        description: \"Себестоимость успешно обновлена\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить себестоимость\",\n        variant: \"destructive\",\n      });\n      console.error(\"Update error:\", error);\n    },\n  });\n\n  const bulkUpdateMutation = useMutation({\n    mutationFn: async (coefficient: number) => {\n      const response = await fetch(\"/api/hierarchy/bulk-update\", {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ coefficient }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (result, coefficient) => {\n      // Добавляем действие в историю отмены\n      addAction({\n        description: `Массовое обновление цен на ${((coefficient - 1) * 100).toFixed(1)}% для ${result.updated} работ`,\n        undo: async () => {\n          // Применяем обратный коэффициент\n          const reverseCoeff = 1 / coefficient;\n          const response = await fetch(\"/api/hierarchy/bulk-update\", {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ coefficient: reverseCoeff }),\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          queryClient.invalidateQueries({ queryKey: [\"/api/hierarchy\"] });\n        }\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/hierarchy\"] });\n      setIsCoeffDialogOpen(false);\n      setCoefficient(\"\");\n      toast({\n        title: \"Массовое обновление завершено\",\n        description: `Обновлено ${result.updated} работ`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось выполнить массовое обновление\",\n        variant: \"destructive\",\n      });\n      console.error(\"Bulk update error:\", error);\n    },\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      importMutation.mutate(file);\n    }\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  const handleDownloadTemplate = () => {\n    window.open(\"/api/hierarchy/template\", \"_blank\");\n  };\n\n  const handleClearDatabase = () => {\n    if (window.confirm(\"Вы уверены, что хотите очистить всю иерархическую структуру? Это действие нельзя отменить.\")) {\n      clearMutation.mutate();\n    }\n  };\n\n  const handleEditTask = (taskId: string, currentPrice: string) => {\n    setEditingTask(taskId);\n    setEditValue(currentPrice);\n  };\n\n  const handleSaveTask = (taskId: string) => {\n    if (editValue.trim() === \"\") {\n      toast({\n        title: \"Ошибка\",\n        description: \"Себестоимость не может быть пустой\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Находим задачу для получения текущей цены и названия\n    const findTask = (sections: any[]): any => {\n      for (const section of sections) {\n        for (const task of section.tasks || []) {\n          if (task.id === taskId) return task;\n        }\n        if (section.children) {\n          const found = findTask(section.children);\n          if (found) return found;\n        }\n      }\n      return null;\n    };\n    \n    const task = hierarchy?.sections ? findTask(hierarchy.sections) : null;\n    if (!task) return;\n    \n    updateTaskMutation.mutate({ \n      taskId, \n      costPrice: editValue,\n      previousPrice: task.costPrice || \"0\",\n      taskTitle: task.title\n    });\n  };\n\n  const handleCancelEdit = () => {\n    setEditingTask(null);\n    setEditValue(\"\");\n  };\n\n  const handleBulkUpdate = () => {\n    const coeffValue = parseFloat(coefficient);\n    if (isNaN(coeffValue) || coeffValue <= 0) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Введите корректный коэффициент (число больше 0)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (window.confirm(`Применить коэффициент ${coeffValue}% ко всем работам? Это действие нельзя отменить.`)) {\n      bulkUpdateMutation.mutate(coeffValue);\n    }\n  };\n\n  const toggleSection = (sectionId: string) => {\n    setCollapsedSections(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sectionId)) {\n        newSet.delete(sectionId);\n      } else {\n        newSet.add(sectionId);\n      }\n      return newSet;\n    });\n  };\n\n  const expandAll = () => {\n    setCollapsedSections(new Set());\n  };\n\n  const collapseAll = () => {\n    if (!hierarchy?.sections) return;\n    const allSectionIds = new Set<string>();\n    \n    const collectIds = (sections: any[]) => {\n      sections.forEach(section => {\n        allSectionIds.add(section.id);\n        if (section.children) collectIds(section.children);\n      });\n    };\n    \n    collectIds(hierarchy.sections);\n    setCollapsedSections(allSectionIds);\n  };\n\n  const generateSearchSuggestions = (query: string) => {\n    if (!hierarchy?.sections || query.length < 2) {\n      setSearchSuggestions([]);\n      setShowSuggestions(false);\n      return;\n    }\n\n    const suggestions: Array<{id: string, title: string, displayIndex: string, type: 'section' | 'task'}> = [];\n    const lowerQuery = query.toLowerCase();\n\n    const collectSuggestions = (sections: any[]) => {\n      sections.forEach(section => {\n        // Добавляем разделы\n        if (section.title.toLowerCase().includes(lowerQuery) || section.displayIndex.toLowerCase().includes(lowerQuery)) {\n          suggestions.push({\n            id: section.id,\n            title: section.title,\n            displayIndex: section.displayIndex,\n            type: 'section'\n          });\n        }\n\n        // Добавляем работы\n        section.tasks?.forEach((task: any) => {\n          if (task.title.toLowerCase().includes(lowerQuery) || task.displayIndex.toLowerCase().includes(lowerQuery)) {\n            suggestions.push({\n              id: task.id,\n              title: task.title,\n              displayIndex: task.displayIndex,\n              type: 'task'\n            });\n          }\n        });\n\n        // Рекурсивно обрабатываем подразделы\n        if (section.children) collectSuggestions(section.children);\n      });\n    };\n\n    collectSuggestions(hierarchy.sections);\n    setSearchSuggestions(suggestions.slice(0, 10)); // Ограничиваем количество подсказок\n    setShowSuggestions(true);\n  };\n\n  const handleSearchInputChange = (value: string) => {\n    setSearchQuery(value);\n    generateSearchSuggestions(value);\n  };\n\n  const handleSuggestionClick = (suggestion: {id: string, title: string, displayIndex: string, type: 'section' | 'task'}) => {\n    setSearchQuery(suggestion.displayIndex + \" \" + suggestion.title);\n    setShowSuggestions(false);\n    \n    // Подсвечиваем выбранный элемент\n    setHighlightedTask(suggestion.id);\n    setTimeout(() => setHighlightedTask(null), 3000); // Убираем подсветку через 3 секунды\n    \n    // Разворачиваем все разделы для показа найденного элемента\n    if (suggestion.type === 'task') {\n      expandAll();\n    }\n  };\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setShowSuggestions(false);\n    // При нажатии Enter фильтруем по ключевому слову\n    // Логика фильтрации уже работает через filteredSections\n  };\n\n  const renderSection = (section: any, level: number = 0) => {\n    const indent = level * 20;\n    const isCollapsed = collapsedSections.has(section.id);\n    const hasChildren = (section.children && section.children.length > 0) || (section.tasks && section.tasks.length > 0);\n    \n    return (\n      <div key={section.id} className=\"space-y-2\">\n        <div \n          className=\"flex items-center p-3 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\n          style={{ marginLeft: `${indent}px` }}\n          onClick={() => hasChildren && toggleSection(section.id)}\n        >\n          {hasChildren ? (\n            isCollapsed ? (\n              <Plus className=\"h-4 w-4 text-gray-500 mr-2\" />\n            ) : (\n              <Minus className=\"h-4 w-4 text-gray-500 mr-2\" />\n            )\n          ) : (\n            <div className=\"w-4 h-4 mr-2\" /> // Пустое место для выравнивания\n          )}\n          <Folder className=\"h-4 w-4 text-blue-500 mr-2\" />\n          <span className=\"font-medium text-blue-700 dark:text-blue-300 mr-2\">\n            {section.displayIndex}\n          </span>\n          <span className=\"text-sm\">{section.title}</span>\n          {hasChildren && (\n            <span className=\"ml-auto text-xs text-gray-500\">\n              {isCollapsed ? 'Свернуто' : 'Развернуто'}\n            </span>\n          )}\n        </div>\n        \n        {/* Показываем содержимое только если раздел развернут */}\n        {!isCollapsed && (\n          <>\n            {/* Подразделы */}\n            {section.children?.map((child: any) => renderSection(child, level + 1))}\n            \n            {/* Работы */}\n            {section.tasks?.map((task: any) => (\n              <div \n                key={task.id}\n                className={`flex items-center p-2 rounded border transition-all duration-500 ${\n                  highlightedTask === task.id \n                    ? 'bg-yellow-100 dark:bg-yellow-900/30 border-yellow-400 dark:border-yellow-600 shadow-md' \n                    : 'bg-white dark:bg-gray-800 border-gray-100 dark:border-gray-600'\n                }`}\n                style={{ marginLeft: `${(level + 1) * 20}px` }}\n              >\n                <FileText className=\"h-4 w-4 text-green-500 mr-2\" />\n                <span className=\"text-sm font-mono text-gray-600 dark:text-gray-400 mr-2\">\n                  {task.displayIndex}\n                </span>\n                <span className=\"text-sm flex-1\">{task.title}</span>\n                <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                  <Badge variant=\"outline\">{task.unit}</Badge>\n                  {editingTask === task.id ? (\n                    <div className=\"flex items-center space-x-1\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editValue}\n                        onChange={(e) => setEditValue(e.target.value)}\n                        className=\"w-20 h-6 text-xs\"\n                        placeholder=\"0.00\"\n                      />\n                      <span className=\"text-xs\">₽</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => handleSaveTask(task.id)}\n                        disabled={updateTaskMutation.isPending}\n                      >\n                        <Check className=\"h-3 w-3 text-green-600\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={handleCancelEdit}\n                      >\n                        <X className=\"h-3 w-3 text-red-600\" />\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-1\">\n                      <span className=\"font-medium\">\n                        {task.costPrice ? `${task.costPrice} ₽` : \"Не указана\"}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => handleEditTask(task.id, task.costPrice || \"\")}\n                      >\n                        <Edit2 className=\"h-3 w-3 text-gray-400 hover:text-blue-600\" />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const filteredSections = hierarchy?.sections?.filter(section => {\n    if (!searchQuery) return true;\n    const query = searchQuery.toLowerCase();\n    return (\n      section.title.toLowerCase().includes(query) ||\n      section.displayIndex.toLowerCase().includes(query) ||\n      section.children?.some((child: any) => \n        child.title.toLowerCase().includes(query) ||\n        child.displayIndex.toLowerCase().includes(query) ||\n        child.tasks?.some((task: any) =>\n          task.title.toLowerCase().includes(query) ||\n          task.displayIndex.toLowerCase().includes(query)\n        )\n      ) ||\n      section.tasks?.some((task: any) => \n        task.title.toLowerCase().includes(query) ||\n        task.displayIndex.toLowerCase().includes(query)\n      )\n    );\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Иерархическая структура работ\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Управление разделами, подразделами и работами\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <TreePine className=\"h-6 w-6 text-primary\" />\n        </div>\n      </div>\n\n      {/* Статистика */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Всего разделов</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{\n              (() => {\n                if (!hierarchy?.sections) return 0;\n                // Подсчитываем все разделы (включая корневые и подразделы)\n                const allSectionsCount = hierarchy.sections.reduce((total, section) => {\n                  let count = 1; // сам раздел\n                  const countChildren = (children) => {\n                    if (!children || !Array.isArray(children)) return 0;\n                    return children.reduce((childTotal, child) => {\n                      return childTotal + 1 + countChildren(child.children);\n                    }, 0);\n                  };\n                  count += countChildren(section.children);\n                  return total + count;\n                }, 0);\n                return allSectionsCount;\n              })()\n            }</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Всего подразделов</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{\n              (() => {\n                if (!hierarchy?.sections) return 0;\n                // Подсчитываем только подразделы (дочерние элементы)\n                const countSubsections = (sections) => {\n                  if (!sections || !Array.isArray(sections)) return 0;\n                  return sections.reduce((total, section) => {\n                    const childrenCount = section.children ? section.children.length : 0;\n                    const grandChildrenCount = countSubsections(section.children);\n                    return total + childrenCount + grandChildrenCount;\n                  }, 0);\n                };\n                return countSubsections(hierarchy.sections);\n              })()\n            }</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Всего работ</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">{hierarchy?.totalTasks || 0}</div>\n          </CardContent>\n        </Card>\n\n      </div>\n\n      {/* Управление данными */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Управление данными</CardTitle>\n          <CardDescription>\n            Импорт базы работ из Excel файла\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              onClick={() => fileInputRef.current?.click()}\n              disabled={importMutation.isPending}\n              className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              <Upload className=\"h-4 w-4\" />\n              <span>\n                {importMutation.isPending ? \"Импорт...\" : \"Импорт из Excel\"}\n              </span>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              onClick={handleDownloadTemplate}\n              className=\"flex items-center space-x-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              <span>Скачать шаблон</span>\n            </Button>\n            \n            <Dialog open={isCoeffDialogOpen} onOpenChange={setIsCoeffDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"secondary\" className=\"flex items-center space-x-2\">\n                  <Calculator className=\"h-4 w-4\" />\n                  <span>Коэффициент цен</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Массовое изменение себестоимости</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"coefficient\">Коэффициент изменения (%)</Label>\n                    <Input\n                      id=\"coefficient\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      placeholder=\"Например: 110 для увеличения на 10%\"\n                      value={coefficient}\n                      onChange={(e) => setCoefficient(e.target.value)}\n                    />\n                    <div className=\"text-sm text-gray-500\">\n                      <p>• 110% = увеличение на 10%</p>\n                      <p>• 90% = уменьшение на 10%</p>\n                      <p>• 150% = увеличение в 1.5 раза</p>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setIsCoeffDialogOpen(false)}\n                    >\n                      Отмена\n                    </Button>\n                    <Button \n                      onClick={handleBulkUpdate}\n                      disabled={bulkUpdateMutation.isPending}\n                    >\n                      {bulkUpdateMutation.isPending ? \"Применяю...\" : \"Применить\"}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Button \n              variant=\"destructive\" \n              onClick={handleClearDatabase}\n              disabled={clearMutation.isPending}\n              className=\"flex items-center space-x-2\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n              <span>\n                {clearMutation.isPending ? \"Очистка...\" : \"Очистить базу\"}\n              </span>\n            </Button>\n          </div>\n\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            onChange={handleFileUpload}\n            accept=\".xlsx,.xls,.csv\"\n            className=\"hidden\"\n          />\n        </CardContent>\n      </Card>\n\n      {/* Поиск */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Поиск и просмотр</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <form onSubmit={handleSearchSubmit} className=\"flex items-center space-x-2\">\n              <Search className=\"h-4 w-4 text-gray-400\" />\n              <Input\n                ref={searchInputRef}\n                placeholder=\"Поиск по названию или шифру... (Enter для фильтрации)\"\n                value={searchQuery}\n                onChange={(e) => handleSearchInputChange(e.target.value)}\n                onFocus={() => searchQuery.length >= 2 && setShowSuggestions(true)}\n                onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n                className=\"flex-1\"\n              />\n            </form>\n            \n            {/* Подсказки поиска */}\n            {showSuggestions && searchSuggestions.length > 0 && (\n              <div className=\"absolute top-full left-0 right-0 z-50 mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto\">\n                {searchSuggestions.map((suggestion, index) => (\n                  <div\n                    key={`${suggestion.type}-${suggestion.id}`}\n                    className=\"flex items-center p-3 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer border-b border-gray-100 dark:border-gray-700 last:border-b-0\"\n                    onClick={() => handleSuggestionClick(suggestion)}\n                  >\n                    {suggestion.type === 'section' ? (\n                      <Folder className=\"h-4 w-4 text-blue-500 mr-3\" />\n                    ) : (\n                      <FileText className=\"h-4 w-4 text-green-500 mr-3\" />\n                    )}\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">\n                        {suggestion.displayIndex}\n                      </div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        {suggestion.title}\n                      </div>\n                    </div>\n                    <Badge variant={suggestion.type === 'section' ? 'secondary' : 'outline'} className=\"text-xs\">\n                      {suggestion.type === 'section' ? 'Раздел' : 'Работа'}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Иерархическая структура */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle>Структура работ</CardTitle>\n              <CardDescription>\n                Показано {filteredSections?.length || 0} из {hierarchy?.sections?.length || 0} корневых разделов\n              </CardDescription>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={expandAll}\n                className=\"text-xs\"\n              >\n                Развернуть все\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={collapseAll}\n                className=\"text-xs\"\n              >\n                Свернуть все\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-gray-500\">Загрузка структуры...</div>\n            </div>\n          ) : !hierarchy?.sections?.length ? (\n            <div className=\"text-center py-8\">\n              <TreePine className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <div className=\"text-gray-500 mb-2\">Иерархическая структура пуста</div>\n              <div className=\"text-sm text-gray-400 mb-4\">\n                Импортируйте данные из Excel файла для начала работы\n              </div>\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 text-left\">\n                <div className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  <strong>Важно:</strong> Прикрепленный файл содержит каталог материалов, а не базу работ. \n                  Скачайте шаблон для базы работ, заполните его и импортируйте.\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {filteredSections?.map(section => renderSection(section))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":32637},"client/src/components/material-prices.tsx":{"content":"import { useState, useRef, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useUndoRedoContext } from \"@/contexts/UndoRedoContext\";\nimport { \n  Search, \n  Edit2, \n  Check, \n  X, \n  DollarSign,\n  ExternalLink,\n  Trash2,\n  Upload,\n  Download\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Material } from \"@shared/schema\";\n\nexport function MaterialPrices() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingMaterial, setEditingMaterial] = useState<string | null>(null);\n  const [editPrice, setEditPrice] = useState(\"\");\n  const [showOnlyErrors, setShowOnlyErrors] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(100);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { addAction } = useUndoRedoContext();\n\n  const { data: materials = [], isLoading } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  // Функция для определения проблем с материалом\n  const getMaterialIssues = (material: Material): string[] => {\n    const issues: string[] = [];\n    \n    if (!material.pricePerUnit || parseFloat(material.pricePerUnit) <= 0) {\n      issues.push(\"Без цены\");\n    }\n    \n    if (!material.name || material.name.trim() === \"\") {\n      issues.push(\"Без названия\");\n    }\n    \n    if (!material.unit || material.unit.trim() === \"\") {\n      issues.push(\"Без единицы измерения\");\n    }\n    \n    if (material.name && (material.name.toLowerCase().includes('ошибка') || material.name.toLowerCase().includes('error'))) {\n      issues.push(\"Ошибка в названии\");\n    }\n    \n    return issues;\n  };\n\n  const hasMaterialIssues = (material: Material): boolean => {\n    return getMaterialIssues(material).length > 0;\n  };\n\n  const updatePriceMutation = useMutation({\n    mutationFn: async ({ id, price, previousPrice, materialName }: { \n      id: string; \n      price: number; \n      previousPrice: string;\n      materialName: string;\n    }) => {\n      return apiRequest(\"PATCH\", `/api/materials/${id}`, { pricePerUnit: price.toString() });\n    },\n    onSuccess: (_, variables) => {\n      // Добавляем действие в историю отмены\n      addAction({\n        description: `Изменена цена \"${variables.materialName}\" с ${variables.previousPrice}₽ на ${variables.price}₽`,\n        undo: async () => {\n          await apiRequest(\"PATCH\", `/api/materials/${variables.id}`, { \n            pricePerUnit: variables.previousPrice \n          });\n          queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n        }\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      setEditingMaterial(null);\n      setEditPrice(\"\");\n      toast({\n        title: \"Успех\",\n        description: \"Цена материала обновлена\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить цену материала\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      \n      const response = await fetch(\"/api/materials/import\", {\n        method: \"POST\",\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (result: any) => {\n      // Добавляем действие в историю отмены\n      addAction({\n        description: `Импортировано ${result.imported} материалов из Excel`,\n        undo: async () => {\n          // Здесь можно реализовать логику отмены импорта\n          // Например, удаление всех добавленных материалов\n          await apiRequest(\"DELETE\", \"/api/materials/clear\");\n          queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n        }\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Импорт завершен\",\n        description: `Импортировано: ${result.imported} материалов${result.errors?.length ? `. Ошибок: ${result.errors.length}` : \"\"}`,\n        variant: result.errors?.length ? \"destructive\" : \"default\",\n      });\n      \n      if (result.errors?.length > 0) {\n        console.error(\"Import errors:\", result.errors);\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка импорта\",\n        description: \"Не удалось импортировать данные материалов\",\n        variant: \"destructive\",\n      });\n      console.error(\"Import error:\", error);\n    },\n  });\n\n  const clearMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"DELETE\", \"/api/materials/clear\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Успех\",\n        description: \"База материалов очищена\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось очистить базу материалов\",\n        variant: \"destructive\",\n      });\n      console.error(\"Clear error:\", error);\n    },\n  });\n\n  // Мемоизированная фильтрация для производительности\n  const filteredMaterials = useMemo(() => {\n    return materials.filter(material => {\n      // Фильтр по поисковому запросу\n      const searchLower = searchTerm.toLowerCase();\n      const matchesSearch = !searchTerm || \n        material.name.toLowerCase().includes(searchLower) ||\n        material.unit.toLowerCase().includes(searchLower);\n      \n      // Фильтр только с ошибками\n      const matchesErrorFilter = showOnlyErrors ? hasMaterialIssues(material) : true;\n      \n      return matchesSearch && matchesErrorFilter;\n    });\n  }, [materials, searchTerm, showOnlyErrors]);\n\n  // Пагинация\n  const totalPages = Math.ceil(filteredMaterials.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentPageMaterials = filteredMaterials.slice(startIndex, endIndex);\n\n  const handleEditPrice = (materialId: string, currentPrice: string | number) => {\n    setEditingMaterial(materialId);\n    setEditPrice(currentPrice?.toString() || \"\");\n  };\n\n  const handleSavePrice = (materialId: string) => {\n    const price = parseFloat(editPrice);\n    if (isNaN(price) || price < 0) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Введите корректную цену\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Находим материал для получения текущей цены и названия\n    const material = materials.find(m => m.id === materialId);\n    if (!material) return;\n    \n    updatePriceMutation.mutate({ \n      id: materialId, \n      price,\n      previousPrice: material.pricePerUnit || \"0\",\n      materialName: material.name\n    });\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMaterial(null);\n    setEditPrice(\"\");\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      importMutation.mutate(file);\n    }\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  const handleClearDatabase = () => {\n    if (window.confirm(\"Вы уверены, что хотите очистить всю базу материалов? Это действие нельзя отменить.\")) {\n      clearMutation.mutate();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-500\">Загрузка материалов...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Статистика */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Всего материалов</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{materials.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">С ценами</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {materials.filter(m => m.pricePerUnit && parseFloat(m.pricePerUnit) > 0).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card \n          className={`cursor-pointer transition-colors ${showOnlyErrors ? 'ring-2 ring-red-500 bg-red-50 dark:bg-red-950/20' : 'hover:bg-gray-50 dark:hover:bg-gray-800'}`}\n          onClick={() => {\n            setShowOnlyErrors(!showOnlyErrors);\n            setCurrentPage(1); // Сбрасываем на первую страницу при смене фильтра\n            if (!showOnlyErrors) {\n              setSearchTerm(\"\"); // Очищаем поиск при включении фильтра ошибок\n            }\n          }}\n        >\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center space-x-2\">\n              <span>С ошибками</span>\n              {showOnlyErrors && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Активен\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {materials.filter(m => hasMaterialIssues(m)).length}\n            </div>\n            <div className=\"text-xs text-gray-500 mt-1\">\n              {showOnlyErrors ? \"Показаны только ошибки\" : \"Клик для фильтрации\"}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Управление данными */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Управление данными</CardTitle>\n          <CardDescription>\n            Импорт материалов из Excel файла и управление базой\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              onClick={() => fileInputRef.current?.click()}\n              disabled={importMutation.isPending}\n              className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              <Upload className=\"h-4 w-4\" />\n              <span>\n                {importMutation.isPending ? \"Импорт...\" : \"Импорт из Excel\"}\n              </span>\n            </Button>\n            \n            <Button \n              onClick={() => window.open('/api/materials/template', '_blank')}\n              variant=\"outline\"\n              className=\"flex items-center space-x-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              <span>Скачать шаблон</span>\n            </Button>\n            \n            <Button \n              variant=\"destructive\" \n              onClick={handleClearDatabase}\n              disabled={clearMutation.isPending}\n              className=\"flex items-center space-x-2\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n              <span>\n                {clearMutation.isPending ? \"Очистка...\" : \"Очистить базу\"}\n              </span>\n            </Button>\n          </div>\n\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            onChange={handleFileUpload}\n            accept=\".xlsx,.xls,.csv\"\n            className=\"hidden\"\n          />\n        </CardContent>\n      </Card>\n\n      {/* Поиск и фильтры */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Поиск и фильтры</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Поиск по названию или единице измерения...\"\n              value={searchTerm}\n              onChange={(e) => {\n                const value = e.target.value;\n                setSearchTerm(value);\n                setCurrentPage(1); // Сбрасываем на первую страницу при поиске\n                if (value && showOnlyErrors) {\n                  setShowOnlyErrors(false); // Отключаем фильтр ошибок при поиске\n                }\n              }}\n              className=\"flex-1\"\n            />\n          </div>\n          \n          {showOnlyErrors && (\n            <div className=\"flex items-center justify-between p-3 bg-red-50 dark:bg-red-950/20 rounded-md border border-red-200 dark:border-red-800\">\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"destructive\">Фильтр активен</Badge>\n                <span className=\"text-sm text-red-700 dark:text-red-300\">\n                  Показаны только материалы с ошибками\n                </span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowOnlyErrors(false);\n                  setCurrentPage(1);\n                }}\n                className=\"text-red-600 hover:text-red-800\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Таблица цен */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle>Цены на материалы</CardTitle>\n              <CardDescription>\n                Показано {startIndex + 1}-{Math.min(endIndex, filteredMaterials.length)} из {filteredMaterials.length} материалов\n                {filteredMaterials.length !== materials.length && (\n                  <span className=\"text-blue-600 dark:text-blue-400 font-medium\">\n                    {\" \"}(отфильтровано из {materials.length})\n                  </span>\n                )}\n                {showOnlyErrors && (\n                  <span className=\"text-red-600 dark:text-red-400 font-medium\">\n                    {\" \"}(только с ошибками)\n                  </span>\n                )}\n                {totalPages > 1 && (\n                  <span className=\"text-gray-600 dark:text-gray-400 font-medium\">\n                    {\" \"}— Страница {currentPage} из {totalPages}\n                  </span>\n                )}\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {filteredMaterials.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <DollarSign className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <div className=\"text-gray-500\">Материалы не найдены</div>\n            </div>\n          ) : (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>№</TableHead>\n                    <TableHead>Наименование</TableHead>\n                    <TableHead>Цена</TableHead>\n                    <TableHead>Ссылка на картинку</TableHead>\n                    <TableHead>Ссылка на товар</TableHead>\n                    <TableHead>ЕД.ИЗМ</TableHead>\n                    <TableHead>Норма расхода на 1кв.м.</TableHead>\n                    <TableHead>Вес на единицу</TableHead>\n                    <TableHead>Действия</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {currentPageMaterials.map((material, index) => {\n                    const hasIssues = hasMaterialIssues(material);\n                    const issues = getMaterialIssues(material);\n                    \n                    return (\n                      <TableRow \n                        key={material.id}\n                        className={hasIssues ? \"bg-red-50 dark:bg-red-950/20 border-red-200 dark:border-red-800\" : \"\"}\n                      >\n                        <TableCell className=\"font-medium\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{startIndex + index + 1}</span>\n                            {hasIssues && (\n                              <div className=\"flex flex-wrap gap-1\">\n                                {issues.map((issue, idx) => (\n                                  <Badge \n                                    key={idx} \n                                    variant=\"destructive\" \n                                    className=\"text-xs\"\n                                    title={issue}\n                                  >\n                                    ⚠\n                                  </Badge>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div \n                          className={`truncate ${hasIssues ? \"text-red-700 dark:text-red-300\" : \"\"}`} \n                          title={hasIssues ? `${material.name} (Проблемы: ${issues.join(', ')})` : material.name}\n                        >\n                          {material.name}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {editingMaterial === material.id ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              value={editPrice}\n                              onChange={(e) => setEditPrice(e.target.value)}\n                              className=\"w-24 h-8\"\n                              placeholder=\"0.00\"\n                            />\n                            <span className=\"text-sm text-gray-500\">₽</span>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <span className={`font-medium ${!material.pricePerUnit || parseFloat(material.pricePerUnit) <= 0 ? \"text-red-600 dark:text-red-400\" : \"\"}`}>\n                              {material.pricePerUnit && parseFloat(material.pricePerUnit) > 0 ? `${material.pricePerUnit} ₽` : \"Не указана\"}\n                            </span>\n                            {(!material.pricePerUnit || parseFloat(material.pricePerUnit) <= 0) && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                Без цены\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {material.imageUrl ? (\n                          <a \n                            href={material.imageUrl} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            className=\"text-blue-600 hover:text-blue-800 flex items-center space-x-1\"\n                          >\n                            <ExternalLink className=\"h-3 w-3\" />\n                            <span className=\"text-xs\">Картинка</span>\n                          </a>\n                        ) : (\n                          <span className=\"text-gray-400 text-xs\">Нет ссылки</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {material.productUrl ? (\n                          <a \n                            href={material.productUrl} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            className=\"text-blue-600 hover:text-blue-800 flex items-center space-x-1\"\n                          >\n                            <ExternalLink className=\"h-3 w-3\" />\n                            <span className=\"text-xs\">Товар</span>\n                          </a>\n                        ) : (\n                          <span className=\"text-gray-400 text-xs\">Нет ссылки</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{material.unit}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        {material.consumptionRate || \"—\"}\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        {material.weightPerUnit ? `${material.weightPerUnit} кг` : \"—\"}\n                      </TableCell>\n                      <TableCell>\n                        {editingMaterial === material.id ? (\n                          <div className=\"flex items-center space-x-1\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0\"\n                              onClick={() => handleSavePrice(material.id)}\n                              disabled={updatePriceMutation.isPending}\n                            >\n                              <Check className=\"h-4 w-4 text-green-600\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0\"\n                              onClick={handleCancelEdit}\n                            >\n                              <X className=\"h-4 w-4 text-red-600\" />\n                            </Button>\n                          </div>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8 p-0\"\n                            onClick={() => handleEditPrice(material.id, material.pricePerUnit || \"0\")}\n                          >\n                            <Edit2 className=\"h-4 w-4 text-gray-400 hover:text-blue-600\" />\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  )})}\n                \n                </TableBody>\n              </Table>\n            </div>\n          )}\n          \n          {/* Пагинация */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-between pt-4 border-t\">\n              <div className=\"text-sm text-gray-500\">\n                Всего страниц: {totalPages}\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(1)}\n                  disabled={currentPage === 1}\n                >\n                  ««\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                  disabled={currentPage === 1}\n                >\n                  ‹ Назад\n                </Button>\n                \n                <div className=\"flex items-center space-x-1\">\n                  {/* Показываем номера страниц */}\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    let pageNum;\n                    if (totalPages <= 5) {\n                      pageNum = i + 1;\n                    } else if (currentPage <= 3) {\n                      pageNum = i + 1;\n                    } else if (currentPage >= totalPages - 2) {\n                      pageNum = totalPages - 4 + i;\n                    } else {\n                      pageNum = currentPage - 2 + i;\n                    }\n                    \n                    return (\n                      <Button\n                        key={pageNum}\n                        variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(pageNum)}\n                        className={currentPage === pageNum ? \"bg-yellow-400 text-black font-semibold hover:bg-yellow-500\" : \"\"}\n                      >\n                        {pageNum}\n                      </Button>\n                    );\n                  })}\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                  disabled={currentPage === totalPages}\n                >\n                  Вперед ›\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(totalPages)}\n                  disabled={currentPage === totalPages}\n                >\n                  »»\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":27146},"client/src/components/detailed-estimate.tsx":{"content":"import React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Download,\n  FileSpreadsheet,\n  Calculator,\n  Package,\n  HardHat,\n  RefreshCw,\n  Link,\n  Plus,\n  Minus,\n  Trash2,\n  CheckIcon,\n  ChevronsUpDown,\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ProjectWithWorkItems, Material, WorkItem, InsertWorkItem, InsertWorkMaterial } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DetailedEstimateProps {\n  projectId: string;\n}\n\ninterface EstimateRow {\n  id: string;\n  type: 'work' | 'material';\n  workId?: string;\n  materialId?: string;\n  name: string;\n  unit: string;\n  quantity: number;\n  pricePerUnit: number;\n  totalCost: number;\n  parentWorkId?: string;\n}\n\nexport function DetailedEstimate({ projectId }: DetailedEstimateProps) {\n  const [projectTitle, setProjectTitle] = useState(\"Сметный расчет по объекту: г. Москва, Шмитовский проезд\");\n  const [estimateRows, setEstimateRows] = useState<EstimateRow[]>([]);\n  const [openCombobox, setOpenCombobox] = useState<string | null>(null);\n  const [estimateWorks, setEstimateWorks] = useState<any[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Загрузка данных из localStorage при инициализации\n  useEffect(() => {\n    const savedEstimate = JSON.parse(localStorage.getItem('projectEstimate') || '[]');\n    setEstimateWorks(savedEstimate);\n  }, []);\n\n  // Слушаем события обновления сметы\n  useEffect(() => {\n    const handleEstimateUpdate = (event: CustomEvent) => {\n      setEstimateWorks(event.detail.estimate);\n    };\n\n    window.addEventListener('estimateUpdated', handleEstimateUpdate as EventListener);\n    \n    return () => {\n      window.removeEventListener('estimateUpdated', handleEstimateUpdate as EventListener);\n    };\n  }, []);\n\n  const { data: project, isLoading } = useQuery<ProjectWithWorkItems>({\n    queryKey: [\"/api/projects\", projectId],\n    enabled: !!projectId,\n  });\n\n  // Загружаем материалы для автодополнения\n  const { data: materials = [] } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  // Загружаем иерархическую структуру работ\n  const { data: hierarchy } = useQuery({\n    queryKey: [\"/api/hierarchy\"],\n  });\n\n  // Синхронизация с иерархической структурой\n  const syncHierarchyMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", `/api/projects/${projectId}/sync-hierarchy`);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n      toast({\n        title: \"Синхронизация завершена\",\n        description: `Синхронизировано работ: ${(data as any).syncedWorks}, связано с материалами: ${(data as any).linkedWorks}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка синхронизации\",\n        description: \"Не удалось синхронизировать с иерархической структурой\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Мутация для создания новой работы\n  const createWorkMutation = useMutation({\n    mutationFn: async (workData: InsertWorkItem) => {\n      return apiRequest(\"POST\", `/api/projects/${projectId}/work-items`, workData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n    },\n  });\n\n  // Мутация для создания связи работа-материал\n  const createWorkMaterialMutation = useMutation({\n    mutationFn: async (data: InsertWorkMaterial) => {\n      return apiRequest(\"POST\", `/api/work-items/${data.workItemId}/materials`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n    },\n  });\n\n  // Мутация для удаления работы\n  const deleteWorkMutation = useMutation({\n    mutationFn: async (workId: string) => {\n      return apiRequest(\"DELETE\", `/api/work-items/${workId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n    },\n  });\n\n  // Мутация для удаления материала из работы\n  const deleteWorkMaterialMutation = useMutation({\n    mutationFn: async (workMaterialId: string) => {\n      return apiRequest(\"DELETE\", `/api/work-materials/${workMaterialId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId] });\n    },\n  });\n\n  // Группировка работ по разделам на основе иерархической структуры и кодов работ\n  const groupedWorks = useMemo(() => {\n    if (!project?.workItems) return {};\n    \n    const groups: Record<string, typeof project.workItems> = {};\n    \n    project.workItems.forEach(work => {\n      // Используем sectionName из базы данных, если есть\n      let section = work.sectionName || \"Прочие работы\";\n      \n      // Если нет sectionName, определяем раздел по коду работы\n      if (!work.sectionName && work.workCode) {\n        const codePrefix = work.workCode.split('.')[0];\n        switch (codePrefix) {\n          case \"1\":\n            section = \"Работы по потолкам (Демонтаж)\";\n            break;\n          case \"2\":\n            section = \"Демонтаж конструкций\";\n            break;\n          case \"3\":\n            section = \"Работы по стенам\";\n            break;\n          default:\n            section = \"Прочие работы\";\n        }\n      }\n      \n      // Если все еще нет раздела, определяем по названию\n      if (section === \"Прочие работы\") {\n        const workName = work.name.toLowerCase();\n        if (workName.includes(\"потолок\") || workName.includes(\"демонтаж\")) {\n          section = \"Работы по потолкам (Демонтаж)\";\n        } else if (workName.includes(\"штукатур\")) {\n          section = \"Демонтаж штукатурки с потолка\";\n        } else if (workName.includes(\"стен\")) {\n          section = \"Работы по стенам\";\n        } else if (workName.includes(\"пол\")) {\n          section = \"Работы по полам\";\n        }\n      }\n      \n      if (!groups[section]) {\n        groups[section] = [];\n      }\n      groups[section].push(work);\n    });\n    \n    return groups;\n  }, [project?.workItems]);\n\n  // Расчет общей стоимости\n  const totalEstimate = useMemo(() => {\n    if (!project?.workItems) return { worksCost: 0, materialsCost: 0, laborCost: 0 };\n    \n    const worksCost = project.workItems.reduce((total, item) => {\n      return total + ((parseFloat(item.volume || \"0\")) * (parseFloat(item.pricePerUnit || \"0\")));\n    }, 0);\n\n    const materialsCost = project.workItems.reduce((total, workItem) => {\n      return total + workItem.workMaterials.reduce((materialTotal, workMaterial) => {\n        const quantity = (parseFloat(workItem.volume || \"0\")) * (parseFloat(workMaterial.consumptionNorm || \"0\"));\n        return materialTotal + (quantity * (parseFloat(workMaterial.material.pricePerUnit || \"0\")));\n      }, 0);\n    }, 0);\n\n    const laborCost = worksCost * 0.3; // 30% от стоимости работ как оплата труда\n\n    return { worksCost, materialsCost, laborCost };\n  }, [project]);\n\n  // Получаем все доступные работы из иерархии\n  const availableWorks = useMemo(() => {\n    if (!(hierarchy as any)?.sections) return [];\n    const works: any[] = [];\n    (hierarchy as any).sections.forEach((section: any) => {\n      if (section.tasks) {\n        section.tasks.forEach((task: any) => {\n          works.push({\n            id: task.id,\n            code: task.index,\n            name: `${task.index} ${task.title}`,\n            unit: task.unit,\n            costPrice: task.costPrice,\n            sectionName: section.title\n          });\n        });\n      }\n    });\n    return works;\n  }, [hierarchy]);\n\n  // Добавить новую работу\n  const addWork = async (selectedWork?: any) => {\n    const newWorkData: InsertWorkItem = {\n      projectId: projectId,\n      name: selectedWork ? selectedWork.name : \"Новая работа\",\n      description: selectedWork?.sectionName || \"\",\n      unit: selectedWork?.unit || \"м²\",\n      pricePerUnit: selectedWork?.costPrice || \"0\",\n      costPrice: selectedWork?.costPrice || \"0\",\n      workCode: selectedWork?.code || \"\",\n      sectionName: selectedWork?.sectionName || \"\",\n      hierarchyTaskId: selectedWork?.id || null,\n      volume: \"0\"\n    };\n\n    try {\n      const newWork = await createWorkMutation.mutateAsync(newWorkData);\n      \n      // Автоматически добавляем 3 строки материалов\n      if (selectedWork?.id) {\n        await addDefaultMaterials((newWork as any).id, selectedWork.code);\n      }\n      \n      toast({\n        title: \"Работа добавлена\",\n        description: \"Работа успешно добавлена в смету\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось добавить работу\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Добавить материалы по умолчанию к работе\n  const addDefaultMaterials = async (workId: string, workCode: string) => {\n    // Ищем подходящие материалы для данного типа работы\n    const relatedMaterials = materials.filter(material => {\n      const materialName = material.name.toLowerCase();\n      const workCodeLower = workCode.toLowerCase();\n      \n      // Логика поиска материалов по типу работы\n      if (workCodeLower.includes(\"демонтаж\") || workCodeLower.includes(\"2.\")) {\n        return materialName.includes(\"мешок\") || materialName.includes(\"пакет\");\n      }\n      if (workCodeLower.includes(\"краск\") || workCodeLower.includes(\"шпакл\")) {\n        return materialName.includes(\"краска\") || materialName.includes(\"шпаклевка\");\n      }\n      return false;\n    });\n\n    // Добавляем до 3 материалов или создаем пустые строки\n    const materialsToAdd = relatedMaterials.slice(0, 3);\n    \n    for (let i = 0; i < 3; i++) {\n      const material = materialsToAdd[i];\n      if (material) {\n        const workMaterialData: InsertWorkMaterial = {\n          workItemId: workId,\n          materialId: material.id,\n          consumptionNorm: \"1.0\",\n          consumptionUnit: \"шт/м²\"\n        };\n        \n        try {\n          await createWorkMaterialMutation.mutateAsync(workMaterialData);\n        } catch (error) {\n          console.error(\"Error adding material:\", error);\n        }\n      }\n    }\n  };\n\n  // Добавить материал к существующей работе\n  const addMaterialToWork = async (workId: string, materialId?: string) => {\n    if (!materialId) {\n      toast({\n        title: \"Выберите материал\",\n        description: \"Необходимо выбрать материал из списка\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const workMaterialData: InsertWorkMaterial = {\n      workItemId: workId,\n      materialId: materialId,\n      consumptionNorm: \"1.0\",\n      consumptionUnit: \"шт/м²\"\n    };\n\n    try {\n      await createWorkMaterialMutation.mutateAsync(workMaterialData);\n      toast({\n        title: \"Материал добавлен\",\n        description: \"Материал успешно добавлен к работе\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось добавить материал\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Удалить работу\n  const removeWork = async (workId: string) => {\n    try {\n      await deleteWorkMutation.mutateAsync(workId);\n      toast({\n        title: \"Работа удалена\",\n        description: \"Работа успешно удалена из сметы\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось удалить работу\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Удалить материал\n  const removeMaterial = async (workMaterialId: string) => {\n    try {\n      await deleteWorkMaterialMutation.mutateAsync(workMaterialId);\n      toast({\n        title: \"Материал удален\",\n        description: \"Материал успешно удален из работы\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось удалить материал\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const exportToExcel = () => {\n    toast({\n      title: \"Экспорт в Excel\",\n      description: \"Функция экспорта будет реализована в следующей версии\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <Calculator className=\"h-8 w-8 animate-spin mx-auto mb-4 text-blue-600\" />\n          <p className=\"text-gray-500\">Подготовка сметы...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <Card>\n        <CardContent className=\"text-center py-8\">\n          <FileSpreadsheet className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n          <p className=\"text-gray-500\">Проект не найден</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Заголовок сметы */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex-1\">\n              <Input\n                value={projectTitle}\n                onChange={(e) => setProjectTitle(e.target.value)}\n                className=\"text-lg font-semibold border-none p-0 h-auto focus-visible:ring-0\"\n                placeholder=\"Введите название объекта...\"\n              />\n              <CardDescription className=\"mt-2\">\n                Проект: {project.name}\n              </CardDescription>\n            </div>\n            <div className=\"flex space-x-2 ml-4\">\n              <Button \n                onClick={() => syncHierarchyMutation.mutate()}\n                disabled={syncHierarchyMutation.isPending}\n                variant=\"outline\"\n              >\n                {syncHierarchyMutation.isPending ? (\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <Link className=\"h-4 w-4 mr-2\" />\n                )}\n                Синхронизировать\n              </Button>\n              <Button onClick={exportToExcel}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Экспорт в Excel\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Общая статистика */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <HardHat className=\"h-4 w-4 mr-2\" />\n              Работы\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              ₽ {totalEstimate.worksCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Package className=\"h-4 w-4 mr-2\" />\n              Материалы\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              ₽ {totalEstimate.materialsCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Оплата труда</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              ₽ {totalEstimate.laborCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Общая стоимость</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              ₽ {(totalEstimate.worksCost + totalEstimate.materialsCost + totalEstimate.laborCost).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Работы добавленные из каталога */}\n      {estimateWorks.length > 0 && (\n        <Card className=\"border-green-200 dark:border-green-800\">\n          <CardHeader>\n            <CardTitle className=\"text-green-700 dark:text-green-300\">\n              Добавленные работы из каталога\n            </CardTitle>\n            <CardDescription>\n              {estimateWorks.length} работ добавлено в смету\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <Table>\n                <TableHeader className=\"bg-green-50 dark:bg-green-950/20\">\n                  <TableRow>\n                    <TableHead className=\"w-12\">Этап</TableHead>\n                    <TableHead className=\"w-16\">№</TableHead>\n                    <TableHead>Наименование работ</TableHead>\n                    <TableHead className=\"text-center w-20\">Изображение</TableHead>\n                    <TableHead className=\"text-center w-20\">Ед.изм</TableHead>\n                    <TableHead className=\"text-center w-20\">Количество</TableHead>\n                    <TableHead className=\"text-center w-24\">Цена за ед.</TableHead>\n                    <TableHead className=\"text-center w-24\">Сумма</TableHead>\n                    <TableHead className=\"w-12\">Действия</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {estimateWorks.map((work) => {\n                    const workTotal = work.quantity * (work.unitPrice || work.costPrice || 0);\n                    const materialsTotal = work.materials.reduce((total: number, material: any) => \n                      total + (material.quantity * (material.unitPrice || material.costPrice || 0)), 0\n                    );\n                    \n                    return (\n                      <React.Fragment key={work.id}>\n                        {/* Заголовок раздела */}\n                        <TableRow className=\"bg-blue-50 dark:bg-blue-950/20\">\n                          <TableCell colSpan={9} className=\"font-bold text-blue-700 dark:text-blue-300\">\n                            {work.sectionTitle}\n                          </TableCell>\n                        </TableRow>\n                        \n                        {/* Работа */}\n                        <TableRow className=\"border-l-4 border-blue-200\">\n                          <TableCell className=\"font-medium text-center\">{work.stage}</TableCell>\n                          <TableCell className=\"font-medium\">{work.index}</TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">{work.title}</div>\n                          </TableCell>\n                          <TableCell className=\"text-center\">\n                            <div className=\"w-8 h-8 bg-gray-100 dark:bg-gray-800 rounded border flex items-center justify-center text-xs text-gray-500\">\n                              IMG\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-center\">{work.unit}</TableCell>\n                          <TableCell className=\"text-center\">\n                            <Input\n                              type=\"number\"\n                              value={work.quantity}\n                              onChange={(e) => {\n                                const newQuantity = parseFloat(e.target.value) || 0;\n                                const updatedWorks = estimateWorks.map(w => \n                                  w.id === work.id ? { ...w, quantity: newQuantity } : w\n                                );\n                                setEstimateWorks(updatedWorks);\n                                localStorage.setItem('projectEstimate', JSON.stringify(updatedWorks));\n                              }}\n                              className=\"w-20 text-center\"\n                              step=\"0.01\"\n                              min=\"0\"\n                            />\n                          </TableCell>\n                          <TableCell className=\"text-center font-mono\">\n                            ₽ {(work.unitPrice || work.costPrice || 0).toFixed(2)}\n                          </TableCell>\n                          <TableCell className=\"text-center font-mono font-bold\">\n                            ₽ {workTotal.toFixed(2)}\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                const updatedWorks = estimateWorks.filter(w => w.id !== work.id);\n                                setEstimateWorks(updatedWorks);\n                                localStorage.setItem('projectEstimate', JSON.stringify(updatedWorks));\n                              }}\n                              className=\"h-8 w-8 p-0 text-red-500 hover:text-red-700\"\n                              title=\"Удалить из сметы\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n\n                        {/* Материалы */}\n                        {work.materials.map((material: any, materialIndex: number) => (\n                          <TableRow \n                            key={`${work.id}-material-${materialIndex}`}\n                            className=\"bg-gray-50/50 dark:bg-gray-800/30 border-l-4 border-gray-300\"\n                          >\n                            <TableCell className=\"text-center text-gray-500\">{material.unit}</TableCell>\n                            <TableCell className=\"text-gray-500\">{work.index}</TableCell>\n                            <TableCell className=\"pl-8 text-gray-700 dark:text-gray-300\">\n                              <div className=\"text-sm\">{material.name}</div>\n                            </TableCell>\n                            <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                            <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                            <TableCell className=\"text-center\">\n                              <Input\n                                type=\"number\"\n                                value={material.quantity}\n                                onChange={(e) => {\n                                  const newQuantity = parseFloat(e.target.value) || 0;\n                                  const updatedWorks = estimateWorks.map(w => {\n                                    if (w.id === work.id) {\n                                      const updatedMaterials = w.materials.map((m: any, i: number) => \n                                        i === materialIndex ? { ...m, quantity: newQuantity } : m\n                                      );\n                                      return { ...w, materials: updatedMaterials };\n                                    }\n                                    return w;\n                                  });\n                                  setEstimateWorks(updatedWorks);\n                                  localStorage.setItem('projectEstimate', JSON.stringify(updatedWorks));\n                                }}\n                                className=\"w-20 text-center text-sm\"\n                                step=\"0.001\"\n                                min=\"0\"\n                              />\n                            </TableCell>\n                            <TableCell className=\"text-center font-mono text-gray-600\">\n                              ₽ {(material.unitPrice || material.costPrice || 0).toFixed(2)}\n                            </TableCell>\n                            <TableCell className=\"text-center font-mono text-gray-600\">\n                              ₽ {(material.quantity * (material.unitPrice || material.costPrice || 0)).toFixed(2)}\n                            </TableCell>\n                            <TableCell></TableCell>\n                          </TableRow>\n                        ))}\n                      </React.Fragment>\n                    );\n                  })}\n                  \n                  {/* Итого по добавленным работам */}\n                  <TableRow className=\"bg-green-50 dark:bg-green-950/20 border-t-2 font-bold\">\n                    <TableCell colSpan={7} className=\"text-right text-lg\">\n                      Итого по добавленным работам:\n                    </TableCell>\n                    <TableCell className=\"text-center font-mono text-lg font-bold text-green-700 dark:text-green-300\">\n                      ₽ {estimateWorks.reduce((total, work) => {\n                        const workTotal = work.quantity * (work.unitPrice || work.costPrice || 0);\n                        const materialsTotal = work.materials.reduce((matTotal: number, material: any) => \n                          matTotal + (material.quantity * (material.unitPrice || material.costPrice || 0)), 0\n                        );\n                        return total + workTotal + materialsTotal;\n                      }, 0).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                    </TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Детальная смета по разделам */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Детальная смета проекта</CardTitle>\n          <CardDescription>\n            Расчет стоимости работ и материалов по разделам (из базы данных проекта)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader className=\"bg-blue-50 dark:bg-blue-950/20\">\n                <TableRow>\n                  <TableHead className=\"w-12\">№</TableHead>\n                  <TableHead>Наименование работ</TableHead>\n                  <TableHead className=\"text-center w-24\">Изображение</TableHead>\n                  <TableHead className=\"text-center w-24\">Ед.изм</TableHead>\n                  <TableHead className=\"text-center w-24\">Кол-во</TableHead>\n                  <TableHead className=\"text-center w-32\">Стоимость, рублей</TableHead>\n                  <TableHead className=\"text-center w-32\">На единицу</TableHead>\n                  <TableHead className=\"text-center w-32\">Материалы</TableHead>\n                  <TableHead className=\"text-center w-32\">Оплата труда</TableHead>\n                  <TableHead className=\"text-center w-24\">Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {Object.entries(groupedWorks).map(([sectionName, works], sectionIndex) => (\n                  <>\n                    {/* Заголовок раздела */}\n                    <TableRow key={`section-${sectionIndex}`} className=\"bg-gray-100 dark:bg-gray-800\">\n                      <TableCell className=\"font-bold\">{sectionIndex + 1}</TableCell>\n                      <TableCell colSpan={8} className=\"font-bold text-blue-700 dark:text-blue-300\">\n                        {sectionName}\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <div className=\"flex space-x-1\">\n                          <Popover open={openCombobox === `section-${sectionIndex}`} onOpenChange={(open) => setOpenCombobox(open ? `section-${sectionIndex}` : null)}>\n                            <PopoverTrigger asChild>\n                              <Button variant=\"outline\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                                <Plus className=\"h-4 w-4\" />\n                              </Button>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-80 p-0\">\n                              <Command>\n                                <CommandInput placeholder=\"Поиск работы...\" />\n                                <CommandEmpty>Работы не найдены.</CommandEmpty>\n                                <CommandGroup>\n                                  <CommandList className=\"max-h-60\">\n                                    {availableWorks.filter(work => work.sectionName?.toLowerCase().includes(sectionName.toLowerCase())).map((work) => (\n                                      <CommandItem\n                                        key={work.id}\n                                        value={work.name}\n                                        onSelect={() => {\n                                          addWork(work);\n                                          setOpenCombobox(null);\n                                        }}\n                                      >\n                                        <div className=\"flex flex-col\">\n                                          <span className=\"font-medium\">{work.name}</span>\n                                          <span className=\"text-xs text-gray-500\">{work.unit} • ₽{work.costPrice}</span>\n                                        </div>\n                                      </CommandItem>\n                                    ))}\n                                  </CommandList>\n                                </CommandGroup>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                    \n                    {/* Работы в разделе */}\n                    {works.map((work, workIndex) => {\n                      const workCost = (parseFloat(work.volume || \"0\")) * (parseFloat(work.pricePerUnit || \"0\"));\n                      const materialsCost = work.workMaterials.reduce((total, workMaterial) => {\n                        const quantity = (parseFloat(work.volume || \"0\")) * (parseFloat(workMaterial.consumptionNorm || \"0\"));\n                        return total + (quantity * (parseFloat(workMaterial.material.pricePerUnit || \"0\")));\n                      }, 0);\n                      const laborCost = workCost * 0.3;\n\n                      return (\n                        <TableRow key={work.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800/50\">\n                          <TableCell className=\"font-medium\">\n                            {sectionIndex + 1}.{workIndex + 1}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">{work.name}</div>\n                            {work.description && (\n                              <div className=\"text-xs text-gray-500 mt-1\">{work.description}</div>\n                            )}\n                            {/* Показать материалы в работе */}\n                            {work.workMaterials.length > 0 && (\n                              <div className=\"mt-2 space-y-1\">\n                                {work.workMaterials.map((wm) => (\n                                  <div key={wm.id} className=\"text-xs text-gray-600 dark:text-gray-400 flex items-center justify-between\">\n                                    <div className=\"flex items-center\">\n                                      <Package className=\"h-3 w-3 mr-1\" />\n                                      {wm.material.name} ({wm.consumptionNorm} {wm.consumptionUnit})\n                                    </div>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\" \n                                      className=\"h-4 w-4 p-0 text-red-500 hover:text-red-700\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        removeMaterial(wm.id);\n                                      }}\n                                    >\n                                      <Minus className=\"h-3 w-3\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </TableCell>\n                          <TableCell className=\"text-center\">\n                            {work.workMaterials.length > 0 && work.workMaterials[0].material.imageUrl ? (\n                              <div className=\"flex flex-wrap gap-1\">\n                                {work.workMaterials.slice(0, 2).map((wm, idx) => \n                                  wm.material.imageUrl ? (\n                                    <img \n                                      key={idx}\n                                      src={wm.material.imageUrl} \n                                      alt={wm.material.name}\n                                      className=\"w-8 h-8 object-cover rounded border\"\n                                    />\n                                  ) : (\n                                    <div key={idx} className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded border flex items-center justify-center\">\n                                      <Package className=\"h-4 w-4 text-gray-400\" />\n                                    </div>\n                                  )\n                                )}\n                              </div>\n                            ) : (\n                              <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded border flex items-center justify-center mx-auto\">\n                                <HardHat className=\"h-4 w-4 text-gray-400\" />\n                              </div>\n                            )}\n                          </TableCell>\n                          <TableCell className=\"text-center\">\n                            <Badge variant=\"outline\">{work.unit}</Badge>\n                          </TableCell>\n                          <TableCell className=\"text-center font-medium\">\n                            {parseFloat(work.volume || \"0\").toLocaleString('ru-RU', { maximumFractionDigits: 3 })}\n                          </TableCell>\n                          <TableCell className=\"text-right font-medium\">\n                            ₽ {(workCost + materialsCost + laborCost).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            ₽ {parseFloat(work.pricePerUnit || \"0\").toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            ₽ {materialsCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            ₽ {laborCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                          </TableCell>\n                          <TableCell className=\"text-center\">\n                            <div className=\"flex space-x-1\">\n                              <Popover open={openCombobox === `work-${work.id}`} onOpenChange={(open) => setOpenCombobox(open ? `work-${work.id}` : null)}>\n                                <PopoverTrigger asChild>\n                                  <Button variant=\"outline\" size=\"sm\" className=\"h-7 w-7 p-0\">\n                                    <Plus className=\"h-3 w-3\" />\n                                  </Button>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-80 p-0\">\n                                  <Command>\n                                    <CommandInput placeholder=\"Поиск материала...\" />\n                                    <CommandEmpty>Материалы не найдены.</CommandEmpty>\n                                    <CommandGroup>\n                                      <CommandList className=\"max-h-60\">\n                                        {materials.map((material) => (\n                                          <CommandItem\n                                            key={material.id}\n                                            value={material.name}\n                                            onSelect={() => {\n                                              addMaterialToWork(work.id, material.id);\n                                              setOpenCombobox(null);\n                                            }}\n                                          >\n                                            <div className=\"flex flex-col\">\n                                              <span className=\"font-medium\">{material.name}</span>\n                                              <span className=\"text-xs text-gray-500\">{material.unit} • ₽{material.pricePerUnit}</span>\n                                            </div>\n                                          </CommandItem>\n                                        ))}\n                                      </CommandList>\n                                    </CommandGroup>\n                                  </Command>\n                                </PopoverContent>\n                              </Popover>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                className=\"h-7 w-7 p-0 text-red-500 hover:text-red-700\"\n                                onClick={() => removeWork(work.id)}\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                    \n                    {/* Итого по разделу */}\n                    <TableRow className=\"bg-blue-50 dark:bg-blue-950/20 font-medium\">\n                      <TableCell></TableCell>\n                      <TableCell>Итого по разделу:</TableCell>\n                      <TableCell></TableCell>\n                      <TableCell></TableCell>\n                      <TableCell></TableCell>\n                      <TableCell className=\"text-right font-bold\">\n                        ₽ {works.reduce((total, work) => {\n                          const workCost = (parseFloat(work.volume || \"0\")) * (parseFloat(work.pricePerUnit || \"0\"));\n                          const materialsCost = work.workMaterials.reduce((materialTotal, workMaterial) => {\n                            const quantity = (parseFloat(work.volume || \"0\")) * (parseFloat(workMaterial.consumptionNorm || \"0\"));\n                            return materialTotal + (quantity * (parseFloat(workMaterial.material.pricePerUnit || \"0\")));\n                          }, 0);\n                          const laborCost = workCost * 0.3;\n                          return total + workCost + materialsCost + laborCost;\n                        }, 0).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                      </TableCell>\n                      <TableCell></TableCell>\n                      <TableCell className=\"text-right\">\n                        ₽ {works.reduce((total, work) => {\n                          const materialsCost = work.workMaterials.reduce((materialTotal, workMaterial) => {\n                            const quantity = (parseFloat(work.volume || \"0\")) * (parseFloat(workMaterial.consumptionNorm || \"0\"));\n                            return materialTotal + (quantity * (parseFloat(workMaterial.material.pricePerUnit || \"0\")));\n                          }, 0);\n                          return total + materialsCost;\n                        }, 0).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        ₽ {works.reduce((total, work) => {\n                          const workCost = (parseFloat(work.volume || \"0\")) * (parseFloat(work.pricePerUnit || \"0\"));\n                          const laborCost = workCost * 0.3;\n                          return total + laborCost;\n                        }, 0).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                      </TableCell>\n                    </TableRow>\n                  </>\n                ))}\n                \n                {/* Общий итог */}\n                <TableRow className=\"bg-green-50 dark:bg-green-950/20 font-bold text-lg\">\n                  <TableCell></TableCell>\n                  <TableCell>ВСЕГО ПО СМЕТЕ:</TableCell>\n                  <TableCell></TableCell>\n                  <TableCell></TableCell>\n                  <TableCell></TableCell>\n                  <TableCell className=\"text-right text-green-700 dark:text-green-300\">\n                    ₽ {(totalEstimate.worksCost + totalEstimate.materialsCost + totalEstimate.laborCost).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                  </TableCell>\n                  <TableCell></TableCell>\n                  <TableCell className=\"text-right\">\n                    ₽ {totalEstimate.materialsCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    ₽ {totalEstimate.laborCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                  </TableCell>\n                  <TableCell></TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":45011},"client/src/components/works-estimate.tsx":{"content":"import React, { useState, useMemo } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Search,\n  Plus,\n  Edit2,\n  Trash2,\n  Calculator,\n  Upload,\n  Download,\n  ChevronDown,\n  ChevronRight,\n  Check,\n  X,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n// Загружаем полные данные из Excel файла\nimport estimateDataJson from '../../../estimate-full-data.json';\nconst estimateData = estimateDataJson as {\n  sections: Array<{\n    id: number;\n    title: string;\n    works: Array<{\n      stage: number;\n      index: string;\n      title: string;\n      unit: string;\n      quantity: number;\n      costPrice: number;\n      unitPrice: number;\n      materials: Array<{\n        name: string;\n        unit: string;\n        quantity: number;\n        unitPrice: number;\n      }>;\n    }>;\n  }>;\n};\n\ninterface WorksEstimateProps {\n  projectId: string;\n}\n\nexport function WorksEstimate({ projectId }: WorksEstimateProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedSection, setSelectedSection] = useState<string>(\"all\");\n  const [expandedSections, setExpandedSections] = useState<Set<number>>(new Set([1]));\n  const [expandedWorks, setExpandedWorks] = useState<Set<string>>(new Set());\n  const [editingWork, setEditingWork] = useState<any>(null);\n  const [newQuantity, setNewQuantity] = useState(\"\");\n  const [editingMaterial, setEditingMaterial] = useState<{ sectionId: number; workIndex: string; materialIndex: number } | null>(null);\n  const [materialSearchTerm, setMaterialSearchTerm] = useState(\"\");\n  const [selectedMaterial, setSelectedMaterial] = useState<any>(null);\n  const [undoHistory, setUndoHistory] = useState<any[]>([]);\n  const [currentData, setCurrentData] = useState(estimateData);\n  const [estimateWorks, setEstimateWorks] = useState<any[]>([]);\n  \n  const { toast } = useToast();\n\n  // Сохранение состояния в историю для отмены\n  const saveToHistory = (description: string) => {\n    const newHistory = [...undoHistory, { \n      data: JSON.parse(JSON.stringify(currentData)), \n      description,\n      timestamp: Date.now()\n    }];\n    // Ограничиваем историю до 10 последних действий\n    if (newHistory.length > 10) {\n      newHistory.shift();\n    }\n    setUndoHistory(newHistory);\n  };\n\n  // Отмена последнего действия\n  const handleUndo = () => {\n    if (undoHistory.length > 0) {\n      const lastState = undoHistory[undoHistory.length - 1];\n      setCurrentData(lastState.data);\n      setUndoHistory(prev => prev.slice(0, -1));\n      \n      toast({\n        title: \"Действие отменено\",\n        description: `Отменено: ${lastState.description}`,\n      });\n    }\n  };\n\n  // Обработка горячих клавиш\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.ctrlKey && event.key === 'z') {\n        event.preventDefault();\n        handleUndo();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [undoHistory]);\n\n  // Поиск материалов для автозаполнения\n  const { data: searchResults = [] } = useQuery({\n    queryKey: ['materials', 'search', materialSearchTerm],\n    queryFn: async () => {\n      if (!materialSearchTerm || materialSearchTerm.length < 2) return [];\n      const response = await fetch(`/api/materials/search?q=${encodeURIComponent(materialSearchTerm)}`);\n      return response.json();\n    },\n    enabled: !!materialSearchTerm && materialSearchTerm.length >= 2,\n  });\n\n  // Поиск материала в базе данных по названию для получения изображения\n  const { data: allMaterials = [] } = useQuery({\n    queryKey: ['materials'],\n    queryFn: async () => {\n      const response = await fetch('/api/materials');\n      return response.json();\n    },\n  });\n\n  // Функция поиска изображения материала\n  const findMaterialImage = useMemo(() => {\n    return (materialName: string) => {\n      // Ищем точное совпадение\n      let foundMaterial = allMaterials.find((m: any) => \n        m.name.toLowerCase() === materialName.toLowerCase()\n      );\n      \n      // Если точного совпадения нет, ищем по частичному совпадению\n      if (!foundMaterial) {\n        foundMaterial = allMaterials.find((m: any) => \n          m.name.toLowerCase().includes(materialName.toLowerCase()) ||\n          materialName.toLowerCase().includes(m.name.toLowerCase())\n        );\n      }\n      \n      return foundMaterial?.imageUrl || null;\n    };\n  }, [allMaterials, currentData]); // Добавляем currentData как зависимость\n\n  // Управление раскрытием разделов\n  const toggleSection = (sectionId: number) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(sectionId)) {\n      newExpanded.delete(sectionId);\n    } else {\n      newExpanded.add(sectionId);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  // Управление раскрытием материалов в работах\n  const toggleWorkMaterials = (workKey: string) => {\n    const newExpanded = new Set(expandedWorks);\n    if (newExpanded.has(workKey)) {\n      newExpanded.delete(workKey);\n    } else {\n      newExpanded.add(workKey);\n    }\n    setExpandedWorks(newExpanded);\n  };\n\n  // Получаем все разделы для фильтрации\n  const sections = useMemo(() => {\n    return currentData.sections.map(section => section.title);\n  }, [currentData]);\n\n  // Фильтрация работ\n  const filteredSections = useMemo(() => {\n    return currentData.sections.map(section => ({\n      ...section,\n      works: section.works.filter((work) => {\n        const matchesSearch = work.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          work.index.toLowerCase().includes(searchTerm.toLowerCase());\n        \n        const matchesSection = selectedSection === \"all\" || section.title === selectedSection;\n\n        return matchesSearch && matchesSection;\n      })\n    })).filter(section => section.works.length > 0);\n  }, [currentData, searchTerm, selectedSection]); // Добавляем currentData как зависимость\n\n  // Подсчет общей стоимости\n  const totalCost = useMemo(() => {\n    return filteredSections.reduce((sectionTotal, section) => {\n      return sectionTotal + section.works.reduce((workTotal, work) => {\n        return workTotal + (work.quantity * work.unitPrice);\n      }, 0);\n    }, 0);\n  }, [filteredSections]);\n\n  const handleEditQuantity = (work: any) => {\n    setEditingWork(work);\n    setNewQuantity(work.quantity.toString());\n  };\n\n  const handleSaveQuantity = () => {\n    if (editingWork) {\n      saveToHistory(`Изменение количества \"${editingWork.title}\"`);\n      \n      const quantity = parseFloat(newQuantity) || 0;\n      const newData = JSON.parse(JSON.stringify(currentData));\n      \n      // Находим и обновляем работу\n      for (const section of newData.sections) {\n        const work = section.works.find((w: any) => w.index === editingWork.index);\n        if (work) {\n          work.quantity = quantity;\n          break;\n        }\n      }\n      \n      setCurrentData(newData);\n      setEditingWork(null);\n      setNewQuantity(\"\");\n      \n      toast({\n        title: \"Количество обновлено\",\n        description: `Количество для \"${editingWork.title}\" изменено на ${quantity}`,\n      });\n    }\n  };\n\n  const handleEditMaterial = (sectionId: number, workIndex: string, materialIndex: number, currentMaterial: any) => {\n    setEditingMaterial({ sectionId, workIndex, materialIndex });\n    setMaterialSearchTerm(currentMaterial.name);\n    setSelectedMaterial(currentMaterial);\n  };\n\n  const handleSelectMaterial = (material: any) => {\n    if (editingMaterial) {\n      saveToHistory(`Замена материала на \"${material.name}\"`);\n      \n      const newData = JSON.parse(JSON.stringify(currentData));\n      const section = newData.sections.find((s: any) => s.id === editingMaterial.sectionId);\n      \n      if (section) {\n        const work = section.works.find((w: any) => w.index === editingMaterial.workIndex);\n        \n        if (work && work.materials[editingMaterial.materialIndex]) {\n          const newPrice = parseFloat(material.pricePerUnit) || 0;\n          \n          work.materials[editingMaterial.materialIndex] = {\n            ...work.materials[editingMaterial.materialIndex],\n            name: material.name,\n            unit: material.unit,\n            unitPrice: newPrice,\n            costPrice: newPrice // Обновляем оба поля для совместимости\n          };\n        }\n      }\n      \n      setCurrentData(newData);\n      setEditingMaterial(null);\n      setMaterialSearchTerm(\"\");\n      setSelectedMaterial(null);\n      \n      toast({\n        title: \"Материал обновлен\",\n        description: `Материал заменен на \"${material.name}\" по цене ₽${parseFloat(material.pricePerUnit).toFixed(2)}`,\n      });\n    }\n  };\n\n  const handleCancelMaterialEdit = () => {\n    setEditingMaterial(null);\n    setMaterialSearchTerm(\"\");\n    setSelectedMaterial(null);\n  };\n\n  // Добавление работы и материалов в смету\n  const handleAddWorkToEstimate = (work: any, sectionTitle: string) => {\n    console.log('Добавление работы в смету:', { work, sectionTitle });\n    saveToHistory(`Добавление работы \"${work.title}\" в смету`);\n    \n    // Сохраняем работу в localStorage для передачи в раздел \"Смета\"\n    const existingEstimate = JSON.parse(localStorage.getItem('projectEstimate') || '[]');\n    \n    const workWithMaterials = {\n      id: `estimate-${Date.now()}-${Math.random()}`,\n      sectionTitle,\n      stage: work.stage,\n      index: work.index,\n      title: work.title,\n      unit: work.unit,\n      quantity: 1, // По умолчанию 1 единица\n      costPrice: work.costPrice,\n      unitPrice: work.unitPrice,\n      materials: work.materials.map((material: any) => ({\n        ...material,\n        id: `material-${Date.now()}-${Math.random()}`,\n        quantity: material.quantity || 1\n      }))\n    };\n\n    const updatedEstimate = [...existingEstimate, workWithMaterials];\n    localStorage.setItem('projectEstimate', JSON.stringify(updatedEstimate));\n    \n    // Также добавляем в локальный стейт для отображения\n    setEstimateWorks(prev => [...prev, workWithMaterials]);\n    \n    // Диспетчим событие для обновления других компонентов\n    window.dispatchEvent(new CustomEvent('estimateUpdated', { \n      detail: { estimate: updatedEstimate, action: 'add', work: workWithMaterials }\n    }));\n    \n    console.log('Работа сохранена в смету:', workWithMaterials);\n    \n    toast({\n      title: \"Работа добавлена в смету\",\n      description: `\"${work.title}\" добавлена в раздел \"Смета\". Перейдите в боковое меню > Смета для просмотра.`,\n      duration: 4000,\n    });\n  };\n\n  // Удаление работы из сметы\n  const handleRemoveFromEstimate = (workId: string) => {\n    saveToHistory(\"Удаление работы из сметы\");\n    setEstimateWorks(prev => prev.filter(w => w.id !== workId));\n    \n    toast({\n      title: \"Работа удалена из сметы\",\n      description: \"Работа и все материалы удалены\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calculator className=\"h-5 w-5\" />\n                Виды работ\n              </CardTitle>\n              <CardDescription>\n                {currentData.sections.length} разделов, {currentData.sections.reduce((sum: number, s: any) => sum + s.works.length, 0)} работ, {currentData.sections.reduce((sum: number, s: any) => sum + s.works.reduce((workSum: number, w: any) => workSum + w.materials.length, 0), 0)} материалов\n              </CardDescription>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={handleUndo}\n                disabled={undoHistory.length === 0}\n                title=\"Отменить последнее действие (Ctrl+Z)\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Отменить ({undoHistory.length})\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Импорт Excel\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Экспорт Excel\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Поиск и фильтры */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Поиск работ...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={selectedSection} onValueChange={setSelectedSection}>\n              <SelectTrigger className=\"w-80\">\n                <SelectValue placeholder=\"Выберите раздел\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Все разделы</SelectItem>\n                {sections.map((section) => (\n                  <SelectItem key={section} value={section}>\n                    {section}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Статистика */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {filteredSections.length}\n                </div>\n                <p className=\"text-sm text-gray-600\">Разделов</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {filteredSections.reduce((total, section) => total + section.works.length, 0)}\n                </div>\n                <p className=\"text-sm text-gray-600\">Работ</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {filteredSections.reduce((total, section) => \n                    total + section.works.reduce((workTotal, work) => workTotal + work.materials.length, 0), 0\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-600\">Материалов</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  ₽ {totalCost.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                </div>\n                <p className=\"text-sm text-gray-600\">Общая стоимость</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Таблица работ */}\n          <div className=\"border rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-50 dark:bg-gray-900\">\n                  <TableHead className=\"w-12\">Этап</TableHead>\n                  <TableHead className=\"w-16\">№</TableHead>\n                  <TableHead>Наименование работ</TableHead>\n                  <TableHead className=\"text-center w-20\">Изображение</TableHead>\n                  <TableHead className=\"text-center w-20\">Ед.изм</TableHead>\n                  <TableHead className=\"text-center w-24\">Кол-во</TableHead>\n                  <TableHead className=\"text-center w-28\">Себестоимость</TableHead>\n                  <TableHead className=\"text-center w-28\">На единицу</TableHead>\n                  <TableHead className=\"text-center w-28\">Стоимость</TableHead>\n                  <TableHead className=\"text-center w-20\">Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredSections.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={10} className=\"text-center py-8 text-gray-500\">\n                      {searchTerm || selectedSection !== \"all\" ? \n                        \"Работы не найдены по заданным критериям\" : \n                        \"Нет работ в смете\"\n                      }\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredSections.map((section) => (\n                    <React.Fragment key={`section-${section.id}`}>\n                      {/* Заголовок раздела */}\n                      <TableRow className=\"bg-blue-50 dark:bg-blue-950/20 hover:bg-blue-100 dark:hover:bg-blue-950/30\">\n                        <TableCell \n                          colSpan={10}\n                          className=\"font-bold text-blue-700 dark:text-blue-300 cursor-pointer\"\n                          onClick={() => toggleSection(section.id)}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            {expandedSections.has(section.id) ? (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronRight className=\"h-4 w-4\" />\n                            )}\n                            {section.title}\n                            <Badge variant=\"outline\" className=\"ml-2\">\n                              {section.works.length} работ\n                            </Badge>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                      \n                      {/* Работы в разделе */}\n                      {expandedSections.has(section.id) && section.works.map((work) => {\n                        const workTotal = work.quantity * (work.unitPrice || work.costPrice || 0);\n                        \n                        return (\n                          <React.Fragment key={`work-${section.id}-${work.index}`}>\n                            {/* Работа */}\n                            <TableRow className=\"hover:bg-gray-50 dark:hover:bg-gray-800/50 border-l-4 border-blue-200\">\n                              <TableCell className=\"font-medium text-center\">{work.stage}</TableCell>\n                              <TableCell className=\"font-medium\">{work.index}</TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center gap-2\">\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleAddWorkToEstimate(work, section.title)}\n                                    className=\"h-6 w-6 p-0 shrink-0\"\n                                    title=\"Добавить в смету\"\n                                  >\n                                    <Plus className=\"h-3 w-3\" />\n                                  </Button>\n                                  {work.materials.length > 0 && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => toggleWorkMaterials(`${section.id}-${work.index}`)}\n                                      className=\"h-6 w-6 p-0 shrink-0\"\n                                      title={expandedWorks.has(`${section.id}-${work.index}`) ? \"Скрыть материалы\" : \"Показать материалы\"}\n                                    >\n                                      {expandedWorks.has(`${section.id}-${work.index}`) ? (\n                                        <ChevronDown className=\"h-3 w-3\" />\n                                      ) : (\n                                        <ChevronRight className=\"h-3 w-3\" />\n                                      )}\n                                    </Button>\n                                  )}\n                                  <div className=\"font-medium\">{work.title}</div>\n                                </div>\n                              </TableCell>\n                              <TableCell className=\"text-center\">\n                                {/* Пустая колонка для работ */}\n                              </TableCell>\n                              <TableCell className=\"text-center\">{work.unit}</TableCell>\n                              <TableCell className=\"text-center\">\n                                <Button\n                                  variant=\"ghost\"\n                                  className=\"h-8 px-2 font-mono hover:bg-blue-100\"\n                                  onClick={() => handleEditQuantity(work)}\n                                >\n                                  {work.quantity.toFixed(2)}\n                                </Button>\n                              </TableCell>\n                              <TableCell className=\"text-center font-mono\">\n                                ₽ {work.costPrice.toFixed(2)}\n                              </TableCell>\n                              <TableCell className=\"text-center font-mono\">\n                                ₽ {work.unitPrice.toFixed(2)}\n                              </TableCell>\n                              <TableCell className=\"text-center font-mono font-bold\">\n                                ₽ {workTotal.toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex gap-1\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEditQuantity(work)}\n                                    className=\"h-8 w-8 p-0\"\n                                    title=\"Изменить количество\"\n                                  >\n                                    <Edit2 className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                            \n                            {/* Материалы (показываем только если работа развернута) */}\n                            {expandedWorks.has(`${section.id}-${work.index}`) && work.materials.map((material, materialIndex) => {\n                              const isEditing = editingMaterial && \n                                editingMaterial.sectionId === section.id && \n                                editingMaterial.workIndex === work.index && \n                                editingMaterial.materialIndex === materialIndex;\n                              \n                              return (\n                                <TableRow \n                                  key={`${section.id}-${work.index}-material-${materialIndex}`}\n                                  className=\"bg-gray-50/50 dark:bg-gray-800/30 border-l-4 border-gray-300\"\n                                >\n                                  <TableCell className=\"text-center text-gray-500\">{material.unit}</TableCell>\n                                  <TableCell className=\"text-gray-500\">{work.index}</TableCell>\n                                  <TableCell className=\"pl-8 text-gray-700 dark:text-gray-300\">\n                                    {isEditing ? (\n                                      <div className=\"relative\">\n                                        <Input\n                                          value={materialSearchTerm}\n                                          onChange={(e) => setMaterialSearchTerm(e.target.value)}\n                                          placeholder=\"Поиск материала...\"\n                                          className=\"text-sm\"\n                                          autoFocus\n                                        />\n                                        {searchResults.length > 0 && (\n                                          <div className=\"absolute top-full left-0 z-50 bg-white dark:bg-gray-800 border rounded-md shadow-lg max-h-60 overflow-y-auto min-w-[400px] w-max\">\n                                            {searchResults.map((result: any) => (\n                                              <div\n                                                key={result.id}\n                                                className=\"p-3 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer border-b last:border-b-0\"\n                                                onClick={() => handleSelectMaterial(result)}\n                                              >\n                                                <div className=\"font-medium text-sm whitespace-nowrap overflow-hidden text-ellipsis max-w-[380px]\" title={result.name}>\n                                                  {result.name}\n                                                </div>\n                                                <div className=\"text-xs text-gray-500 mt-1\">\n                                                  {result.unit} • ₽{parseFloat(result.pricePerUnit).toFixed(2)}\n                                                </div>\n                                              </div>\n                                            ))}\n                                          </div>\n                                        )}\n                                        <div className=\"flex gap-1 mt-1\">\n                                          <Button\n                                            size=\"sm\"\n                                            variant=\"ghost\"\n                                            className=\"h-6 w-6 p-0\"\n                                            onClick={handleCancelMaterialEdit}\n                                          >\n                                            <X className=\"h-3 w-3\" />\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    ) : (\n                                      <div \n                                        className=\"text-sm cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 p-1 rounded\"\n                                        onClick={() => handleEditMaterial(section.id, work.index, materialIndex, material)}\n                                      >\n                                        {material.name}\n                                      </div>\n                                    )}\n                                  </TableCell>\n                                  <TableCell className=\"text-center\">\n                                    {(() => {\n                                      const imageUrl = findMaterialImage(material.name);\n                                      return imageUrl ? (\n                                        <img \n                                          src={imageUrl} \n                                          alt={material.name}\n                                          className=\"w-12 h-12 object-cover rounded border mx-auto\"\n                                          onError={(e) => {\n                                            e.currentTarget.style.display = 'none';\n                                          }}\n                                        />\n                                      ) : (\n                                        <div className=\"w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded border flex items-center justify-center text-xs text-gray-500 mx-auto\">\n                                          Нет фото\n                                        </div>\n                                      );\n                                    })()}\n                                  </TableCell>\n                                  <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                                  <TableCell className=\"text-center font-mono text-gray-600\">\n                                    {material.quantity.toFixed(3)}\n                                  </TableCell>\n                                  <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                                  <TableCell className=\"text-center font-mono text-gray-600\">\n                                    ₽ {(material.unitPrice || material.costPrice || 0).toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-center font-mono text-gray-600\">\n                                    ₽ {(material.quantity * (material.unitPrice || material.costPrice || 0)).toFixed(2)}\n                                  </TableCell>\n                                  <TableCell>\n                                    {!isEditing && (\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        onClick={() => handleEditMaterial(section.id, work.index, materialIndex, material)}\n                                        className=\"h-8 w-8 p-0\"\n                                        title=\"Изменить материал\"\n                                      >\n                                        <Edit2 className=\"h-4 w-4\" />\n                                      </Button>\n                                    )}\n                                  </TableCell>\n                                </TableRow>\n                              );\n                            })}\n                          </React.Fragment>\n                        );\n                      })}\n                      \n                      {/* Итого по разделу */}\n                      {expandedSections.has(section.id) && (\n                        <TableRow className=\"bg-gray-100 dark:bg-gray-800 border-b-2 font-medium\">\n                          <TableCell colSpan={8} className=\"text-right\">\n                            Итого по разделу \"{section.title}\":\n                          </TableCell>\n                          <TableCell className=\"text-center font-mono font-bold\">\n                            ₽ {section.works.reduce((total, work) => total + (work.quantity * (work.unitPrice || work.costPrice || 0)), 0).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                          </TableCell>\n                          <TableCell></TableCell>\n                        </TableRow>\n                      )}\n                    </React.Fragment>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Смета - показываем всегда для отладки */}\n      <Card id=\"estimate-section\" className=\"border-2 border-green-200 dark:border-green-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-green-700 dark:text-green-300\">\n            <Calculator className=\"h-5 w-5\" />\n            Смета проекта\n            {estimateWorks.length > 0 && (\n              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                {estimateWorks.length} работ\n              </Badge>\n            )}\n          </CardTitle>\n          <CardDescription>\n            {estimateWorks.length === 0 \n              ? \"Нажмите кнопку '+' рядом с работой чтобы добавить её в смету\"\n              : `Добавлено ${estimateWorks.length} работ в смету проекта`\n            }\n          </CardDescription>\n        </CardHeader>\n        {estimateWorks.length === 0 ? (\n          <CardContent>\n            <p className=\"text-gray-500 text-center py-4\">\n              Нажмите кнопку \"+\" рядом с работой чтобы добавить её в смету\n            </p>\n          </CardContent>\n        ) : (\n          <CardContent>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-gray-50 dark:bg-gray-900\">\n                    <TableHead className=\"w-12\">Этап</TableHead>\n                    <TableHead className=\"w-16\">№</TableHead>\n                    <TableHead>Наименование работ</TableHead>\n                    <TableHead className=\"text-center w-20\">Изображение</TableHead>\n                    <TableHead className=\"text-center w-20\">Ед.изм</TableHead>\n                    <TableHead className=\"text-center w-20\">Количество</TableHead>\n                    <TableHead className=\"text-center w-20\">Норма</TableHead>\n                    <TableHead className=\"text-center w-24\">Цена за ед.</TableHead>\n                    <TableHead className=\"text-center w-24\">Сумма</TableHead>\n                    <TableHead className=\"w-12\"></TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {estimateWorks.map((work) => (\n                    <React.Fragment key={work.id}>\n                      {/* Заголовок раздела */}\n                      <TableRow className=\"bg-blue-50 dark:bg-blue-950/20\">\n                        <TableCell colSpan={10} className=\"font-bold text-blue-700 dark:text-blue-300\">\n                          {work.sectionTitle}\n                        </TableCell>\n                      </TableRow>\n                      \n                      {/* Работа */}\n                      <TableRow className=\"border-l-4 border-blue-200\">\n                        <TableCell className=\"font-medium text-center\">{work.stage}</TableCell>\n                        <TableCell className=\"font-medium\">{work.index}</TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">{work.title}</div>\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          <div className=\"w-8 h-8 bg-gray-100 dark:bg-gray-800 rounded border flex items-center justify-center text-xs text-gray-500\">\n                            IMG\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-center\">{work.unit}</TableCell>\n                        <TableCell className=\"text-center\">\n                          <Input\n                            type=\"number\"\n                            value={work.quantity}\n                            onChange={(e) => {\n                              const newWorks = [...estimateWorks];\n                              const workIndex = newWorks.findIndex(w => w.id === work.id);\n                              if (workIndex !== -1) {\n                                newWorks[workIndex].quantity = parseFloat(e.target.value) || 0;\n                                setEstimateWorks(newWorks);\n                              }\n                            }}\n                            className=\"w-20 text-center\"\n                            step=\"0.01\"\n                            min=\"0\"\n                          />\n                        </TableCell>\n                        <TableCell className=\"text-center\">—</TableCell>\n                        <TableCell className=\"text-center font-mono\">\n                          ₽ {(work.unitPrice || work.costPrice || 0).toFixed(2)}\n                        </TableCell>\n                        <TableCell className=\"text-center font-mono font-bold\">\n                          ₽ {(work.quantity * (work.unitPrice || work.costPrice || 0)).toFixed(2)}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleRemoveFromEstimate(work.id)}\n                            className=\"h-8 w-8 p-0 text-red-500 hover:text-red-700\"\n                            title=\"Удалить из сметы\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n\n                      {/* Материалы */}\n                      {work.materials.map((material: any, materialIndex: number) => (\n                        <TableRow \n                          key={`${work.id}-material-${materialIndex}`}\n                          className=\"bg-gray-50/50 dark:bg-gray-800/30 border-l-4 border-gray-300\"\n                        >\n                          <TableCell className=\"text-center text-gray-500\">{material.unit}</TableCell>\n                          <TableCell className=\"text-gray-500\">{work.index}</TableCell>\n                          <TableCell className=\"pl-8 text-gray-700 dark:text-gray-300\">\n                            <div className=\"text-sm\">{material.name}</div>\n                          </TableCell>\n                          <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                          <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                          <TableCell className=\"text-center\">\n                            <Input\n                              type=\"number\"\n                              value={material.quantity}\n                              onChange={(e) => {\n                                const newWorks = [...estimateWorks];\n                                const workIndex = newWorks.findIndex(w => w.id === work.id);\n                                if (workIndex !== -1) {\n                                  newWorks[workIndex].materials[materialIndex].quantity = parseFloat(e.target.value) || 0;\n                                  setEstimateWorks(newWorks);\n                                }\n                              }}\n                              className=\"w-20 text-center text-sm\"\n                              step=\"0.001\"\n                              min=\"0\"\n                            />\n                          </TableCell>\n                          <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                          <TableCell className=\"text-center font-mono text-gray-600\">\n                            ₽ {(material.unitPrice || material.costPrice || 0).toFixed(2)}\n                          </TableCell>\n                          <TableCell className=\"text-center font-mono text-gray-600\">\n                            ₽ {(material.quantity * (material.unitPrice || material.costPrice || 0)).toFixed(2)}\n                          </TableCell>\n                          <TableCell></TableCell>\n                        </TableRow>\n                      ))}\n                    </React.Fragment>\n                  ))}\n                  \n                  {/* Итого */}\n                  <TableRow className=\"bg-green-50 dark:bg-green-950/20 border-t-2 font-bold\">\n                    <TableCell colSpan={8} className=\"text-right text-lg\">\n                      Итого по смете:\n                    </TableCell>\n                    <TableCell className=\"text-center font-mono text-lg font-bold text-green-700 dark:text-green-300\">\n                      ₽ {estimateWorks.reduce((total, work) => {\n                        const workTotal = work.quantity * (work.unitPrice || work.costPrice || 0);\n                        const materialsTotal = work.materials.reduce((matTotal: number, material: any) => \n                          matTotal + (material.quantity * (material.unitPrice || material.costPrice || 0)), 0\n                        );\n                        return total + workTotal + materialsTotal;\n                      }, 0).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                    </TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n\n      {/* Старая версия для сравнения */}\n      {estimateWorks.length > 0 && false && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calculator className=\"h-5 w-5\" />\n              Смета проекта\n            </CardTitle>\n            <CardDescription>\n              {estimateWorks.length} работ в смете\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-gray-50 dark:bg-gray-900\">\n                    <TableHead className=\"w-12\">Этап</TableHead>\n                    <TableHead className=\"w-16\">№</TableHead>\n                    <TableHead>Наименование работ</TableHead>\n                    <TableHead className=\"text-center w-20\">Изображение</TableHead>\n                    <TableHead className=\"text-center w-20\">Ед.изм</TableHead>\n                    <TableHead className=\"text-center w-20\">Количество</TableHead>\n                    <TableHead className=\"text-center w-20\">Норма</TableHead>\n                    <TableHead className=\"text-center w-24\">Цена за ед.</TableHead>\n                    <TableHead className=\"text-center w-24\">Сумма</TableHead>\n                    <TableHead className=\"w-12\"></TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {estimateWorks.map((work) => (\n                    <React.Fragment key={work.id}>\n                      {/* Заголовок раздела */}\n                      <TableRow className=\"bg-blue-50 dark:bg-blue-950/20\">\n                        <TableCell colSpan={10} className=\"font-bold text-blue-700 dark:text-blue-300\">\n                          {work.sectionTitle}\n                        </TableCell>\n                      </TableRow>\n                      \n                      {/* Работа */}\n                      <TableRow className=\"border-l-4 border-blue-200\">\n                        <TableCell className=\"font-medium text-center\">{work.stage}</TableCell>\n                        <TableCell className=\"font-medium\">{work.index}</TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">{work.title}</div>\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          <div className=\"w-8 h-8 bg-gray-100 dark:bg-gray-800 rounded border flex items-center justify-center text-xs text-gray-500\">\n                            IMG\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-center\">{work.unit}</TableCell>\n                        <TableCell className=\"text-center\">\n                          <Input\n                            type=\"number\"\n                            value={work.quantity}\n                            onChange={(e) => {\n                              const newWorks = [...estimateWorks];\n                              const workIndex = newWorks.findIndex(w => w.id === work.id);\n                              if (workIndex !== -1) {\n                                newWorks[workIndex].quantity = parseFloat(e.target.value) || 0;\n                                setEstimateWorks(newWorks);\n                              }\n                            }}\n                            className=\"w-20 text-center\"\n                            step=\"0.01\"\n                            min=\"0\"\n                          />\n                        </TableCell>\n                        <TableCell className=\"text-center\">—</TableCell>\n                        <TableCell className=\"text-center font-mono\">\n                          ₽ {(work.unitPrice || work.costPrice || 0).toFixed(2)}\n                        </TableCell>\n                        <TableCell className=\"text-center font-mono font-bold\">\n                          ₽ {(work.quantity * (work.unitPrice || work.costPrice || 0)).toFixed(2)}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleRemoveFromEstimate(work.id)}\n                            className=\"h-8 w-8 p-0 text-red-500 hover:text-red-700\"\n                            title=\"Удалить из сметы\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n\n                      {/* Материалы */}\n                      {work.materials.map((material: any, materialIndex: number) => (\n                        <TableRow \n                          key={`${work.id}-material-${materialIndex}`}\n                          className=\"bg-gray-50/50 dark:bg-gray-800/30 border-l-4 border-gray-300\"\n                        >\n                          <TableCell className=\"text-center text-gray-500\">{material.unit}</TableCell>\n                          <TableCell className=\"text-gray-500\">{work.index}</TableCell>\n                          <TableCell className=\"pl-8 text-gray-700 dark:text-gray-300\">\n                            <div className=\"text-sm\">{material.name}</div>\n                          </TableCell>\n                          <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                          <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                          <TableCell className=\"text-center\">\n                            <Input\n                              type=\"number\"\n                              value={material.quantity}\n                              onChange={(e) => {\n                                const newWorks = [...estimateWorks];\n                                const workIndex = newWorks.findIndex(w => w.id === work.id);\n                                if (workIndex !== -1) {\n                                  newWorks[workIndex].materials[materialIndex].quantity = parseFloat(e.target.value) || 0;\n                                  setEstimateWorks(newWorks);\n                                }\n                              }}\n                              className=\"w-20 text-center text-sm\"\n                              step=\"0.001\"\n                              min=\"0\"\n                            />\n                          </TableCell>\n                          <TableCell className=\"text-center text-gray-500\">—</TableCell>\n                          <TableCell className=\"text-center font-mono text-gray-600\">\n                            ₽ {(material.unitPrice || material.costPrice || 0).toFixed(2)}\n                          </TableCell>\n                          <TableCell className=\"text-center font-mono text-gray-600\">\n                            ₽ {(material.quantity * (material.unitPrice || material.costPrice || 0)).toFixed(2)}\n                          </TableCell>\n                          <TableCell></TableCell>\n                        </TableRow>\n                      ))}\n                    </React.Fragment>\n                  ))}\n                  \n                  {/* Итого */}\n                  <TableRow className=\"bg-green-50 dark:bg-green-950/20 border-t-2 font-bold\">\n                    <TableCell colSpan={8} className=\"text-right text-lg\">\n                      Итого по смете:\n                    </TableCell>\n                    <TableCell className=\"text-center font-mono text-lg font-bold text-green-700 dark:text-green-300\">\n                      ₽ {estimateWorks.reduce((total, work) => {\n                        const workTotal = work.quantity * (work.unitPrice || work.costPrice || 0);\n                        const materialsTotal = work.materials.reduce((matTotal: number, material: any) => \n                          matTotal + (material.quantity * (material.unitPrice || material.costPrice || 0)), 0\n                        );\n                        return total + workTotal + materialsTotal;\n                      }, 0).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n                    </TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Диалог редактирования количества */}\n      <Dialog open={!!editingWork} onOpenChange={() => setEditingWork(null)}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Изменить количество</DialogTitle>\n            <DialogDescription>\n              {editingWork?.title}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"quantity\">Количество ({editingWork?.unit})</Label>\n              <Input\n                id=\"quantity\"\n                type=\"number\"\n                step=\"0.01\"\n                value={newQuantity}\n                onChange={(e) => setNewQuantity(e.target.value)}\n                placeholder=\"0.00\"\n              />\n            </div>\n            {editingWork && (\n              <div className=\"text-sm text-gray-600\">\n                Стоимость: ₽{((parseFloat(newQuantity) || 0) * editingWork.unitPrice).toLocaleString('ru-RU', { minimumFractionDigits: 2 })}\n              </div>\n            )}\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setEditingWork(null)}\n            >\n              Отмена\n            </Button>\n            <Button onClick={handleSaveQuantity}>\n              Сохранить\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":52904},"client/src/components/room-parameters-table.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface RoomData {\n  length: number;\n  width: number;\n  height: number;\n  openings: number;\n  doors: number;\n  floorArea: number;\n  window1_a: number;\n  window1_b: number;\n  window2_a: number;\n  window2_b: number;\n  window3_a: number;\n  window3_b: number;\n  portal_a: number;\n  portal_b: number;\n}\n\ninterface RoomParametersTableProps {\n  onDataChange?: (roomIndex: number, data: RoomData) => void;\n}\n\nexport function RoomParametersTable({ onDataChange }: RoomParametersTableProps) {\n  const [roomsData, setRoomsData] = useState<RoomData[]>(\n    Array.from({ length: 12 }, () => ({\n      length: 0,\n      width: 0,\n      height: 0,\n      openings: 0,\n      doors: 0,\n      floorArea: 0,\n      window1_a: 0,\n      window1_b: 0,\n      window2_a: 0,\n      window2_b: 0,\n      window3_a: 0,\n      window3_b: 0,\n      portal_a: 0,\n      portal_b: 0,\n    }))\n  );\n\n  // Вычисляемые поля\n  const calculateWallArea = (room: RoomData): number => {\n    if (!room.length || !room.height) return 0;\n    const wallArea = room.length * room.height;\n    const openings = calculateOpenings(room);\n    return Math.max(0, wallArea - openings);\n  };\n\n  const calculateFloorArea = (room: RoomData): number => {\n    if (!room.length) return 0;\n    return room.length;\n  };\n\n  const calculatePerimeter = (room: RoomData): number => {\n    if (!room.length) return 0;\n    return room.length;\n  };\n\n  const calculateWindow1Area = (room: RoomData): number => {\n    return (room.window1_a || 0) * (room.window1_b || 0);\n  };\n\n  const calculateWindow2Area = (room: RoomData): number => {\n    return (room.window2_a || 0) * (room.window2_b || 0);\n  };\n\n  const calculateWindow3Area = (room: RoomData): number => {\n    return (room.window3_a || 0) * (room.window3_b || 0);\n  };\n\n  const calculatePortalArea = (room: RoomData): number => {\n    return (room.portal_a || 0) * (room.portal_b || 0);\n  };\n\n  const calculateOpenings = (room: RoomData): number => {\n    const window1Area = calculateWindow1Area(room);\n    const window2Area = calculateWindow2Area(room);\n    const window3Area = calculateWindow3Area(room);\n    const portalArea = calculatePortalArea(room);\n    return window1Area + window2Area + window3Area + portalArea;\n  };\n\n  const calculateWindowSlopes = (room: RoomData): number => {\n    const window1Area = calculateWindow1Area(room);\n    const window2Area = calculateWindow2Area(room);\n    const window3Area = calculateWindow3Area(room);\n    return 2 * (window1Area + window2Area + window3Area);\n  };\n\n  const updateRoomData = (roomIndex: number, field: keyof RoomData, value: number) => {\n    const newRoomsData = [...roomsData];\n    newRoomsData[roomIndex] = {\n      ...newRoomsData[roomIndex],\n      [field]: value,\n    };\n    setRoomsData(newRoomsData);\n    onDataChange?.(roomIndex, newRoomsData[roomIndex]);\n  };\n\n  const renderInputCell = (roomIndex: number, field: keyof RoomData, bgClass: string) => (\n    <td className=\"border border-gray-400 dark:border-gray-500 p-0\">\n      <input\n        type=\"number\"\n        step=\"0.01\"\n        value={roomsData[roomIndex][field] || \"\"}\n        onChange={(e) => updateRoomData(roomIndex, field, parseFloat(e.target.value) || 0)}\n        className={`w-full h-10 px-3 border-0 bg-transparent text-center text-sm font-medium text-gray-800 dark:text-gray-200 focus:bg-blue-50 dark:focus:bg-blue-900/30 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all ${bgClass}`}\n        placeholder=\"0.00\"\n      />\n    </td>\n  );\n\n  const renderCalculatedCell = (value: number, bgClass: string) => (\n    <td className={`border border-gray-400 dark:border-gray-500 px-3 py-2 text-center text-sm font-medium text-gray-800 dark:text-gray-200 ${bgClass}`}>\n      <span className=\"inline-block min-w-[50px]\">\n        {value ? value.toFixed(2) : \"0.00\"}\n      </span>\n    </td>\n  );\n\n  const rows = [\n    {\n      label: \"Периметр\",\n      bg: \"bg-white dark:bg-gray-800\",\n      type: \"input\" as const,\n      field: \"length\" as keyof RoomData,\n    },\n    {\n      label: \"Площадь стен\",\n      bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n      type: \"calculated\" as const,\n      calculator: calculateWallArea,\n    },\n    {\n      label: \"Площадь пола\",\n      bg: \"bg-white dark:bg-gray-800\",\n      type: \"input\" as const,\n      field: \"floorArea\" as keyof RoomData,\n    },\n    {\n      label: \"Проемы\",\n      bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n      type: \"calculated\" as const,\n      calculator: calculateOpenings,\n    },\n    {\n      label: \"Высота\",\n      bg: \"bg-white dark:bg-gray-800\",\n      type: \"input\" as const,\n      field: \"height\" as keyof RoomData,\n    },\n    {\n      label: \"Оконные/дверные откосы\",\n      bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n      type: \"calculated\" as const,\n      calculator: calculateWindowSlopes,\n    },\n    {\n      label: \"Двери (кол-во) (шт)\",\n      bg: \"bg-white dark:bg-gray-800\",\n      type: \"input\" as const,\n      field: \"doors\" as keyof RoomData,\n    },\n    {\n      label: \"Окно 1: Длина/Высота, (м2)\",\n      bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n      type: \"calculated\" as const,\n      calculator: calculateWindow1Area,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"L=\",\n      type: \"input\" as const,\n      field: \"window1_a\" as keyof RoomData,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"H=\",\n      type: \"input\" as const,\n      field: \"window1_b\" as keyof RoomData,\n    },\n    {\n      label: \"Окно 2: Длина/Высота, (м2)\",\n      bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n      type: \"calculated\" as const,\n      calculator: calculateWindow2Area,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"L=\",\n      type: \"input\" as const,\n      field: \"window2_a\" as keyof RoomData,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"H=\",\n      type: \"input\" as const,\n      field: \"window2_b\" as keyof RoomData,\n    },\n    {\n      label: \"Окно 3: Длина/Высота, (м2)\",\n      bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n      type: \"calculated\" as const,\n      calculator: calculateWindow3Area,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"L=\",\n      type: \"input\" as const,\n      field: \"window3_a\" as keyof RoomData,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"H=\",\n      type: \"input\" as const,\n      field: \"window3_b\" as keyof RoomData,\n    },\n    {\n      label: \"Портал: Длина/Высота, (м2)\",\n      bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n      type: \"calculated\" as const,\n      calculator: calculatePortalArea,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"L=\",\n      type: \"input\" as const,\n      field: \"portal_a\" as keyof RoomData,\n    },\n    {\n      label: \"\",\n      bg: \"bg-white dark:bg-gray-800\",\n      secondary: \"H=\",\n      type: \"input\" as const,\n      field: \"portal_b\" as keyof RoomData,\n    },\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\">\n      <h3 className=\"text-xl font-bold mb-6 text-gray-800 dark:text-gray-200\">Габариты помещений</h3>\n      <div className=\"overflow-x-auto shadow-lg rounded-lg\">\n        <table className=\"w-full border-collapse border border-gray-400 dark:border-gray-500 text-sm\">\n          <thead>\n            <tr className=\"bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-600\">\n              <th className=\"border border-gray-400 dark:border-gray-500 px-4 py-3 text-right font-bold text-gray-700 dark:text-gray-200 min-w-[200px]\">\n                Габариты\n              </th>\n              {Array.from({ length: 12 }, (_, i) => (\n                <th key={i} className=\"border border-gray-400 dark:border-gray-500 px-3 py-3 text-center font-semibold text-gray-700 dark:text-gray-200 min-w-[100px] text-xs\">\n                  {i < 9 ? `Помещение ${i + 1}` : `С/У${i - 8}`}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((row, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors\">\n                <td className={`border border-gray-400 dark:border-gray-500 px-4 py-2 ${row.bg} font-semibold text-right text-gray-800 dark:text-gray-200 text-sm min-w-[200px]`}>\n                  <div className=\"flex flex-col\">\n                    <span className=\"leading-tight\">{row.label}</span>\n                    {row.secondary && <span className=\"text-center text-xs font-normal mt-1 text-gray-600 dark:text-gray-400\">{row.secondary}</span>}\n                  </div>\n                </td>\n                {Array.from({ length: 12 }, (_, colIndex) => {\n                  if (row.type === \"input\" && row.field) {\n                    return renderInputCell(colIndex, row.field, row.bg);\n                  } else if (row.type === \"calculated\" && row.calculator) {\n                    const value = row.calculator(roomsData[colIndex]);\n                    return renderCalculatedCell(value, row.bg);\n                  } else {\n                    // Header or empty cells\n                    return (\n                      <td key={colIndex} className={`border border-gray-400 dark:border-gray-500 px-3 py-2 text-center ${row.bg}`}>\n                        {/* Empty cell for headers */}\n                      </td>\n                    );\n                  }\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Формулы справка */}\n      <div className=\"mt-6 p-5 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-700 dark:to-gray-600 rounded-lg border border-blue-200 dark:border-gray-500 shadow-sm\">\n        <h4 className=\"font-bold mb-3 text-gray-800 dark:text-gray-200 text-sm\">Автоматические расчеты:</h4>\n        <ul className=\"space-y-2 text-gray-700 dark:text-gray-300 text-xs\">\n          <li className=\"flex items-start\">\n            <span className=\"text-blue-500 mr-2\">•</span>\n            <span><strong className=\"font-semibold\">Площадь стен:</strong> Периметр × Высота - Проемы</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"text-green-500 mr-2\">•</span>\n            <span><strong className=\"font-semibold\">Площадь пола:</strong> Ручной ввод</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"text-orange-500 mr-2\">•</span>\n            <span><strong className=\"font-semibold\">Проемы:</strong> Окно 1 + Окно 2 + Окно 3 + Портал</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"text-purple-500 mr-2\">•</span>\n            <span><strong className=\"font-semibold\">Оконные/дверные откосы:</strong> 2 × (Сумма площадей всех окон)</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":11347},"client/src/contexts/UndoRedoContext.tsx":{"content":"import { createContext, useContext, ReactNode } from 'react';\nimport { useUndoRedo, UndoAction } from '@/hooks/useUndoRedo';\n\ninterface UndoRedoContextType {\n  addAction: (action: Omit<UndoAction, 'id' | 'timestamp'>) => void;\n  undo: () => Promise<void>;\n  clearHistory: () => void;\n  canUndo: boolean;\n  undoStack: UndoAction[];\n}\n\nconst UndoRedoContext = createContext<UndoRedoContextType | undefined>(undefined);\n\nexport function UndoRedoProvider({ children }: { children: ReactNode }) {\n  const undoRedo = useUndoRedo();\n\n  return (\n    <UndoRedoContext.Provider value={undoRedo}>\n      {children}\n    </UndoRedoContext.Provider>\n  );\n}\n\nexport function useUndoRedoContext() {\n  const context = useContext(UndoRedoContext);\n  if (context === undefined) {\n    throw new Error('useUndoRedoContext must be used within a UndoRedoProvider');\n  }\n  return context;\n}","size_bytes":865},"client/src/hooks/useUndoRedo.ts":{"content":"import { useState, useCallback, useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport interface UndoAction {\n  id: string;\n  description: string;\n  undo: () => Promise<void> | void;\n  timestamp: number;\n}\n\nexport function useUndoRedo() {\n  const [undoStack, setUndoStack] = useState<UndoAction[]>([]);\n  const { toast } = useToast();\n\n  const addAction = useCallback((action: Omit<UndoAction, 'id' | 'timestamp'>) => {\n    const undoAction: UndoAction = {\n      ...action,\n      id: Date.now().toString(),\n      timestamp: Date.now(),\n    };\n    \n    setUndoStack(prev => [...prev.slice(-9), undoAction]); // Храним последние 10 действий\n  }, []);\n\n  const undo = useCallback(async () => {\n    if (undoStack.length === 0) {\n      toast({\n        title: \"Нет действий для отмены\",\n        description: \"История действий пуста\",\n        variant: \"default\",\n      });\n      return;\n    }\n\n    const lastAction = undoStack[undoStack.length - 1];\n    \n    try {\n      await lastAction.undo();\n      setUndoStack(prev => prev.slice(0, -1));\n      \n      toast({\n        title: \"Действие отменено\",\n        description: lastAction.description,\n        variant: \"default\",\n      });\n    } catch (error) {\n      console.error('Ошибка при отмене действия:', error);\n      toast({\n        title: \"Ошибка отмены\",\n        description: \"Не удалось отменить последнее действие\",\n        variant: \"destructive\",\n      });\n    }\n  }, [undoStack, toast]);\n\n  const clearHistory = useCallback(() => {\n    setUndoStack([]);\n  }, []);\n\n  // Глобальный обработчик Ctrl+Z\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.ctrlKey && event.key === 'z' && !event.shiftKey) {\n        event.preventDefault();\n        undo();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [undo]);\n\n  return {\n    addAction,\n    undo,\n    clearHistory,\n    canUndo: undoStack.length > 0,\n    undoStack,\n  };\n}","size_bytes":2204},"client/src/components/area-work-linking.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Settings, Save, CheckCircle, Circle } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Task, ProjectAreas, AreaType } from \"@shared/schema\";\nimport { getAreaByType, formatArea } from \"@/utils/areaCalculations\";\n\ninterface AreaWorkLinkingProps {\n  projectAreas?: ProjectAreas;\n}\n\nexport default function AreaWorkLinking({ projectAreas }: AreaWorkLinkingProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isConfigDialogOpen, setIsConfigDialogOpen] = useState(false);\n  const [selectedTask, setSelectedTask] = useState<Task & {\n    autoFillFromArea?: boolean;\n    areaType?: AreaType;\n    areaMultiplier?: number;\n  } | null>(null);\n\n  const queryClient = useQueryClient();\n\n  // Загрузка всех работ\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/hierarchy/tasks\"],\n  });\n\n  // Загрузка настроек привязки площадей\n  const { data: areaConfigs = [] } = useQuery<Array<{\n    taskId: string;\n    autoFillFromArea: boolean;\n    areaType: AreaType;\n    areaMultiplier: number;\n  }>>({\n    queryKey: [\"/api/area-configs\"],\n  });\n\n  // Сохранение настроек\n  const saveConfigMutation = useMutation({\n    mutationFn: async (config: {\n      taskId: string;\n      autoFillFromArea: boolean;\n      areaType?: AreaType;\n      areaMultiplier?: number;\n    }) => {\n      return apiRequest(`/api/area-configs`, {\n        method: \"POST\",\n        body: JSON.stringify(config),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/area-configs\"] });\n      setIsConfigDialogOpen(false);\n    },\n  });\n\n  // Фильтрация работ по поисковому запросу\n  const filteredTasks = tasks.filter(task =>\n    task.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    task.index?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Получение конфигурации для задачи\n  const getTaskConfig = (taskId: string) => {\n    return areaConfigs.find(config => config.taskId === taskId);\n  };\n\n  // Обработка настройки задачи\n  const handleConfigureTask = (task: Task) => {\n    const config = getTaskConfig(task.id);\n    setSelectedTask({\n      ...task,\n      autoFillFromArea: config?.autoFillFromArea || false,\n      areaType: config?.areaType || \"ручной\",\n      areaMultiplier: config?.areaMultiplier || 1.0,\n    });\n    setIsConfigDialogOpen(true);\n  };\n\n  // Сохранение конфигурации\n  const handleSaveConfig = () => {\n    if (!selectedTask) return;\n\n    saveConfigMutation.mutate({\n      taskId: selectedTask.id,\n      autoFillFromArea: selectedTask.autoFillFromArea || false,\n      areaType: selectedTask.areaType,\n      areaMultiplier: selectedTask.areaMultiplier,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Привязка площадей к работам</CardTitle>\n          <div className=\"text-sm text-gray-600\">\n            Автоматическое заполнение объемов работ на основе площадей помещений\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Поиск */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Поиск работ...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Список работ */}\n          <div className=\"space-y-2 max-h-[400px] overflow-y-auto\">\n            {filteredTasks.map((task) => {\n              const config = getTaskConfig(task.id);\n              const isConfigured = config?.autoFillFromArea;\n              \n              return (\n                <div\n                  key={task.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\"\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      {isConfigured ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      ) : (\n                        <Circle className=\"h-4 w-4 text-gray-400\" />\n                      )}\n                      <span className=\"font-medium\">{task.index}</span>\n                      <span>{task.title}</span>\n                    </div>\n                    <div className=\"text-sm text-gray-500 mt-1\">\n                      {task.unit} • ₽{parseFloat(task.costPrice || \"0\").toFixed(2)}\n                    </div>\n                    {isConfigured && config && (\n                      <div className=\"flex gap-2 mt-1\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {config.areaType}\n                        </Badge>\n                        {config.areaMultiplier !== 1.0 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            ×{config.areaMultiplier}\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {isConfigured && (\n                      <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                        Привязано: {config?.areaType} ({config?.areaMultiplier || 1}×{config?.areaMultiplier || 1})\n                      </Badge>\n                    )}\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleConfigureTask(task)}\n                    >\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n            \n            {filteredTasks.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                {searchQuery ? \"Работы не найдены\" : \"Нет доступных работ\"}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Диалог настройки */}\n      <Dialog open={isConfigDialogOpen} onOpenChange={setIsConfigDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Настройка привязки площадей</DialogTitle>\n            <DialogDescription>\n              Настройте автоматическое заполнение объема работы на основе площадей помещений\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedTask && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">Работа</Label>\n                <div className=\"mt-1 p-2 bg-gray-50 rounded text-sm\">\n                  <div className=\"font-medium\">{selectedTask.index} {selectedTask.title}</div>\n                  <div className=\"text-gray-500\">{selectedTask.unit} • ₽{parseFloat(selectedTask.costPrice || \"0\").toFixed(2)}</div>\n                </div>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={selectedTask.autoFillFromArea || false}\n                    onCheckedChange={(checked) => \n                      setSelectedTask(prev => prev ? { ...prev, autoFillFromArea: checked } : null)\n                    }\n                  />\n                  <Label>Автоматически заполнять объем</Label>\n                </div>\n                \n                {selectedTask.autoFillFromArea && (\n                  <>\n                    <div>\n                      <Label>Тип площади</Label>\n                      <Select\n                        value={selectedTask.areaType || \"ручной\"}\n                        onValueChange={(value) => \n                          setSelectedTask(prev => prev ? { ...prev, areaType: value as AreaType } : null)\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"пол\">Пол</SelectItem>\n                          <SelectItem value=\"потолок\">Потолок</SelectItem>\n                          <SelectItem value=\"стены\">Стены</SelectItem>\n                          <SelectItem value=\"окна\">Окна</SelectItem>\n                          <SelectItem value=\"двери\">Двери</SelectItem>\n                          <SelectItem value=\"ручной\">Ручной ввод</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label>Коэффициент (множитель)</Label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={selectedTask.areaMultiplier || 1.0}\n                        onChange={(e) => \n                          setSelectedTask(prev => prev ? { \n                            ...prev, \n                            areaMultiplier: parseFloat(e.target.value) || 1.0 \n                          } : null)\n                        }\n                      />\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        Для учета запаса материала или особенностей работы\n                      </div>\n                    </div>\n                    \n                    {projectAreas && selectedTask.areaType && selectedTask.areaType !== \"ручной\" && (\n                      <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded\">\n                        <div className=\"text-sm text-blue-700 dark:text-blue-300\">\n                          <div>Базовая площадь: {formatArea(getAreaByType(projectAreas, selectedTask.areaType))}</div>\n                          <div className=\"font-medium\">\n                            Итоговый объем: {formatArea(getAreaByType(projectAreas, selectedTask.areaType) * (selectedTask.areaMultiplier || 1.0), selectedTask.unit)}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n              \n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsConfigDialogOpen(false)}\n                >\n                  Отмена\n                </Button>\n                <Button \n                  onClick={handleSaveConfig}\n                  disabled={saveConfigMutation.isPending}\n                  className=\"bg-primary hover:bg-primary/90 text-white\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {saveConfigMutation.isPending ? \"Сохранение...\" : \"Сохранить\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12578},"client/src/utils/areaCalculations.ts":{"content":"import type { ProjectAreas, RoomAreas, AreaType } from \"@shared/schema\";\n\ninterface RoomData {\n  length: number;\n  width: number;\n  height: number;\n  openings: number;\n  doors: number;\n  floorArea: number;\n  window1_a: number;\n  window1_b: number;\n  window2_a: number;\n  window2_b: number;\n  window3_a: number;\n  window3_b: number;\n  portal_a: number;\n  portal_b: number;\n}\n\n/**\n * Рассчитывает площади для одного помещения\n */\nexport function calculateRoomAreas(room: RoomData): RoomAreas {\n  const windowArea = \n    (room.window1_a || 0) * (room.window1_b || 0) +\n    (room.window2_a || 0) * (room.window2_b || 0) +\n    (room.window3_a || 0) * (room.window3_b || 0);\n  \n  const doorArea = (room.portal_a || 0) * (room.portal_b || 0);\n  const allOpenings = windowArea + doorArea;\n  \n  const perimeter = room.length || 0;\n  const height = room.height || 0;\n  const wallAreaGross = perimeter * height;\n  const wallAreaNet = Math.max(0, wallAreaGross - allOpenings);\n  \n  return {\n    floorArea: room.floorArea || 0,\n    ceilingArea: room.floorArea || 0, // Площадь потолка = площадь пола\n    wallArea: wallAreaNet,\n    windowArea,\n    doorArea,\n    perimeter\n  };\n}\n\n/**\n * Рассчитывает общие площади проекта\n */\nexport function calculateProjectAreas(roomsData: RoomData[]): ProjectAreas {\n  const roomsAreas = roomsData.map(calculateRoomAreas);\n  \n  const totals = roomsAreas.reduce(\n    (acc, room) => ({\n      totalFloorArea: acc.totalFloorArea + room.floorArea,\n      totalCeilingArea: acc.totalCeilingArea + room.ceilingArea,\n      totalWallArea: acc.totalWallArea + room.wallArea,\n      totalWindowArea: acc.totalWindowArea + room.windowArea,\n      totalDoorArea: acc.totalDoorArea + room.doorArea,\n      totalPerimeter: acc.totalPerimeter + room.perimeter,\n    }),\n    {\n      totalFloorArea: 0,\n      totalCeilingArea: 0,\n      totalWallArea: 0,\n      totalWindowArea: 0,\n      totalDoorArea: 0,\n      totalPerimeter: 0,\n    }\n  );\n  \n  return {\n    ...totals,\n    roomsData: roomsAreas\n  };\n}\n\n/**\n * Получает площадь по типу из проекта\n */\nexport function getAreaByType(areas: ProjectAreas, areaType: AreaType): number {\n  switch (areaType) {\n    case \"пол\":\n      return areas.totalFloorArea;\n    case \"потолок\":\n      return areas.totalCeilingArea;\n    case \"стены\":\n      return areas.totalWallArea;\n    case \"окна\":\n      return areas.totalWindowArea;\n    case \"двери\":\n      return areas.totalDoorArea;\n    case \"ручной\":\n    default:\n      return 0;\n  }\n}\n\n/**\n * Автоматически определяет тип площади по названию работы\n */\nexport function suggestAreaType(workTitle: string): AreaType {\n  const title = workTitle.toLowerCase();\n  \n  // Полы\n  if (title.includes(\"пол\") || title.includes(\"стяжка\") || title.includes(\"покрытие пол\") || \n      title.includes(\"плинтус\") || title.includes(\"ламинат\") || title.includes(\"паркет\") ||\n      title.includes(\"линолеум\") || title.includes(\"керамогранит пол\")) {\n    return \"пол\";\n  }\n  \n  // Потолки\n  if (title.includes(\"потолок\") || title.includes(\"подвесн\") || title.includes(\"натяжн\") ||\n      title.includes(\"покраска потолк\") || title.includes(\"штукатурка потолк\") ||\n      title.includes(\"шпаклевка потолк\") || title.includes(\"грунтовка потолк\")) {\n    return \"потолок\";\n  }\n  \n  // Стены\n  if (title.includes(\"стен\") || title.includes(\"штукатурка\") || title.includes(\"шпаклевка\") ||\n      title.includes(\"обои\") || title.includes(\"покраска стен\") || title.includes(\"кирпич\") ||\n      title.includes(\"блок\") || title.includes(\"перегородк\") || title.includes(\"кладка\")) {\n    return \"стены\";\n  }\n  \n  // Окна\n  if (title.includes(\"окн\") || title.includes(\"откос\") || title.includes(\"подоконник\") ||\n      title.includes(\"рама\") || title.includes(\"стеклопакет\")) {\n    return \"окна\";\n  }\n  \n  // Двери\n  if (title.includes(\"двер\") || title.includes(\"короб\") || title.includes(\"наличник\") ||\n      title.includes(\"замок\") || title.includes(\"ручка двер\")) {\n    return \"двери\";\n  }\n  \n  return \"ручной\";\n}\n\n/**\n * Форматирует площадь для отображения\n */\nexport function formatArea(area: number, unit: string = \"м²\"): string {\n  return `${area.toFixed(2)} ${unit}`;\n}","size_bytes":4686}}}